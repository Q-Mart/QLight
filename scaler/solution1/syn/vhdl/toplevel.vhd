-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toplevel is
generic (
    C_M_AXI_MAXI_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_USER_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_MAXI_AWVALID : OUT STD_LOGIC;
    m_axi_MAXI_AWREADY : IN STD_LOGIC;
    m_axi_MAXI_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_AWUSER_WIDTH-1 downto 0);
    m_axi_MAXI_WVALID : OUT STD_LOGIC;
    m_axi_MAXI_WREADY : IN STD_LOGIC;
    m_axi_MAXI_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH/8-1 downto 0);
    m_axi_MAXI_WLAST : OUT STD_LOGIC;
    m_axi_MAXI_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_WUSER_WIDTH-1 downto 0);
    m_axi_MAXI_ARVALID : OUT STD_LOGIC;
    m_axi_MAXI_ARREADY : IN STD_LOGIC;
    m_axi_MAXI_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ARUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RVALID : IN STD_LOGIC;
    m_axi_MAXI_RREADY : OUT STD_LOGIC;
    m_axi_MAXI_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_RLAST : IN STD_LOGIC;
    m_axi_MAXI_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_RUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BVALID : IN STD_LOGIC;
    m_axi_MAXI_BREADY : OUT STD_LOGIC;
    m_axi_MAXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of toplevel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "toplevel,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=109708,HLS_SYN_TPT=none,HLS_SYN_MEM=262,HLS_SYN_DSP=19,HLS_SYN_FF=3305,HLS_SYN_LUT=7312,HLS_VERSION=2018_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1A5E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011010010111100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_698 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011010011000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv17_1A5E0 : STD_LOGIC_VECTOR (16 downto 0) := "11010010111100000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv20_1A64 : STD_LOGIC_VECTOR (19 downto 0) := "00000001101001100100";
    constant ap_const_lv20_FE59C : STD_LOGIC_VECTOR (19 downto 0) := "11111110010110011100";
    constant ap_const_lv20_1C044 : STD_LOGIC_VECTOR (19 downto 0) := "00011100000001000100";
    constant ap_const_lv21_1FE59C : STD_LOGIC_VECTOR (20 downto 0) := "111111110010110011100";
    constant ap_const_lv21_1A5DF : STD_LOGIC_VECTOR (20 downto 0) := "000011010010111011111";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv14_3FFC : STD_LOGIC_VECTOR (13 downto 0) := "11111111111100";
    constant ap_const_lv14_69C : STD_LOGIC_VECTOR (13 downto 0) := "00011010011100";
    constant ap_const_lv15_7FFC : STD_LOGIC_VECTOR (14 downto 0) := "111111111111100";
    constant ap_const_lv15_697 : STD_LOGIC_VECTOR (14 downto 0) := "000011010010111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_698 : STD_LOGIC_VECTOR (10 downto 0) := "11010011000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal ram : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_r_0_vld_reg : STD_LOGIC := '0';
    signal length_r_0_ack_out : STD_LOGIC;
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal height_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal height_0_vld_reg : STD_LOGIC := '0';
    signal height_0_ack_out : STD_LOGIC;
    signal scaledLength : STD_LOGIC_VECTOR (31 downto 0);
    signal scaledLength_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal scaledLength_0_vld_reg : STD_LOGIC := '0';
    signal scaledLength_0_ack_out : STD_LOGIC;
    signal sectionDataCopy_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal sectionDataCopy_ce0 : STD_LOGIC;
    signal sectionDataCopy_we0 : STD_LOGIC;
    signal sectionDataCopy_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sectionDataCopy_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sectionDataCopy_ce1 : STD_LOGIC;
    signal sectionDataCopy_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSectionData_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal newSectionData_ce0 : STD_LOGIC;
    signal newSectionData_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal newSectionData_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSectionData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal MAXI_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_reg_2085 : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_9_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond2_reg_2433 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_2433_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal MAXI_AWVALID : STD_LOGIC;
    signal MAXI_AWREADY : STD_LOGIC;
    signal MAXI_WVALID : STD_LOGIC;
    signal MAXI_WREADY : STD_LOGIC;
    signal MAXI_ARVALID : STD_LOGIC;
    signal MAXI_ARREADY : STD_LOGIC;
    signal MAXI_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_RVALID : STD_LOGIC;
    signal MAXI_RREADY : STD_LOGIC;
    signal MAXI_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_RLAST : STD_LOGIC;
    signal MAXI_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BVALID : STD_LOGIC;
    signal MAXI_BREADY : STD_LOGIC;
    signal MAXI_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_310 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_reg_310_pp0_iter1_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar2_reg_535 : STD_LOGIC_VECTOR (10 downto 0);
    signal ram1_reg_2073 : STD_LOGIC_VECTOR (29 downto 0);
    signal MAXI_addr_reg_2078 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_MAXI_ARREADY : STD_LOGIC;
    signal exitcond1_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_2085_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_572_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_next_reg_2089 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal MAXI_addr_read_reg_2094 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_2099 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_1_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_2106 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_2113 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_2118 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_4_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_2123 : STD_LOGIC_VECTOR (0 downto 0);
    signal umax3_fu_649_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal umax3_reg_2128 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_ioackin_MAXI_AWREADY : STD_LOGIC;
    signal ap_block_state15_io : BOOLEAN;
    signal scaledX_V_fu_662_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal scaledX_V_reg_2137 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_668_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_2142 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_2147 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_12_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_2152 : STD_LOGIC_VECTOR (0 downto 0);
    signal umax5_fu_714_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal umax5_reg_2157 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal scaledY_V_fu_727_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal scaledY_V_reg_2165 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_fu_733_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next2_fu_739_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next3_fu_745_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next4_fu_751_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_774_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_reg_2193 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal exitcond3_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next6_fu_780_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next6_reg_2198 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next7_fu_786_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next7_reg_2203 : STD_LOGIC_VECTOR (63 downto 0);
    signal windowY_1_fu_808_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal windowY_1_reg_2211 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal exitcond_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal windowX_1_fu_814_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_803_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_reg_2221 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_103_fu_828_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_103_reg_2226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal adjSize3_reg_2231 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_121_fu_848_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_121_reg_2237 : STD_LOGIC_VECTOR (1 downto 0);
    signal adjSize4_reg_2242 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_139_fu_868_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_139_reg_2248 : STD_LOGIC_VECTOR (1 downto 0);
    signal adjSize5_reg_2253 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_114_fu_1055_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_114_reg_2269 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_117_fu_1065_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_117_reg_2274 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_fu_1150_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_132_reg_2279 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_135_fu_1160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_reg_2284 : STD_LOGIC_VECTOR (31 downto 0);
    signal rollingAverage_0_V_fu_1235_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal rollingAverage_0_V_reg_2294 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal rollingAverage_1_V_fu_1263_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal rollingAverage_1_V_reg_2299 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_150_fu_1348_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_150_reg_2304 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_153_fu_1358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_reg_2309 : STD_LOGIC_VECTOR (31 downto 0);
    signal rollingAverage_2_V_fu_1386_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i_op_assign_fu_1392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_2319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal y_fu_1398_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_reg_2324 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next_fu_1404_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next_reg_2329 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_1414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_2334 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal index_fu_1429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_reg_2339 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_31_fu_1435_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_reg_2345 : STD_LOGIC_VECTOR (1 downto 0);
    signal adjSize_reg_2350 : STD_LOGIC_VECTOR (13 downto 0);
    signal start_pos1_fu_1449_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal start_pos1_reg_2356 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos_fu_1457_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos_reg_2361 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_34_fu_1463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_2366 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_1644_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_60_reg_2374 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal adjSize1_reg_2379 : STD_LOGIC_VECTOR (13 downto 0);
    signal start_pos2_fu_1658_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal start_pos2_reg_2385 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos1_fu_1666_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos1_reg_2390 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_fu_1672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_reg_2395 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_fu_1683_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_80_reg_2403 : STD_LOGIC_VECTOR (1 downto 0);
    signal adjSize2_reg_2409 : STD_LOGIC_VECTOR (13 downto 0);
    signal start_pos3_fu_1867_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal start_pos3_reg_2415 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal end_pos2_fu_1874_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos2_reg_2420 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_81_fu_1880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_reg_2425 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_2056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state35_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_MAXI_WREADY : STD_LOGIC;
    signal ap_block_state37_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_next1_fu_2062_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal newSectionData_load_reg_2447 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state35 : STD_LOGIC;
    signal ap_phi_mux_indvar_phi_fu_314_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal windowX_reg_322 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv3_reg_334 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv1_reg_346 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv4_reg_358 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_s_reg_370 : STD_LOGIC_VECTOR (6 downto 0);
    signal windowY_reg_381 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal indvars_iv7_reg_393 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv5_reg_405 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_reg_417 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0194_1_reg_429 : STD_LOGIC_VECTOR (6 downto 0);
    signal rollingAverage_V_2_2_reg_441 : STD_LOGIC_VECTOR (13 downto 0);
    signal rollingAverage_V_1_2_reg_453 : STD_LOGIC_VECTOR (13 downto 0);
    signal rollingAverage_V_0_2_reg_465 : STD_LOGIC_VECTOR (13 downto 0);
    signal windowX1_reg_477 : STD_LOGIC_VECTOR (63 downto 0);
    signal rollingAverage_V_2_3_reg_488 : STD_LOGIC_VECTOR (13 downto 0);
    signal rollingAverage_V_1_3_reg_500 : STD_LOGIC_VECTOR (13 downto 0);
    signal rollingAverage_V_0_3_reg_512 : STD_LOGIC_VECTOR (13 downto 0);
    signal windowY1_reg_524 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar1_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_cast_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2113_cast_fu_971_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2125_cast_fu_1208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2137_cast_fu_1521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2151_cast_fu_1749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2166_cast_fu_1938_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar3_fu_2068_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_MAXI_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_MAXI_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_MAXI_WREADY : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_58_fu_1622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_fu_1632_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_78_fu_1850_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask1_fu_1860_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_98_fu_2039_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask2_fu_2049_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal umax1_fu_618_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal umax2_fu_631_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_625_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_637_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal umax_fu_683_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal umax4_fu_696_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_690_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_702_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_757_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_100_fu_768_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_fu_792_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_803_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_820_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal current_fu_824_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_862_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_index_gep3_fu_882_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal adjSize104_cast_fu_887_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal addrCmp_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex_fu_902_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal addrCmp7_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex11_fu_908_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal gepindex2_fu_916_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal mem_index_gep4_fu_929_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal adjSize107_cast_fu_934_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal addrCmp8_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex12_fu_949_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal addrCmp9_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex13_fu_955_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal gepindex14_fu_963_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal start_pos_fu_976_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos3_fu_983_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_105_fu_995_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_106_fu_999_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_104_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_1013_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_110_fu_1025_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_107_fu_1003_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_fu_1019_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_111_fu_1031_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_113_fu_1047_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_112_fu_1039_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_fu_1061_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_pos4_fu_1071_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos4_fu_1078_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_123_fu_1090_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_124_fu_1094_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_122_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_126_fu_1108_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_128_fu_1120_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_125_fu_1098_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_fu_1114_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_129_fu_1126_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_131_fu_1142_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_130_fu_1134_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_133_fu_1156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_index_gep5_fu_1166_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal adjSize119_cast_fu_1171_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal addrCmp10_fu_1175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex15_fu_1186_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal addrCmp11_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex16_fu_1192_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal gepindex17_fu_1200_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_116_fu_1213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_118_fu_1216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_fu_1222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_fu_1227_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_1231_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_134_fu_1241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_136_fu_1244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_137_fu_1250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_138_fu_1255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_fu_1259_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal start_pos5_fu_1269_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos5_fu_1276_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_141_fu_1288_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_142_fu_1292_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_140_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_fu_1306_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_146_fu_1318_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_143_fu_1296_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_145_fu_1312_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_147_fu_1324_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_149_fu_1340_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_148_fu_1332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_151_fu_1354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_152_fu_1364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_154_fu_1367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_155_fu_1373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_156_fu_1378_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_1382_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_19_fu_1414_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_1419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_1423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_index_gep_fu_1479_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize131_cast_fu_1484_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp1_fu_1488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex1_fu_1499_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp2_fu_1493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex3_fu_1505_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex4_fu_1513_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_fu_1469_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_1526_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_1529_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_45_fu_1536_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_fu_1542_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_fu_1556_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_fu_1549_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_fu_1563_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_fu_1532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_1569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_1581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_1587_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_1573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_1577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_1604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_1610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_1597_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_demorgan_fu_1616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_1629_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_fu_1639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_1678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_index_gep1_fu_1707_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize145_cast_fu_1712_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp3_fu_1716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex5_fu_1727_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp4_fu_1721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex6_fu_1733_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex7_fu_1741_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_fu_1697_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_fu_1754_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_63_fu_1757_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_fu_1764_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_66_fu_1770_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_68_fu_1784_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_67_fu_1777_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_69_fu_1791_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_64_fu_1760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_fu_1797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_1809_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_fu_1815_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_fu_1801_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_1805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_1832_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_77_fu_1838_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_1825_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_demorgan1_fu_1844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_fu_1857_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_index_gep2_fu_1896_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize160_cast_fu_1901_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp5_fu_1905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex8_fu_1916_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp6_fu_1910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex9_fu_1922_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex10_fu_1930_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_26_fu_1886_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_82_fu_1943_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_83_fu_1946_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_85_fu_1953_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_86_fu_1959_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_88_fu_1973_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_87_fu_1966_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_89_fu_1980_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_84_fu_1949_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_fu_1986_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_fu_1998_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_fu_2004_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_1990_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_fu_1994_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_fu_2021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_fu_2027_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_fu_2014_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_demorgan2_fu_2033_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_fu_2046_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal tmp_19_fu_1414_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component toplevel_mul_64s_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component toplevel_sectionDbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_newSecticud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        ram : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        scaledLength : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_MAXI_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sectionDataCopy_U : component toplevel_sectionDbkb
    generic map (
        DataWidth => 32,
        AddressRange => 108000,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sectionDataCopy_address0,
        ce0 => sectionDataCopy_ce0,
        we0 => sectionDataCopy_we0,
        d0 => MAXI_addr_read_reg_2094,
        q0 => sectionDataCopy_q0,
        address1 => sectionDataCopy_address1,
        ce1 => sectionDataCopy_ce1,
        q1 => sectionDataCopy_q1);

    newSectionData_U : component toplevel_newSecticud
    generic map (
        DataWidth => 32,
        AddressRange => 1688,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => newSectionData_address0,
        ce0 => newSectionData_ce0,
        we0 => newSectionData_we0,
        d0 => newSectionData_d0,
        q0 => newSectionData_q0);

    toplevel_AXILiteS_s_axi_U : component toplevel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        ram => ram,
        length_r => length_r,
        height => height,
        scaledLength => scaledLength);

    toplevel_MAXI_m_axi_U : component toplevel_MAXI_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MAXI_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MAXI_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MAXI_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MAXI_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MAXI_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MAXI_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MAXI_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MAXI_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MAXI_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MAXI_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MAXI_CACHE_VALUE)
    port map (
        AWVALID => m_axi_MAXI_AWVALID,
        AWREADY => m_axi_MAXI_AWREADY,
        AWADDR => m_axi_MAXI_AWADDR,
        AWID => m_axi_MAXI_AWID,
        AWLEN => m_axi_MAXI_AWLEN,
        AWSIZE => m_axi_MAXI_AWSIZE,
        AWBURST => m_axi_MAXI_AWBURST,
        AWLOCK => m_axi_MAXI_AWLOCK,
        AWCACHE => m_axi_MAXI_AWCACHE,
        AWPROT => m_axi_MAXI_AWPROT,
        AWQOS => m_axi_MAXI_AWQOS,
        AWREGION => m_axi_MAXI_AWREGION,
        AWUSER => m_axi_MAXI_AWUSER,
        WVALID => m_axi_MAXI_WVALID,
        WREADY => m_axi_MAXI_WREADY,
        WDATA => m_axi_MAXI_WDATA,
        WSTRB => m_axi_MAXI_WSTRB,
        WLAST => m_axi_MAXI_WLAST,
        WID => m_axi_MAXI_WID,
        WUSER => m_axi_MAXI_WUSER,
        ARVALID => m_axi_MAXI_ARVALID,
        ARREADY => m_axi_MAXI_ARREADY,
        ARADDR => m_axi_MAXI_ARADDR,
        ARID => m_axi_MAXI_ARID,
        ARLEN => m_axi_MAXI_ARLEN,
        ARSIZE => m_axi_MAXI_ARSIZE,
        ARBURST => m_axi_MAXI_ARBURST,
        ARLOCK => m_axi_MAXI_ARLOCK,
        ARCACHE => m_axi_MAXI_ARCACHE,
        ARPROT => m_axi_MAXI_ARPROT,
        ARQOS => m_axi_MAXI_ARQOS,
        ARREGION => m_axi_MAXI_ARREGION,
        ARUSER => m_axi_MAXI_ARUSER,
        RVALID => m_axi_MAXI_RVALID,
        RREADY => m_axi_MAXI_RREADY,
        RDATA => m_axi_MAXI_RDATA,
        RLAST => m_axi_MAXI_RLAST,
        RID => m_axi_MAXI_RID,
        RUSER => m_axi_MAXI_RUSER,
        RRESP => m_axi_MAXI_RRESP,
        BVALID => m_axi_MAXI_BVALID,
        BREADY => m_axi_MAXI_BREADY,
        BRESP => m_axi_MAXI_BRESP,
        BID => m_axi_MAXI_BID,
        BUSER => m_axi_MAXI_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => MAXI_ARVALID,
        I_ARREADY => MAXI_ARREADY,
        I_ARADDR => MAXI_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1A5E0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => MAXI_RVALID,
        I_RREADY => MAXI_RREADY,
        I_RDATA => MAXI_RDATA,
        I_RID => MAXI_RID,
        I_RUSER => MAXI_RUSER,
        I_RRESP => MAXI_RRESP,
        I_RLAST => MAXI_RLAST,
        I_AWVALID => MAXI_AWVALID,
        I_AWREADY => MAXI_AWREADY,
        I_AWADDR => MAXI_addr_reg_2078,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_698,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => MAXI_WVALID,
        I_WREADY => MAXI_WREADY,
        I_WDATA => newSectionData_load_reg_2447,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => MAXI_BVALID,
        I_BREADY => MAXI_BREADY,
        I_BRESP => MAXI_BRESP,
        I_BID => MAXI_BID,
        I_BUSER => MAXI_BUSER);

    toplevel_mul_64s_dEe_U1 : component toplevel_mul_64s_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => windowY1_reg_524,
        din1 => grp_fu_803_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_803_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state35) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state15_io) and (tmp_9_fu_657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state35)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state35);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state15_io) and (tmp_9_fu_657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_MAXI_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = MAXI_ARREADY)) then 
                        ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_MAXI_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_MAXI_AWREADY <= ap_const_logic_0;
            else
                if (((tmp_9_fu_657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    if ((ap_const_boolean_0 = ap_block_state15_io)) then 
                        ap_reg_ioackin_MAXI_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = MAXI_AWREADY)) then 
                        ap_reg_ioackin_MAXI_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_MAXI_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_MAXI_WREADY <= ap_const_logic_0;
            else
                if (((exitcond2_reg_2433_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then 
                        ap_reg_ioackin_MAXI_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_const_logic_1 = MAXI_WREADY))) then 
                        ap_reg_ioackin_MAXI_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    height_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    indvar2_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_io) and (tmp_9_fu_657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                indvar2_reg_535 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_fu_2056_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar2_reg_535 <= indvar_next1_fu_2062_p2;
            end if; 
        end if;
    end process;

    indvar_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_2085 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_reg_310 <= indvar_next_reg_2089;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_reg_310 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvars_iv1_reg_346 <= ap_const_lv64_7;
            elsif (((tmp_16_fu_722_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                indvars_iv1_reg_346 <= indvars_iv_next4_fu_751_p2;
            end if; 
        end if;
    end process;

    indvars_iv3_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvars_iv3_reg_334 <= ap_const_lv64_8;
            elsif (((tmp_16_fu_722_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                indvars_iv3_reg_334 <= indvars_iv_next3_fu_745_p2;
            end if; 
        end if;
    end process;

    indvars_iv4_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvars_iv4_reg_358 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((tmp_16_fu_722_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                indvars_iv4_reg_358 <= indvars_iv_next2_fu_739_p2;
            end if; 
        end if;
    end process;

    indvars_iv5_reg_405_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_io) and (tmp_9_fu_657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                indvars_iv5_reg_405 <= ap_const_lv64_7;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                indvars_iv5_reg_405 <= indvars_iv_next7_reg_2203;
            end if; 
        end if;
    end process;

    indvars_iv7_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_io) and (tmp_9_fu_657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                indvars_iv7_reg_393 <= ap_const_lv64_8;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                indvars_iv7_reg_393 <= indvars_iv_next6_reg_2198;
            end if; 
        end if;
    end process;

    indvars_iv_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_io) and (tmp_9_fu_657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                indvars_iv_reg_417 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                indvars_iv_reg_417 <= indvars_iv_next_reg_2329;
            end if; 
        end if;
    end process;

    length_r_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    p_0194_1_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_io) and (tmp_9_fu_657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                p_0194_1_reg_429 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                p_0194_1_reg_429 <= scaledY_V_reg_2165;
            end if; 
        end if;
    end process;

    p_s_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_s_reg_370 <= ap_const_lv7_0;
            elsif (((tmp_16_fu_722_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_s_reg_370 <= scaledX_V_reg_2137;
            end if; 
        end if;
    end process;

    rollingAverage_V_0_2_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                rollingAverage_V_0_2_reg_465 <= rollingAverage_V_0_3_reg_512;
            elsif (((tmp_16_fu_722_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                rollingAverage_V_0_2_reg_465 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    rollingAverage_V_0_3_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                rollingAverage_V_0_3_reg_512 <= rollingAverage_0_V_reg_2294;
            elsif (((exitcond3_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                rollingAverage_V_0_3_reg_512 <= rollingAverage_V_0_2_reg_465;
            end if; 
        end if;
    end process;

    rollingAverage_V_1_2_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                rollingAverage_V_1_2_reg_453 <= rollingAverage_V_1_3_reg_500;
            elsif (((tmp_16_fu_722_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                rollingAverage_V_1_2_reg_453 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    rollingAverage_V_1_3_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                rollingAverage_V_1_3_reg_500 <= rollingAverage_1_V_reg_2299;
            elsif (((exitcond3_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                rollingAverage_V_1_3_reg_500 <= rollingAverage_V_1_2_reg_453;
            end if; 
        end if;
    end process;

    rollingAverage_V_2_2_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                rollingAverage_V_2_2_reg_441 <= rollingAverage_V_2_3_reg_488;
            elsif (((tmp_16_fu_722_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                rollingAverage_V_2_2_reg_441 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    rollingAverage_V_2_3_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                rollingAverage_V_2_3_reg_488 <= rollingAverage_2_V_fu_1386_p2;
            elsif (((exitcond3_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                rollingAverage_V_2_3_reg_488 <= rollingAverage_V_2_2_reg_441;
            end if; 
        end if;
    end process;

    scaledLength_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    windowX1_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                windowX1_reg_477 <= windowX_1_fu_814_p2;
            elsif (((tmp_16_fu_722_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                windowX1_reg_477 <= windowX_reg_322;
            end if; 
        end if;
    end process;

    windowX_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                windowX_reg_322 <= ap_const_lv64_0;
            elsif (((tmp_16_fu_722_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                windowX_reg_322 <= x_fu_733_p2;
            end if; 
        end if;
    end process;

    windowY1_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                windowY1_reg_524 <= windowY_1_reg_2211;
            elsif (((exitcond3_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                windowY1_reg_524 <= windowY_reg_381;
            end if; 
        end if;
    end process;

    windowY_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_io) and (tmp_9_fu_657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                windowY_reg_381 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                windowY_reg_381 <= y_reg_2324;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_2085 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                MAXI_addr_read_reg_2094 <= MAXI_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    MAXI_addr_reg_2078(29 downto 0) <= tmp_7_fu_556_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                adjSize1_reg_2379 <= tmp_24_fu_1639_p2(15 downto 2);
                adjSize2_reg_2409 <= tmp_27_fu_1678_p2(15 downto 2);
                    end_pos1_reg_2390(4 downto 3) <= end_pos1_fu_1666_p2(4 downto 3);
                    start_pos2_reg_2385(4 downto 3) <= start_pos2_fu_1658_p3(4 downto 3);
                tmp_60_reg_2374 <= tmp_60_fu_1644_p1;
                tmp_61_reg_2395 <= tmp_61_fu_1672_p2;
                tmp_80_reg_2403 <= tmp_80_fu_1683_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                adjSize3_reg_2231 <= tmp_33_fu_820_p2(21 downto 2);
                adjSize4_reg_2242 <= tmp_37_fu_842_p2(21 downto 2);
                adjSize5_reg_2253 <= tmp_41_fu_862_p2(21 downto 2);
                tmp_103_reg_2226 <= tmp_103_fu_828_p1;
                tmp_121_reg_2237 <= tmp_121_fu_848_p1;
                tmp_139_reg_2248 <= tmp_139_fu_868_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                adjSize_reg_2350 <= index_fu_1429_p2(15 downto 2);
                    end_pos_reg_2361(4 downto 3) <= end_pos_fu_1457_p2(4 downto 3);
                index_reg_2339 <= index_fu_1429_p2;
                    start_pos1_reg_2356(4 downto 3) <= start_pos1_fu_1449_p3(4 downto 3);
                tmp_31_reg_2345 <= tmp_31_fu_1435_p1;
                tmp_34_reg_2366 <= tmp_34_fu_1463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                    end_pos2_reg_2420(4 downto 3) <= end_pos2_fu_1874_p2(4 downto 3);
                    start_pos3_reg_2415(4 downto 3) <= start_pos3_fu_1867_p3(4 downto 3);
                tmp_81_reg_2425 <= tmp_81_fu_1880_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_reg_2085 <= exitcond1_fu_566_p2;
                exitcond1_reg_2085_pp0_iter1_reg <= exitcond1_reg_2085;
                indvar_reg_310_pp0_iter1_reg <= indvar_reg_310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond2_reg_2433 <= exitcond2_fu_2056_p2;
                exitcond2_reg_2433_pp1_iter1_reg <= exitcond2_reg_2433;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (height_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (height_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (height_0_vld_reg = ap_const_logic_1)))) then
                height_0_data_reg <= height;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                i_op_assign_reg_2319 <= i_op_assign_fu_1392_p2;
                indvars_iv_next_reg_2329 <= indvars_iv_next_fu_1404_p2;
                y_reg_2324 <= y_fu_1398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_next_reg_2089 <= indvar_next_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_762_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                indvars_iv_next6_reg_2198 <= indvars_iv_next6_fu_780_p2;
                indvars_iv_next7_reg_2203 <= indvars_iv_next7_fu_786_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (length_r_0_vld_reg = ap_const_logic_1)))) then
                length_r_0_data_reg <= length_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_2433 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                newSectionData_load_reg_2447 <= newSectionData_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ram1_reg_2073 <= ram(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                rollingAverage_0_V_reg_2294 <= rollingAverage_0_V_fu_1235_p2;
                rollingAverage_1_V_reg_2299 <= rollingAverage_1_V_fu_1263_p2;
                    tmp_150_reg_2304(5 downto 1) <= tmp_150_fu_1348_p2(5 downto 1);
                tmp_153_reg_2309 <= tmp_153_fu_1358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (scaledLength_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (scaledLength_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (scaledLength_0_vld_reg = ap_const_logic_1)))) then
                scaledLength_0_data_reg <= scaledLength;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_io) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                scaledX_V_reg_2137 <= scaledX_V_fu_662_p2;
                umax3_reg_2128 <= umax3_fu_649_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                scaledY_V_reg_2165 <= scaledY_V_fu_727_p2;
                umax5_reg_2157 <= umax5_fu_714_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_10_reg_2147 <= tmp_10_fu_672_p2;
                tmp_12_reg_2152 <= tmp_12_fu_678_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                    tmp_114_reg_2269(5 downto 1) <= tmp_114_fu_1055_p2(5 downto 1);
                tmp_117_reg_2274 <= tmp_117_fu_1065_p2;
                    tmp_132_reg_2279(5 downto 1) <= tmp_132_fu_1150_p2(5 downto 1);
                tmp_135_reg_2284 <= tmp_135_fu_1160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_19_reg_2334 <= tmp_19_fu_1414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    tmp_1_reg_2106(31 downto 0) <= tmp_1_fu_587_p1(31 downto 0);
                    tmp_25_reg_2113(31 downto 0) <= tmp_25_fu_603_p1(31 downto 0);
                    tmp_reg_2099(31 downto 0) <= tmp_fu_583_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                tmp_29_reg_2193 <= tmp_29_fu_774_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_2_reg_2118 <= tmp_2_fu_607_p2;
                tmp_4_reg_2123 <= tmp_4_fu_613_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_32_reg_2221 <= grp_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_io) and (tmp_9_fu_657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    tmp_s_reg_2142(6 downto 0) <= tmp_s_fu_668_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                windowY_1_reg_2211 <= windowY_1_fu_808_p2;
            end if;
        end if;
    end process;
    MAXI_addr_reg_2078(31 downto 30) <= "00";
    tmp_reg_2099(63 downto 32) <= "00000000000000000000000000000000";
    tmp_1_reg_2106(63 downto 32) <= "00000000000000000000000000000000";
    tmp_25_reg_2113(63 downto 32) <= "00000000000000000000000000000000";
    tmp_s_reg_2142(31 downto 7) <= "0000000000000000000000000";
    tmp_114_reg_2269(0) <= '0';
    tmp_132_reg_2279(0) <= '0';
    tmp_150_reg_2304(0) <= '0';
    start_pos1_reg_2356(2 downto 0) <= "000";
    end_pos_reg_2361(2 downto 0) <= "111";
    start_pos2_reg_2385(2 downto 0) <= "000";
    end_pos1_reg_2390(2 downto 0) <= "111";
    start_pos3_reg_2415(2 downto 0) <= "000";
    end_pos2_reg_2420(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state15, tmp_9_fu_657_p2, ap_enable_reg_pp1_iter2, ap_CS_fsm_state42, MAXI_BVALID, ap_sig_ioackin_MAXI_ARREADY, exitcond1_fu_566_p2, ap_enable_reg_pp0_iter0, ap_block_state15_io, ap_CS_fsm_state17, tmp_16_fu_722_p2, ap_CS_fsm_state18, exitcond3_fu_762_p2, ap_CS_fsm_state19, exitcond_fu_797_p2, exitcond2_fu_2056_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond1_fu_566_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond1_fu_566_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_boolean_0 = ap_block_state15_io) and (tmp_9_fu_657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_state15_io) and (tmp_9_fu_657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((tmp_16_fu_722_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((exitcond3_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state19 => 
                if (((exitcond_fu_797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond2_fu_2056_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond2_fu_2056_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = MAXI_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    MAXI_ARADDR <= tmp_7_fu_556_p1(32 - 1 downto 0);

    MAXI_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_MAXI_ARREADY)
    begin
        if (((ap_reg_ioackin_MAXI_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            MAXI_ARVALID <= ap_const_logic_1;
        else 
            MAXI_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_AWVALID_assign_proc : process(ap_CS_fsm_state15, tmp_9_fu_657_p2, ap_reg_ioackin_MAXI_AWREADY)
    begin
        if (((ap_reg_ioackin_MAXI_AWREADY = ap_const_logic_0) and (tmp_9_fu_657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            MAXI_AWVALID <= ap_const_logic_1;
        else 
            MAXI_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_BREADY_assign_proc : process(ap_CS_fsm_state42, MAXI_BVALID)
    begin
        if (((ap_const_logic_1 = MAXI_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            MAXI_BREADY <= ap_const_logic_1;
        else 
            MAXI_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_2085, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_2085 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MAXI_RREADY <= ap_const_logic_1;
        else 
            MAXI_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_WVALID_assign_proc : process(ap_enable_reg_pp1_iter2, exitcond2_reg_2433_pp1_iter1_reg, ap_reg_ioackin_MAXI_WREADY, ap_block_pp1_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_reg_ioackin_MAXI_WREADY = ap_const_logic_0) and (exitcond2_reg_2433_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            MAXI_WVALID <= ap_const_logic_1;
        else 
            MAXI_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_blk_n_AR_assign_proc : process(m_axi_MAXI_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MAXI_blk_n_AR <= m_axi_MAXI_ARREADY;
        else 
            MAXI_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_AW_assign_proc : process(m_axi_MAXI_AWREADY, ap_CS_fsm_state15, tmp_9_fu_657_p2)
    begin
        if (((tmp_9_fu_657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            MAXI_blk_n_AW <= m_axi_MAXI_AWREADY;
        else 
            MAXI_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_B_assign_proc : process(m_axi_MAXI_BVALID, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            MAXI_blk_n_B <= m_axi_MAXI_BVALID;
        else 
            MAXI_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_R_assign_proc : process(m_axi_MAXI_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_2085)
    begin
        if (((exitcond1_reg_2085 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MAXI_blk_n_R <= m_axi_MAXI_RVALID;
        else 
            MAXI_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_W_assign_proc : process(m_axi_MAXI_WREADY, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, exitcond2_reg_2433_pp1_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond2_reg_2433_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            MAXI_blk_n_W <= m_axi_MAXI_WREADY;
        else 
            MAXI_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    addrCmp10_fu_1175_p2 <= "1" when (unsigned(adjSize5_reg_2253) < unsigned(ap_const_lv20_FE59C)) else "0";
    addrCmp11_fu_1180_p2 <= "1" when (unsigned(mem_index_gep5_fu_1166_p2) < unsigned(ap_const_lv20_1C044)) else "0";
    addrCmp1_fu_1488_p2 <= "1" when (unsigned(adjSize_reg_2350) < unsigned(ap_const_lv14_3FFC)) else "0";
    addrCmp2_fu_1493_p2 <= "1" when (unsigned(mem_index_gep_fu_1479_p2) < unsigned(ap_const_lv14_69C)) else "0";
    addrCmp3_fu_1716_p2 <= "1" when (unsigned(adjSize1_reg_2379) < unsigned(ap_const_lv14_3FFC)) else "0";
    addrCmp4_fu_1721_p2 <= "1" when (unsigned(mem_index_gep1_fu_1707_p2) < unsigned(ap_const_lv14_69C)) else "0";
    addrCmp5_fu_1905_p2 <= "1" when (unsigned(adjSize2_reg_2409) < unsigned(ap_const_lv14_3FFC)) else "0";
    addrCmp6_fu_1910_p2 <= "1" when (unsigned(mem_index_gep2_fu_1896_p2) < unsigned(ap_const_lv14_69C)) else "0";
    addrCmp7_fu_896_p2 <= "1" when (unsigned(mem_index_gep3_fu_882_p2) < unsigned(ap_const_lv20_1C044)) else "0";
    addrCmp8_fu_938_p2 <= "1" when (unsigned(adjSize4_reg_2242) < unsigned(ap_const_lv20_FE59C)) else "0";
    addrCmp9_fu_943_p2 <= "1" when (unsigned(mem_index_gep4_fu_929_p2) < unsigned(ap_const_lv20_1C044)) else "0";
    addrCmp_fu_891_p2 <= "1" when (unsigned(adjSize3_reg_2231) < unsigned(ap_const_lv20_FE59C)) else "0";
    adjSize104_cast_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep3_fu_882_p2),21));
    adjSize107_cast_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep4_fu_929_p2),21));
    adjSize119_cast_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep5_fu_1166_p2),21));
    adjSize131_cast_fu_1484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep_fu_1479_p2),15));
    adjSize145_cast_fu_1712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep1_fu_1707_p2),15));
    adjSize160_cast_fu_1901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep2_fu_1896_p2),15));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state32 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(31);
    ap_CS_fsm_state41 <= ap_CS_fsm(36);
    ap_CS_fsm_state42 <= ap_CS_fsm(37);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond1_reg_2085, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = MAXI_RVALID) and (exitcond1_reg_2085 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond1_reg_2085, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = MAXI_RVALID) and (exitcond1_reg_2085 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state37_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state37_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state37_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state37_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond1_reg_2085, MAXI_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((ap_const_logic_0 = MAXI_RVALID) and (exitcond1_reg_2085 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(tmp_9_fu_657_p2, ap_sig_ioackin_MAXI_AWREADY)
    begin
                ap_block_state15_io <= ((ap_sig_ioackin_MAXI_AWREADY = ap_const_logic_0) and (tmp_9_fu_657_p2 = ap_const_lv1_0));
    end process;

        ap_block_state35_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state37_io_assign_proc : process(exitcond2_reg_2433_pp1_iter1_reg, ap_sig_ioackin_MAXI_WREADY)
    begin
                ap_block_state37_io <= ((ap_sig_ioackin_MAXI_WREADY = ap_const_logic_0) and (exitcond2_reg_2433_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state37_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond1_fu_566_p2)
    begin
        if ((exitcond1_fu_566_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state35_assign_proc : process(exitcond2_fu_2056_p2)
    begin
        if ((exitcond2_fu_2056_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state35 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state42, MAXI_BVALID)
    begin
        if (((ap_const_logic_1 = MAXI_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_314_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_2085, indvar_reg_310, indvar_next_reg_2089)
    begin
        if (((exitcond1_reg_2085 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_phi_fu_314_p4 <= indvar_next_reg_2089;
        else 
            ap_phi_mux_indvar_phi_fu_314_p4 <= indvar_reg_310;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state42, MAXI_BVALID)
    begin
        if (((ap_const_logic_1 = MAXI_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_1;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_MAXI_ARREADY_assign_proc : process(MAXI_ARREADY, ap_reg_ioackin_MAXI_ARREADY)
    begin
        if ((ap_reg_ioackin_MAXI_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_MAXI_ARREADY <= MAXI_ARREADY;
        else 
            ap_sig_ioackin_MAXI_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_MAXI_AWREADY_assign_proc : process(MAXI_AWREADY, ap_reg_ioackin_MAXI_AWREADY)
    begin
        if ((ap_reg_ioackin_MAXI_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_MAXI_AWREADY <= MAXI_AWREADY;
        else 
            ap_sig_ioackin_MAXI_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_MAXI_WREADY_assign_proc : process(MAXI_WREADY, ap_reg_ioackin_MAXI_WREADY)
    begin
        if ((ap_reg_ioackin_MAXI_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_MAXI_WREADY <= MAXI_WREADY;
        else 
            ap_sig_ioackin_MAXI_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    current_fu_824_p1 <= tmp_33_fu_820_p2(32 - 1 downto 0);
    end_pos1_fu_1666_p2 <= (start_pos2_fu_1658_p3 or ap_const_lv5_7);
    end_pos2_fu_1874_p2 <= (start_pos3_fu_1867_p3 or ap_const_lv5_7);
    end_pos3_fu_983_p2 <= (start_pos_fu_976_p3 or ap_const_lv5_7);
    end_pos4_fu_1078_p2 <= (start_pos4_fu_1071_p3 or ap_const_lv5_7);
    end_pos5_fu_1276_p2 <= (start_pos5_fu_1269_p3 or ap_const_lv5_7);
    end_pos_fu_1457_p2 <= (start_pos1_fu_1449_p3 or ap_const_lv5_7);
    exitcond1_fu_566_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_314_p4 = ap_const_lv17_1A5E0) else "0";
    exitcond2_fu_2056_p2 <= "1" when (indvar2_reg_535 = ap_const_lv11_698) else "0";
    exitcond3_fu_762_p2 <= "1" when (windowX1_reg_477 = tmp_28_fu_757_p2) else "0";
    exitcond_fu_797_p2 <= "1" when (windowY1_reg_524 = tmp_101_fu_792_p2) else "0";
    gepindex10_fu_1930_p3 <= 
        gepindex9_fu_1922_p3 when (addrCmp6_fu_1910_p2(0) = '1') else 
        ap_const_lv15_697;
    gepindex11_fu_908_p3 <= 
        gepindex_fu_902_p2 when (addrCmp_fu_891_p2(0) = '1') else 
        ap_const_lv21_1A5DF;
    gepindex12_fu_949_p2 <= std_logic_vector(signed(ap_const_lv21_1FE59C) + signed(adjSize107_cast_fu_934_p1));
    gepindex13_fu_955_p3 <= 
        gepindex12_fu_949_p2 when (addrCmp8_fu_938_p2(0) = '1') else 
        ap_const_lv21_1A5DF;
    gepindex14_fu_963_p3 <= 
        gepindex13_fu_955_p3 when (addrCmp9_fu_943_p2(0) = '1') else 
        ap_const_lv21_1A5DF;
    gepindex15_fu_1186_p2 <= std_logic_vector(signed(ap_const_lv21_1FE59C) + signed(adjSize119_cast_fu_1171_p1));
    gepindex16_fu_1192_p3 <= 
        gepindex15_fu_1186_p2 when (addrCmp10_fu_1175_p2(0) = '1') else 
        ap_const_lv21_1A5DF;
    gepindex17_fu_1200_p3 <= 
        gepindex16_fu_1192_p3 when (addrCmp11_fu_1180_p2(0) = '1') else 
        ap_const_lv21_1A5DF;
    gepindex1_fu_1499_p2 <= std_logic_vector(signed(ap_const_lv15_7FFC) + signed(adjSize131_cast_fu_1484_p1));
        gepindex2113_cast_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex14_fu_963_p3),64));

        gepindex2125_cast_fu_1208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex17_fu_1200_p3),64));

        gepindex2137_cast_fu_1521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex4_fu_1513_p3),64));

        gepindex2151_cast_fu_1749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex7_fu_1741_p3),64));

        gepindex2166_cast_fu_1938_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex10_fu_1930_p3),64));

        gepindex2_cast_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex2_fu_916_p3),64));

    gepindex2_fu_916_p3 <= 
        gepindex11_fu_908_p3 when (addrCmp7_fu_896_p2(0) = '1') else 
        ap_const_lv21_1A5DF;
    gepindex3_fu_1505_p3 <= 
        gepindex1_fu_1499_p2 when (addrCmp1_fu_1488_p2(0) = '1') else 
        ap_const_lv15_697;
    gepindex4_fu_1513_p3 <= 
        gepindex3_fu_1505_p3 when (addrCmp2_fu_1493_p2(0) = '1') else 
        ap_const_lv15_697;
    gepindex5_fu_1727_p2 <= std_logic_vector(signed(ap_const_lv15_7FFC) + signed(adjSize145_cast_fu_1712_p1));
    gepindex6_fu_1733_p3 <= 
        gepindex5_fu_1727_p2 when (addrCmp3_fu_1716_p2(0) = '1') else 
        ap_const_lv15_697;
    gepindex7_fu_1741_p3 <= 
        gepindex6_fu_1733_p3 when (addrCmp4_fu_1721_p2(0) = '1') else 
        ap_const_lv15_697;
    gepindex8_fu_1916_p2 <= std_logic_vector(signed(ap_const_lv15_7FFC) + signed(adjSize160_cast_fu_1901_p1));
    gepindex9_fu_1922_p3 <= 
        gepindex8_fu_1916_p2 when (addrCmp5_fu_1905_p2(0) = '1') else 
        ap_const_lv15_697;
    gepindex_fu_902_p2 <= std_logic_vector(signed(ap_const_lv21_1FE59C) + signed(adjSize104_cast_fu_887_p1));
    grp_fu_803_p1 <= tmp_25_reg_2113(32 - 1 downto 0);

    height_0_ack_out_assign_proc : process(ap_CS_fsm_state42, MAXI_BVALID)
    begin
        if (((ap_const_logic_1 = MAXI_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            height_0_ack_out <= ap_const_logic_1;
        else 
            height_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    i_op_assign_fu_1392_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(scaledLength_0_data_reg));
    index_fu_1429_p2 <= std_logic_vector(unsigned(tmp_30_fu_1423_p2) - unsigned(tmp_20_fu_1419_p2));
    indvar1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_310_pp0_iter1_reg),64));
    indvar3_fu_2068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar2_reg_535),64));
    indvar_next1_fu_2062_p2 <= std_logic_vector(unsigned(indvar2_reg_535) + unsigned(ap_const_lv11_1));
    indvar_next_fu_572_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_314_p4) + unsigned(ap_const_lv17_1));
    indvars_iv_next2_fu_739_p2 <= std_logic_vector(unsigned(indvars_iv4_reg_358) + unsigned(ap_const_lv64_8));
    indvars_iv_next3_fu_745_p2 <= std_logic_vector(unsigned(indvars_iv3_reg_334) + unsigned(ap_const_lv64_8));
    indvars_iv_next4_fu_751_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_346) + unsigned(ap_const_lv64_8));
    indvars_iv_next6_fu_780_p2 <= std_logic_vector(unsigned(ap_const_lv64_8) + unsigned(indvars_iv7_reg_393));
    indvars_iv_next7_fu_786_p2 <= std_logic_vector(unsigned(ap_const_lv64_8) + unsigned(indvars_iv5_reg_405));
    indvars_iv_next_fu_1404_p2 <= std_logic_vector(unsigned(ap_const_lv64_8) + unsigned(indvars_iv_reg_417));

    length_r_0_ack_out_assign_proc : process(ap_CS_fsm_state42, MAXI_BVALID)
    begin
        if (((ap_const_logic_1 = MAXI_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            length_r_0_ack_out <= ap_const_logic_1;
        else 
            length_r_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    mask1_fu_1860_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & tmp_79_fu_1857_p1(4-1 downto 0)))));
    mask2_fu_2049_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & tmp_99_fu_2046_p1(4-1 downto 0)))));
    mask_fu_1632_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & tmp_59_fu_1629_p1(4-1 downto 0)))));
    mem_index_gep1_fu_1707_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(adjSize1_reg_2379));
    mem_index_gep2_fu_1896_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(adjSize2_reg_2409));
    mem_index_gep3_fu_882_p2 <= std_logic_vector(unsigned(ap_const_lv20_1A64) + unsigned(adjSize3_reg_2231));
    mem_index_gep4_fu_929_p2 <= std_logic_vector(unsigned(ap_const_lv20_1A64) + unsigned(adjSize4_reg_2242));
    mem_index_gep5_fu_1166_p2 <= std_logic_vector(unsigned(ap_const_lv20_1A64) + unsigned(adjSize5_reg_2253));
    mem_index_gep_fu_1479_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(adjSize_reg_2350));

    newSectionData_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state34, gepindex2137_cast_fu_1521_p1, gepindex2151_cast_fu_1749_p1, gepindex2166_cast_fu_1938_p1, indvar3_fu_2068_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            newSectionData_address0 <= indvar3_fu_2068_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            newSectionData_address0 <= gepindex2166_cast_fu_1938_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            newSectionData_address0 <= gepindex2151_cast_fu_1749_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            newSectionData_address0 <= gepindex2137_cast_fu_1521_p1(11 - 1 downto 0);
        else 
            newSectionData_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    newSectionData_ce0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            newSectionData_ce0 <= ap_const_logic_1;
        else 
            newSectionData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    newSectionData_d0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_58_fu_1622_p2, tmp_78_fu_1850_p2, tmp_98_fu_2039_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            newSectionData_d0 <= tmp_98_fu_2039_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            newSectionData_d0 <= tmp_78_fu_1850_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            newSectionData_d0 <= tmp_58_fu_1622_p2;
        else 
            newSectionData_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    newSectionData_we0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, mask_fu_1632_p2, mask1_fu_1860_p2, mask2_fu_2049_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            newSectionData_we0 <= mask2_fu_2049_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            newSectionData_we0 <= mask1_fu_1860_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            newSectionData_we0 <= mask_fu_1632_p2;
        else 
            newSectionData_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    p_demorgan1_fu_1844_p2 <= (tmp_77_fu_1838_p2 and tmp_76_fu_1832_p2);
    p_demorgan2_fu_2033_p2 <= (tmp_97_fu_2027_p2 and tmp_96_fu_2021_p2);
    p_demorgan_fu_1616_p2 <= (tmp_57_fu_1610_p2 and tmp_56_fu_1604_p2);
    rollingAverage_0_V_fu_1235_p2 <= std_logic_vector(unsigned(tmp_35_fu_1231_p1) + unsigned(rollingAverage_V_0_3_reg_512));
    rollingAverage_1_V_fu_1263_p2 <= std_logic_vector(unsigned(tmp_39_fu_1259_p1) + unsigned(rollingAverage_V_1_3_reg_500));
    rollingAverage_2_V_fu_1386_p2 <= std_logic_vector(unsigned(tmp_43_fu_1382_p1) + unsigned(rollingAverage_V_2_3_reg_488));

    scaledLength_0_ack_out_assign_proc : process(ap_CS_fsm_state42, MAXI_BVALID)
    begin
        if (((ap_const_logic_1 = MAXI_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            scaledLength_0_ack_out <= ap_const_logic_1;
        else 
            scaledLength_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    scaledX_V_fu_662_p2 <= std_logic_vector(unsigned(p_s_reg_370) + unsigned(ap_const_lv7_1));
    scaledY_V_fu_727_p2 <= std_logic_vector(unsigned(p_0194_1_reg_429) + unsigned(ap_const_lv7_1));

    sectionDataCopy_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state25, ap_enable_reg_pp0_iter2, indvar1_fu_578_p1, gepindex2_cast_fu_924_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sectionDataCopy_address0 <= gepindex2_cast_fu_924_p1(17 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sectionDataCopy_address0 <= indvar1_fu_578_p1(17 - 1 downto 0);
        else 
            sectionDataCopy_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sectionDataCopy_address1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, gepindex2113_cast_fu_971_p1, gepindex2125_cast_fu_1208_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sectionDataCopy_address1 <= gepindex2125_cast_fu_1208_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sectionDataCopy_address1 <= gepindex2113_cast_fu_971_p1(17 - 1 downto 0);
        else 
            sectionDataCopy_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sectionDataCopy_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state25, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            sectionDataCopy_ce0 <= ap_const_logic_1;
        else 
            sectionDataCopy_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sectionDataCopy_ce1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            sectionDataCopy_ce1 <= ap_const_logic_1;
        else 
            sectionDataCopy_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sectionDataCopy_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond1_reg_2085_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_2085_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sectionDataCopy_we0 <= ap_const_logic_1;
        else 
            sectionDataCopy_we0 <= ap_const_logic_0;
        end if; 
    end process;

    start_pos1_fu_1449_p3 <= (tmp_31_fu_1435_p1 & ap_const_lv3_0);
    start_pos2_fu_1658_p3 <= (tmp_60_fu_1644_p1 & ap_const_lv3_0);
    start_pos3_fu_1867_p3 <= (tmp_80_reg_2403 & ap_const_lv3_0);
    start_pos4_fu_1071_p3 <= (tmp_121_reg_2237 & ap_const_lv3_0);
    start_pos5_fu_1269_p3 <= (tmp_139_reg_2248 & ap_const_lv3_0);
    start_pos_fu_976_p3 <= (tmp_103_reg_2226 & ap_const_lv3_0);
    tmp_100_fu_768_p2 <= std_logic_vector(shift_left(unsigned(windowX1_reg_477),to_integer(unsigned('0' & ap_const_lv64_2(31-1 downto 0)))));
    tmp_101_fu_792_p2 <= std_logic_vector(unsigned(indvars_iv_reg_417) - unsigned(umax5_reg_2157));
    tmp_103_fu_828_p1 <= tmp_33_fu_820_p2(2 - 1 downto 0);
    tmp_104_fu_989_p2 <= "1" when (unsigned(start_pos_fu_976_p3) > unsigned(end_pos3_fu_983_p2)) else "0";
    tmp_105_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_fu_976_p3),6));
    tmp_106_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos3_fu_983_p2),6));
    
    tmp_107_fu_1003_p4_proc : process(sectionDataCopy_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_107_fu_1003_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sectionDataCopy_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_107_fu_1003_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_107_fu_1003_p4_i) := sectionDataCopy_q0(32-1-tmp_107_fu_1003_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_107_fu_1003_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_108_fu_1013_p2 <= std_logic_vector(unsigned(tmp_105_fu_995_p1) - unsigned(tmp_106_fu_999_p1));
    tmp_109_fu_1019_p2 <= (tmp_105_fu_995_p1 xor ap_const_lv6_1F);
    tmp_10_fu_672_p2 <= "1" when (unsigned(indvars_iv7_reg_393) > unsigned(windowY_reg_381)) else "0";
    tmp_110_fu_1025_p2 <= std_logic_vector(unsigned(tmp_106_fu_999_p1) - unsigned(tmp_105_fu_995_p1));
    tmp_111_fu_1031_p3 <= 
        tmp_108_fu_1013_p2 when (tmp_104_fu_989_p2(0) = '1') else 
        tmp_110_fu_1025_p2;
    tmp_112_fu_1039_p3 <= 
        tmp_107_fu_1003_p4 when (tmp_104_fu_989_p2(0) = '1') else 
        sectionDataCopy_q0;
    tmp_113_fu_1047_p3 <= 
        tmp_109_fu_1019_p2 when (tmp_104_fu_989_p2(0) = '1') else 
        tmp_105_fu_995_p1;
    tmp_114_fu_1055_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_111_fu_1031_p3));
    tmp_115_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_113_fu_1047_p3),32));
    tmp_116_fu_1213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_114_reg_2269),32));
    tmp_117_fu_1065_p2 <= std_logic_vector(shift_right(unsigned(tmp_112_fu_1039_p3),to_integer(unsigned('0' & tmp_115_fu_1061_p1(31-1 downto 0)))));
    tmp_118_fu_1216_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_116_fu_1213_p1(31-1 downto 0)))));
    tmp_119_fu_1222_p2 <= (tmp_118_fu_1216_p2 and tmp_117_reg_2274);
    tmp_11_fu_690_p2 <= std_logic_vector(unsigned(indvars_iv_reg_417) - unsigned(umax_fu_683_p3));
    tmp_120_fu_1227_p1 <= tmp_119_fu_1222_p2(8 - 1 downto 0);
    tmp_121_fu_848_p1 <= tmp_37_fu_842_p2(2 - 1 downto 0);
    tmp_122_fu_1084_p2 <= "1" when (unsigned(start_pos4_fu_1071_p3) > unsigned(end_pos4_fu_1078_p2)) else "0";
    tmp_123_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos4_fu_1071_p3),6));
    tmp_124_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos4_fu_1078_p2),6));
    
    tmp_125_fu_1098_p4_proc : process(sectionDataCopy_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_125_fu_1098_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sectionDataCopy_q1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_125_fu_1098_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_125_fu_1098_p4_i) := sectionDataCopy_q1(32-1-tmp_125_fu_1098_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_125_fu_1098_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_126_fu_1108_p2 <= std_logic_vector(unsigned(tmp_123_fu_1090_p1) - unsigned(tmp_124_fu_1094_p1));
    tmp_127_fu_1114_p2 <= (tmp_123_fu_1090_p1 xor ap_const_lv6_1F);
    tmp_128_fu_1120_p2 <= std_logic_vector(unsigned(tmp_124_fu_1094_p1) - unsigned(tmp_123_fu_1090_p1));
    tmp_129_fu_1126_p3 <= 
        tmp_126_fu_1108_p2 when (tmp_122_fu_1084_p2(0) = '1') else 
        tmp_128_fu_1120_p2;
    tmp_12_fu_678_p2 <= "1" when (unsigned(indvars_iv7_reg_393) > unsigned(tmp_reg_2099)) else "0";
    tmp_130_fu_1134_p3 <= 
        tmp_125_fu_1098_p4 when (tmp_122_fu_1084_p2(0) = '1') else 
        sectionDataCopy_q1;
    tmp_131_fu_1142_p3 <= 
        tmp_127_fu_1114_p2 when (tmp_122_fu_1084_p2(0) = '1') else 
        tmp_123_fu_1090_p1;
    tmp_132_fu_1150_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_129_fu_1126_p3));
    tmp_133_fu_1156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_131_fu_1142_p3),32));
    tmp_134_fu_1241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_132_reg_2279),32));
    tmp_135_fu_1160_p2 <= std_logic_vector(shift_right(unsigned(tmp_130_fu_1134_p3),to_integer(unsigned('0' & tmp_133_fu_1156_p1(31-1 downto 0)))));
    tmp_136_fu_1244_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_134_fu_1241_p1(31-1 downto 0)))));
    tmp_137_fu_1250_p2 <= (tmp_136_fu_1244_p2 and tmp_135_reg_2284);
    tmp_138_fu_1255_p1 <= tmp_137_fu_1250_p2(8 - 1 downto 0);
    tmp_139_fu_868_p1 <= tmp_41_fu_862_p2(2 - 1 downto 0);
    tmp_13_fu_702_p2 <= std_logic_vector(unsigned(indvars_iv5_reg_405) - unsigned(umax4_fu_696_p3));
    tmp_140_fu_1282_p2 <= "1" when (unsigned(start_pos5_fu_1269_p3) > unsigned(end_pos5_fu_1276_p2)) else "0";
    tmp_141_fu_1288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos5_fu_1269_p3),6));
    tmp_142_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos5_fu_1276_p2),6));
    
    tmp_143_fu_1296_p4_proc : process(sectionDataCopy_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_143_fu_1296_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sectionDataCopy_q1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_143_fu_1296_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_143_fu_1296_p4_i) := sectionDataCopy_q1(32-1-tmp_143_fu_1296_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_143_fu_1296_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_144_fu_1306_p2 <= std_logic_vector(unsigned(tmp_141_fu_1288_p1) - unsigned(tmp_142_fu_1292_p1));
    tmp_145_fu_1312_p2 <= (tmp_141_fu_1288_p1 xor ap_const_lv6_1F);
    tmp_146_fu_1318_p2 <= std_logic_vector(unsigned(tmp_142_fu_1292_p1) - unsigned(tmp_141_fu_1288_p1));
    tmp_147_fu_1324_p3 <= 
        tmp_144_fu_1306_p2 when (tmp_140_fu_1282_p2(0) = '1') else 
        tmp_146_fu_1318_p2;
    tmp_148_fu_1332_p3 <= 
        tmp_143_fu_1296_p4 when (tmp_140_fu_1282_p2(0) = '1') else 
        sectionDataCopy_q1;
    tmp_149_fu_1340_p3 <= 
        tmp_145_fu_1312_p2 when (tmp_140_fu_1282_p2(0) = '1') else 
        tmp_141_fu_1288_p1;
    tmp_14_fu_708_p2 <= "1" when (unsigned(tmp_11_fu_690_p2) > unsigned(tmp_13_fu_702_p2)) else "0";
    tmp_150_fu_1348_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_147_fu_1324_p3));
    tmp_151_fu_1354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_149_fu_1340_p3),32));
    tmp_152_fu_1364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_150_reg_2304),32));
    tmp_153_fu_1358_p2 <= std_logic_vector(shift_right(unsigned(tmp_148_fu_1332_p3),to_integer(unsigned('0' & tmp_151_fu_1354_p1(31-1 downto 0)))));
    tmp_154_fu_1367_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_152_fu_1364_p1(31-1 downto 0)))));
    tmp_155_fu_1373_p2 <= (tmp_154_fu_1367_p2 and tmp_153_reg_2309);
    tmp_156_fu_1378_p1 <= tmp_155_fu_1373_p2(8 - 1 downto 0);
    tmp_15_fu_591_p2 <= std_logic_vector(shift_left(unsigned(length_r_0_data_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_16_fu_722_p2 <= "1" when (unsigned(windowY_reg_381) < unsigned(tmp_reg_2099)) else "0";
    tmp_19_fu_1414_p1 <= tmp_19_fu_1414_p10(7 - 1 downto 0);
    tmp_19_fu_1414_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0194_1_reg_429),32));
    tmp_19_fu_1414_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(i_op_assign_reg_2319) * signed('0' &tmp_19_fu_1414_p1))), 32));
    tmp_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_r_0_data_reg),64));
    tmp_20_fu_1419_p2 <= std_logic_vector(unsigned(tmp_19_reg_2334) + unsigned(tmp_s_reg_2142));
    tmp_21_fu_1469_p4 <= rollingAverage_V_0_2_reg_465(13 downto 6);
    tmp_22_fu_597_p2 <= std_logic_vector(unsigned(tmp_15_fu_591_p2) - unsigned(length_r_0_data_reg));
    tmp_23_fu_1697_p4 <= rollingAverage_V_1_2_reg_453(13 downto 6);
    tmp_24_fu_1639_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(index_reg_2339));
    tmp_25_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_597_p2),64));
    tmp_26_fu_1886_p4 <= rollingAverage_V_2_2_reg_441(13 downto 6);
    tmp_27_fu_1678_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(index_reg_2339));
    tmp_28_fu_757_p2 <= std_logic_vector(unsigned(indvars_iv4_reg_358) - unsigned(umax3_reg_2128));
    tmp_29_fu_774_p2 <= std_logic_vector(unsigned(tmp_100_fu_768_p2) - unsigned(windowX1_reg_477));
    tmp_2_fu_607_p2 <= "1" when (unsigned(indvars_iv3_reg_334) > unsigned(windowX_reg_322)) else "0";
    tmp_30_fu_1423_p2 <= std_logic_vector(shift_left(unsigned(tmp_20_fu_1419_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_31_fu_1435_p1 <= index_fu_1429_p2(2 - 1 downto 0);
    tmp_33_fu_820_p2 <= std_logic_vector(unsigned(tmp_29_reg_2193) + unsigned(tmp_32_reg_2221));
    tmp_34_fu_1463_p2 <= "1" when (unsigned(start_pos1_fu_1449_p3) > unsigned(end_pos_fu_1457_p2)) else "0";
    tmp_35_fu_1231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_120_fu_1227_p1),14));
    tmp_37_fu_842_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(current_fu_824_p1));
    tmp_38_fu_1526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos1_reg_2356),6));
    tmp_39_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_138_fu_1255_p1),14));
    tmp_3_fu_625_p2 <= std_logic_vector(unsigned(indvars_iv4_reg_358) - unsigned(umax1_fu_618_p3));
    tmp_41_fu_862_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(current_fu_824_p1));
    tmp_42_fu_1529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos_reg_2361),6));
    tmp_43_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_fu_1378_p1),14));
    tmp_44_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1469_p4),32));
    tmp_45_fu_1536_p2 <= (tmp_38_fu_1526_p1 xor ap_const_lv6_1F);
    tmp_46_fu_1542_p3 <= 
        tmp_38_fu_1526_p1 when (tmp_34_reg_2366(0) = '1') else 
        tmp_42_fu_1529_p1;
    tmp_47_fu_1549_p3 <= 
        tmp_42_fu_1529_p1 when (tmp_34_reg_2366(0) = '1') else 
        tmp_38_fu_1526_p1;
    tmp_48_fu_1556_p3 <= 
        tmp_45_fu_1536_p2 when (tmp_34_reg_2366(0) = '1') else 
        tmp_38_fu_1526_p1;
    tmp_49_fu_1563_p2 <= (tmp_46_fu_1542_p3 xor ap_const_lv6_1F);
    tmp_4_fu_613_p2 <= "1" when (unsigned(indvars_iv3_reg_334) > unsigned(tmp_1_reg_2106)) else "0";
    tmp_50_fu_1569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_1556_p3),32));
    tmp_51_fu_1573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_1549_p3),32));
    tmp_52_fu_1577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_1563_p2),32));
    tmp_53_fu_1581_p2 <= std_logic_vector(shift_left(unsigned(tmp_44_fu_1532_p1),to_integer(unsigned('0' & tmp_50_fu_1569_p1(31-1 downto 0)))));
    
    tmp_54_fu_1587_p4_proc : process(tmp_53_fu_1581_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_54_fu_1587_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_53_fu_1581_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_54_fu_1587_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_54_fu_1587_p4_i) := tmp_53_fu_1581_p2(32-1-tmp_54_fu_1587_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_54_fu_1587_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_55_fu_1597_p3 <= 
        tmp_54_fu_1587_p4 when (tmp_34_reg_2366(0) = '1') else 
        tmp_53_fu_1581_p2;
    tmp_56_fu_1604_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_51_fu_1573_p1(31-1 downto 0)))));
    tmp_57_fu_1610_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_52_fu_1577_p1(31-1 downto 0)))));
    tmp_58_fu_1622_p2 <= (tmp_55_fu_1597_p3 and p_demorgan_fu_1616_p2);
    tmp_59_fu_1629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_reg_2345),4));
    tmp_5_fu_637_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_346) - unsigned(umax2_fu_631_p3));
    tmp_60_fu_1644_p1 <= tmp_24_fu_1639_p2(2 - 1 downto 0);
    tmp_61_fu_1672_p2 <= "1" when (unsigned(start_pos2_fu_1658_p3) > unsigned(end_pos1_fu_1666_p2)) else "0";
    tmp_62_fu_1754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos2_reg_2385),6));
    tmp_63_fu_1757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos1_reg_2390),6));
    tmp_64_fu_1760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_1697_p4),32));
    tmp_65_fu_1764_p2 <= (tmp_62_fu_1754_p1 xor ap_const_lv6_1F);
    tmp_66_fu_1770_p3 <= 
        tmp_62_fu_1754_p1 when (tmp_61_reg_2395(0) = '1') else 
        tmp_63_fu_1757_p1;
    tmp_67_fu_1777_p3 <= 
        tmp_63_fu_1757_p1 when (tmp_61_reg_2395(0) = '1') else 
        tmp_62_fu_1754_p1;
    tmp_68_fu_1784_p3 <= 
        tmp_65_fu_1764_p2 when (tmp_61_reg_2395(0) = '1') else 
        tmp_62_fu_1754_p1;
    tmp_69_fu_1791_p2 <= (tmp_66_fu_1770_p3 xor ap_const_lv6_1F);
    tmp_6_fu_643_p2 <= "1" when (unsigned(tmp_3_fu_625_p2) > unsigned(tmp_5_fu_637_p2)) else "0";
    tmp_70_fu_1797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_1784_p3),32));
    tmp_71_fu_1801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_1777_p3),32));
    tmp_72_fu_1805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_1791_p2),32));
    tmp_73_fu_1809_p2 <= std_logic_vector(shift_left(unsigned(tmp_64_fu_1760_p1),to_integer(unsigned('0' & tmp_70_fu_1797_p1(31-1 downto 0)))));
    
    tmp_74_fu_1815_p4_proc : process(tmp_73_fu_1809_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_74_fu_1815_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_73_fu_1809_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_74_fu_1815_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_74_fu_1815_p4_i) := tmp_73_fu_1809_p2(32-1-tmp_74_fu_1815_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_74_fu_1815_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_75_fu_1825_p3 <= 
        tmp_74_fu_1815_p4 when (tmp_61_reg_2395(0) = '1') else 
        tmp_73_fu_1809_p2;
    tmp_76_fu_1832_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_71_fu_1801_p1(31-1 downto 0)))));
    tmp_77_fu_1838_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_72_fu_1805_p1(31-1 downto 0)))));
    tmp_78_fu_1850_p2 <= (tmp_75_fu_1825_p3 and p_demorgan1_fu_1844_p2);
    tmp_79_fu_1857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_reg_2374),4));
    tmp_7_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram1_reg_2073),64));
    tmp_80_fu_1683_p1 <= tmp_27_fu_1678_p2(2 - 1 downto 0);
    tmp_81_fu_1880_p2 <= "1" when (unsigned(start_pos3_fu_1867_p3) > unsigned(end_pos2_fu_1874_p2)) else "0";
    tmp_82_fu_1943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos3_reg_2415),6));
    tmp_83_fu_1946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos2_reg_2420),6));
    tmp_84_fu_1949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1886_p4),32));
    tmp_85_fu_1953_p2 <= (tmp_82_fu_1943_p1 xor ap_const_lv6_1F);
    tmp_86_fu_1959_p3 <= 
        tmp_82_fu_1943_p1 when (tmp_81_reg_2425(0) = '1') else 
        tmp_83_fu_1946_p1;
    tmp_87_fu_1966_p3 <= 
        tmp_83_fu_1946_p1 when (tmp_81_reg_2425(0) = '1') else 
        tmp_82_fu_1943_p1;
    tmp_88_fu_1973_p3 <= 
        tmp_85_fu_1953_p2 when (tmp_81_reg_2425(0) = '1') else 
        tmp_82_fu_1943_p1;
    tmp_89_fu_1980_p2 <= (tmp_86_fu_1959_p3 xor ap_const_lv6_1F);
    tmp_90_fu_1986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_fu_1973_p3),32));
    tmp_91_fu_1990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_1966_p3),32));
    tmp_92_fu_1994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_1980_p2),32));
    tmp_93_fu_1998_p2 <= std_logic_vector(shift_left(unsigned(tmp_84_fu_1949_p1),to_integer(unsigned('0' & tmp_90_fu_1986_p1(31-1 downto 0)))));
    
    tmp_94_fu_2004_p4_proc : process(tmp_93_fu_1998_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_94_fu_2004_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_93_fu_1998_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_94_fu_2004_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_94_fu_2004_p4_i) := tmp_93_fu_1998_p2(32-1-tmp_94_fu_2004_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_94_fu_2004_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_95_fu_2014_p3 <= 
        tmp_94_fu_2004_p4 when (tmp_81_reg_2425(0) = '1') else 
        tmp_93_fu_1998_p2;
    tmp_96_fu_2021_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_91_fu_1990_p1(31-1 downto 0)))));
    tmp_97_fu_2027_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_92_fu_1994_p1(31-1 downto 0)))));
    tmp_98_fu_2039_p2 <= (tmp_95_fu_2014_p3 and p_demorgan2_fu_2033_p2);
    tmp_99_fu_2046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_reg_2403),4));
    tmp_9_fu_657_p2 <= "1" when (unsigned(windowX_reg_322) < unsigned(tmp_1_reg_2106)) else "0";
    tmp_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_0_data_reg),64));
    tmp_s_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_reg_370),32));
    umax1_fu_618_p3 <= 
        indvars_iv3_reg_334 when (tmp_2_reg_2118(0) = '1') else 
        windowX_reg_322;
    umax2_fu_631_p3 <= 
        indvars_iv3_reg_334 when (tmp_4_reg_2123(0) = '1') else 
        tmp_1_reg_2106;
    umax3_fu_649_p3 <= 
        tmp_3_fu_625_p2 when (tmp_6_fu_643_p2(0) = '1') else 
        tmp_5_fu_637_p2;
    umax4_fu_696_p3 <= 
        indvars_iv7_reg_393 when (tmp_12_reg_2152(0) = '1') else 
        tmp_reg_2099;
    umax5_fu_714_p3 <= 
        tmp_11_fu_690_p2 when (tmp_14_fu_708_p2(0) = '1') else 
        tmp_13_fu_702_p2;
    umax_fu_683_p3 <= 
        indvars_iv7_reg_393 when (tmp_10_reg_2147(0) = '1') else 
        windowY_reg_381;
    windowX_1_fu_814_p2 <= std_logic_vector(unsigned(windowX1_reg_477) + unsigned(ap_const_lv64_1));
    windowY_1_fu_808_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(windowY1_reg_524));
    x_fu_733_p2 <= std_logic_vector(unsigned(windowX_reg_322) + unsigned(ap_const_lv64_8));
    y_fu_1398_p2 <= std_logic_vector(unsigned(ap_const_lv64_8) + unsigned(windowY_reg_381));
end behav;
