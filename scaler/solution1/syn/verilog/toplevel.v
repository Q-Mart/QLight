// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="toplevel,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=109708,HLS_SYN_TPT=none,HLS_SYN_MEM=262,HLS_SYN_DSP=19,HLS_SYN_FF=3305,HLS_SYN_LUT=7312,HLS_VERSION=2018_2_1}" *)

module toplevel (
        ap_clk,
        ap_rst_n,
        m_axi_MAXI_AWVALID,
        m_axi_MAXI_AWREADY,
        m_axi_MAXI_AWADDR,
        m_axi_MAXI_AWID,
        m_axi_MAXI_AWLEN,
        m_axi_MAXI_AWSIZE,
        m_axi_MAXI_AWBURST,
        m_axi_MAXI_AWLOCK,
        m_axi_MAXI_AWCACHE,
        m_axi_MAXI_AWPROT,
        m_axi_MAXI_AWQOS,
        m_axi_MAXI_AWREGION,
        m_axi_MAXI_AWUSER,
        m_axi_MAXI_WVALID,
        m_axi_MAXI_WREADY,
        m_axi_MAXI_WDATA,
        m_axi_MAXI_WSTRB,
        m_axi_MAXI_WLAST,
        m_axi_MAXI_WID,
        m_axi_MAXI_WUSER,
        m_axi_MAXI_ARVALID,
        m_axi_MAXI_ARREADY,
        m_axi_MAXI_ARADDR,
        m_axi_MAXI_ARID,
        m_axi_MAXI_ARLEN,
        m_axi_MAXI_ARSIZE,
        m_axi_MAXI_ARBURST,
        m_axi_MAXI_ARLOCK,
        m_axi_MAXI_ARCACHE,
        m_axi_MAXI_ARPROT,
        m_axi_MAXI_ARQOS,
        m_axi_MAXI_ARREGION,
        m_axi_MAXI_ARUSER,
        m_axi_MAXI_RVALID,
        m_axi_MAXI_RREADY,
        m_axi_MAXI_RDATA,
        m_axi_MAXI_RLAST,
        m_axi_MAXI_RID,
        m_axi_MAXI_RUSER,
        m_axi_MAXI_RRESP,
        m_axi_MAXI_BVALID,
        m_axi_MAXI_BREADY,
        m_axi_MAXI_BRESP,
        m_axi_MAXI_BID,
        m_axi_MAXI_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_state2 = 38'd2;
parameter    ap_ST_fsm_state3 = 38'd4;
parameter    ap_ST_fsm_state4 = 38'd8;
parameter    ap_ST_fsm_state5 = 38'd16;
parameter    ap_ST_fsm_state6 = 38'd32;
parameter    ap_ST_fsm_state7 = 38'd64;
parameter    ap_ST_fsm_state8 = 38'd128;
parameter    ap_ST_fsm_pp0_stage0 = 38'd256;
parameter    ap_ST_fsm_state12 = 38'd512;
parameter    ap_ST_fsm_state13 = 38'd1024;
parameter    ap_ST_fsm_state14 = 38'd2048;
parameter    ap_ST_fsm_state15 = 38'd4096;
parameter    ap_ST_fsm_state16 = 38'd8192;
parameter    ap_ST_fsm_state17 = 38'd16384;
parameter    ap_ST_fsm_state18 = 38'd32768;
parameter    ap_ST_fsm_state19 = 38'd65536;
parameter    ap_ST_fsm_state20 = 38'd131072;
parameter    ap_ST_fsm_state21 = 38'd262144;
parameter    ap_ST_fsm_state22 = 38'd524288;
parameter    ap_ST_fsm_state23 = 38'd1048576;
parameter    ap_ST_fsm_state24 = 38'd2097152;
parameter    ap_ST_fsm_state25 = 38'd4194304;
parameter    ap_ST_fsm_state26 = 38'd8388608;
parameter    ap_ST_fsm_state27 = 38'd16777216;
parameter    ap_ST_fsm_state28 = 38'd33554432;
parameter    ap_ST_fsm_state29 = 38'd67108864;
parameter    ap_ST_fsm_state30 = 38'd134217728;
parameter    ap_ST_fsm_state31 = 38'd268435456;
parameter    ap_ST_fsm_state32 = 38'd536870912;
parameter    ap_ST_fsm_state33 = 38'd1073741824;
parameter    ap_ST_fsm_state34 = 38'd2147483648;
parameter    ap_ST_fsm_pp1_stage0 = 38'd4294967296;
parameter    ap_ST_fsm_state38 = 38'd8589934592;
parameter    ap_ST_fsm_state39 = 38'd17179869184;
parameter    ap_ST_fsm_state40 = 38'd34359738368;
parameter    ap_ST_fsm_state41 = 38'd68719476736;
parameter    ap_ST_fsm_state42 = 38'd137438953472;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MAXI_ID_WIDTH = 1;
parameter    C_M_AXI_MAXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_MAXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MAXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_USER_VALUE = 0;
parameter    C_M_AXI_MAXI_PROT_VALUE = 0;
parameter    C_M_AXI_MAXI_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MAXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_MAXI_AWVALID;
input   m_axi_MAXI_AWREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_AWADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_AWID;
output  [7:0] m_axi_MAXI_AWLEN;
output  [2:0] m_axi_MAXI_AWSIZE;
output  [1:0] m_axi_MAXI_AWBURST;
output  [1:0] m_axi_MAXI_AWLOCK;
output  [3:0] m_axi_MAXI_AWCACHE;
output  [2:0] m_axi_MAXI_AWPROT;
output  [3:0] m_axi_MAXI_AWQOS;
output  [3:0] m_axi_MAXI_AWREGION;
output  [C_M_AXI_MAXI_AWUSER_WIDTH - 1:0] m_axi_MAXI_AWUSER;
output   m_axi_MAXI_WVALID;
input   m_axi_MAXI_WREADY;
output  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_WDATA;
output  [C_M_AXI_MAXI_WSTRB_WIDTH - 1:0] m_axi_MAXI_WSTRB;
output   m_axi_MAXI_WLAST;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_WID;
output  [C_M_AXI_MAXI_WUSER_WIDTH - 1:0] m_axi_MAXI_WUSER;
output   m_axi_MAXI_ARVALID;
input   m_axi_MAXI_ARREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_ARADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_ARID;
output  [7:0] m_axi_MAXI_ARLEN;
output  [2:0] m_axi_MAXI_ARSIZE;
output  [1:0] m_axi_MAXI_ARBURST;
output  [1:0] m_axi_MAXI_ARLOCK;
output  [3:0] m_axi_MAXI_ARCACHE;
output  [2:0] m_axi_MAXI_ARPROT;
output  [3:0] m_axi_MAXI_ARQOS;
output  [3:0] m_axi_MAXI_ARREGION;
output  [C_M_AXI_MAXI_ARUSER_WIDTH - 1:0] m_axi_MAXI_ARUSER;
input   m_axi_MAXI_RVALID;
output   m_axi_MAXI_RREADY;
input  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_RDATA;
input   m_axi_MAXI_RLAST;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_RID;
input  [C_M_AXI_MAXI_RUSER_WIDTH - 1:0] m_axi_MAXI_RUSER;
input  [1:0] m_axi_MAXI_RRESP;
input   m_axi_MAXI_BVALID;
output   m_axi_MAXI_BREADY;
input  [1:0] m_axi_MAXI_BRESP;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_BID;
input  [C_M_AXI_MAXI_BUSER_WIDTH - 1:0] m_axi_MAXI_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] ram;
wire   [31:0] length_r;
reg   [31:0] length_r_0_data_reg;
reg    length_r_0_vld_reg;
reg    length_r_0_ack_out;
wire   [31:0] height;
reg   [31:0] height_0_data_reg;
reg    height_0_vld_reg;
reg    height_0_ack_out;
wire   [31:0] scaledLength;
reg   [31:0] scaledLength_0_data_reg;
reg    scaledLength_0_vld_reg;
reg    scaledLength_0_ack_out;
reg   [16:0] sectionDataCopy_address0;
reg    sectionDataCopy_ce0;
reg    sectionDataCopy_we0;
wire   [31:0] sectionDataCopy_q0;
reg   [16:0] sectionDataCopy_address1;
reg    sectionDataCopy_ce1;
wire   [31:0] sectionDataCopy_q1;
reg   [10:0] newSectionData_address0;
reg    newSectionData_ce0;
reg   [3:0] newSectionData_we0;
reg   [31:0] newSectionData_d0;
wire   [31:0] newSectionData_q0;
wire   [31:0] ap_return;
reg    MAXI_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    MAXI_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_reg_2085;
reg    MAXI_blk_n_AW;
wire    ap_CS_fsm_state15;
wire   [0:0] tmp_9_fu_657_p2;
reg    MAXI_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond2_reg_2433;
reg   [0:0] exitcond2_reg_2433_pp1_iter1_reg;
reg    MAXI_blk_n_B;
wire    ap_CS_fsm_state42;
reg    MAXI_AWVALID;
wire    MAXI_AWREADY;
reg    MAXI_WVALID;
wire    MAXI_WREADY;
reg    MAXI_ARVALID;
wire    MAXI_ARREADY;
wire   [31:0] MAXI_ARADDR;
wire    MAXI_RVALID;
reg    MAXI_RREADY;
wire   [31:0] MAXI_RDATA;
wire    MAXI_RLAST;
wire   [0:0] MAXI_RID;
wire   [0:0] MAXI_RUSER;
wire   [1:0] MAXI_RRESP;
wire    MAXI_BVALID;
reg    MAXI_BREADY;
wire   [1:0] MAXI_BRESP;
wire   [0:0] MAXI_BID;
wire   [0:0] MAXI_BUSER;
reg   [16:0] indvar_reg_310;
reg   [16:0] indvar_reg_310_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [10:0] indvar2_reg_535;
reg   [29:0] ram1_reg_2073;
reg   [31:0] MAXI_addr_reg_2078;
reg    ap_sig_ioackin_MAXI_ARREADY;
wire   [0:0] exitcond1_fu_566_p2;
reg   [0:0] exitcond1_reg_2085_pp0_iter1_reg;
wire   [16:0] indvar_next_fu_572_p2;
reg   [16:0] indvar_next_reg_2089;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] MAXI_addr_read_reg_2094;
wire   [63:0] tmp_fu_583_p1;
reg   [63:0] tmp_reg_2099;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_1_fu_587_p1;
reg   [63:0] tmp_1_reg_2106;
wire   [63:0] tmp_25_fu_603_p1;
reg   [63:0] tmp_25_reg_2113;
wire   [0:0] tmp_2_fu_607_p2;
reg   [0:0] tmp_2_reg_2118;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_4_fu_613_p2;
reg   [0:0] tmp_4_reg_2123;
wire   [63:0] umax3_fu_649_p3;
reg   [63:0] umax3_reg_2128;
reg    ap_sig_ioackin_MAXI_AWREADY;
reg    ap_block_state15_io;
wire   [6:0] scaledX_V_fu_662_p2;
reg   [6:0] scaledX_V_reg_2137;
wire   [31:0] tmp_s_fu_668_p1;
reg   [31:0] tmp_s_reg_2142;
wire   [0:0] tmp_10_fu_672_p2;
reg   [0:0] tmp_10_reg_2147;
wire    ap_CS_fsm_state16;
wire   [0:0] tmp_12_fu_678_p2;
reg   [0:0] tmp_12_reg_2152;
wire   [63:0] umax5_fu_714_p3;
reg   [63:0] umax5_reg_2157;
wire    ap_CS_fsm_state17;
wire   [6:0] scaledY_V_fu_727_p2;
reg   [6:0] scaledY_V_reg_2165;
wire   [63:0] x_fu_733_p2;
wire   [0:0] tmp_16_fu_722_p2;
wire   [63:0] indvars_iv_next2_fu_739_p2;
wire   [63:0] indvars_iv_next3_fu_745_p2;
wire   [63:0] indvars_iv_next4_fu_751_p2;
wire   [63:0] tmp_29_fu_774_p2;
reg   [63:0] tmp_29_reg_2193;
wire    ap_CS_fsm_state18;
wire   [0:0] exitcond3_fu_762_p2;
wire   [63:0] indvars_iv_next6_fu_780_p2;
reg   [63:0] indvars_iv_next6_reg_2198;
wire   [63:0] indvars_iv_next7_fu_786_p2;
reg   [63:0] indvars_iv_next7_reg_2203;
wire   [63:0] windowY_1_fu_808_p2;
reg   [63:0] windowY_1_reg_2211;
wire    ap_CS_fsm_state19;
wire   [0:0] exitcond_fu_797_p2;
wire   [63:0] windowX_1_fu_814_p2;
wire   [63:0] grp_fu_803_p2;
reg   [63:0] tmp_32_reg_2221;
wire    ap_CS_fsm_state23;
wire   [1:0] tmp_103_fu_828_p1;
reg   [1:0] tmp_103_reg_2226;
wire    ap_CS_fsm_state24;
reg   [19:0] adjSize3_reg_2231;
wire   [1:0] tmp_121_fu_848_p1;
reg   [1:0] tmp_121_reg_2237;
reg   [19:0] adjSize4_reg_2242;
wire   [1:0] tmp_139_fu_868_p1;
reg   [1:0] tmp_139_reg_2248;
reg   [19:0] adjSize5_reg_2253;
wire    ap_CS_fsm_state25;
wire   [5:0] tmp_114_fu_1055_p2;
reg   [5:0] tmp_114_reg_2269;
wire    ap_CS_fsm_state26;
wire   [31:0] tmp_117_fu_1065_p2;
reg   [31:0] tmp_117_reg_2274;
wire   [5:0] tmp_132_fu_1150_p2;
reg   [5:0] tmp_132_reg_2279;
wire   [31:0] tmp_135_fu_1160_p2;
reg   [31:0] tmp_135_reg_2284;
wire   [13:0] rollingAverage_0_V_fu_1235_p2;
reg   [13:0] rollingAverage_0_V_reg_2294;
wire    ap_CS_fsm_state27;
wire   [13:0] rollingAverage_1_V_fu_1263_p2;
reg   [13:0] rollingAverage_1_V_reg_2299;
wire   [5:0] tmp_150_fu_1348_p2;
reg   [5:0] tmp_150_reg_2304;
wire   [31:0] tmp_153_fu_1358_p2;
reg   [31:0] tmp_153_reg_2309;
wire   [13:0] rollingAverage_2_V_fu_1386_p2;
wire    ap_CS_fsm_state28;
wire  signed [31:0] i_op_assign_fu_1392_p2;
reg  signed [31:0] i_op_assign_reg_2319;
wire    ap_CS_fsm_state29;
wire   [63:0] y_fu_1398_p2;
reg   [63:0] y_reg_2324;
wire   [63:0] indvars_iv_next_fu_1404_p2;
reg   [63:0] indvars_iv_next_reg_2329;
wire   [31:0] tmp_19_fu_1414_p2;
reg   [31:0] tmp_19_reg_2334;
wire    ap_CS_fsm_state30;
wire   [31:0] index_fu_1429_p2;
reg   [31:0] index_reg_2339;
wire    ap_CS_fsm_state31;
wire   [1:0] tmp_31_fu_1435_p1;
reg   [1:0] tmp_31_reg_2345;
reg   [13:0] adjSize_reg_2350;
wire   [4:0] start_pos1_fu_1449_p3;
reg   [4:0] start_pos1_reg_2356;
wire   [4:0] end_pos_fu_1457_p2;
reg   [4:0] end_pos_reg_2361;
wire   [0:0] tmp_34_fu_1463_p2;
reg   [0:0] tmp_34_reg_2366;
wire   [1:0] tmp_60_fu_1644_p1;
reg   [1:0] tmp_60_reg_2374;
wire    ap_CS_fsm_state32;
reg   [13:0] adjSize1_reg_2379;
wire   [4:0] start_pos2_fu_1658_p3;
reg   [4:0] start_pos2_reg_2385;
wire   [4:0] end_pos1_fu_1666_p2;
reg   [4:0] end_pos1_reg_2390;
wire   [0:0] tmp_61_fu_1672_p2;
reg   [0:0] tmp_61_reg_2395;
wire   [1:0] tmp_80_fu_1683_p1;
reg   [1:0] tmp_80_reg_2403;
reg   [13:0] adjSize2_reg_2409;
wire   [4:0] start_pos3_fu_1867_p3;
reg   [4:0] start_pos3_reg_2415;
wire    ap_CS_fsm_state33;
wire   [4:0] end_pos2_fu_1874_p2;
reg   [4:0] end_pos2_reg_2420;
wire   [0:0] tmp_81_fu_1880_p2;
reg   [0:0] tmp_81_reg_2425;
wire   [0:0] exitcond2_fu_2056_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state35_pp1_stage0_iter0;
wire    ap_block_state36_pp1_stage0_iter1;
wire    ap_block_state37_pp1_stage0_iter2;
reg    ap_sig_ioackin_MAXI_WREADY;
reg    ap_block_state37_io;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] indvar_next1_fu_2062_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] newSectionData_load_reg_2447;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state35;
reg   [16:0] ap_phi_mux_indvar_phi_fu_314_p4;
reg   [63:0] windowX_reg_322;
reg   [63:0] indvars_iv3_reg_334;
reg   [63:0] indvars_iv1_reg_346;
reg   [63:0] indvars_iv4_reg_358;
reg   [6:0] p_s_reg_370;
reg   [63:0] windowY_reg_381;
wire    ap_CS_fsm_state34;
reg   [63:0] indvars_iv7_reg_393;
reg   [63:0] indvars_iv5_reg_405;
reg   [63:0] indvars_iv_reg_417;
reg   [6:0] p_0194_1_reg_429;
reg   [13:0] rollingAverage_V_2_2_reg_441;
reg   [13:0] rollingAverage_V_1_2_reg_453;
reg   [13:0] rollingAverage_V_0_2_reg_465;
reg   [63:0] windowX1_reg_477;
reg   [13:0] rollingAverage_V_2_3_reg_488;
reg   [13:0] rollingAverage_V_1_3_reg_500;
reg   [13:0] rollingAverage_V_0_3_reg_512;
reg  signed [63:0] windowY1_reg_524;
wire   [63:0] indvar1_fu_578_p1;
wire  signed [63:0] gepindex2_cast_fu_924_p1;
wire  signed [63:0] gepindex2113_cast_fu_971_p1;
wire  signed [63:0] gepindex2125_cast_fu_1208_p1;
wire  signed [63:0] gepindex2137_cast_fu_1521_p1;
wire  signed [63:0] gepindex2151_cast_fu_1749_p1;
wire  signed [63:0] gepindex2166_cast_fu_1938_p1;
wire   [63:0] indvar3_fu_2068_p1;
wire   [63:0] tmp_7_fu_556_p1;
reg    ap_reg_ioackin_MAXI_ARREADY;
reg    ap_reg_ioackin_MAXI_AWREADY;
reg    ap_reg_ioackin_MAXI_WREADY;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] tmp_58_fu_1622_p2;
wire   [3:0] mask_fu_1632_p2;
wire   [31:0] tmp_78_fu_1850_p2;
wire   [3:0] mask1_fu_1860_p2;
wire   [31:0] tmp_98_fu_2039_p2;
wire   [3:0] mask2_fu_2049_p2;
wire   [31:0] tmp_15_fu_591_p2;
wire   [31:0] tmp_22_fu_597_p2;
wire   [63:0] umax1_fu_618_p3;
wire   [63:0] umax2_fu_631_p3;
wire   [63:0] tmp_3_fu_625_p2;
wire   [63:0] tmp_5_fu_637_p2;
wire   [0:0] tmp_6_fu_643_p2;
wire   [63:0] umax_fu_683_p3;
wire   [63:0] umax4_fu_696_p3;
wire   [63:0] tmp_11_fu_690_p2;
wire   [63:0] tmp_13_fu_702_p2;
wire   [0:0] tmp_14_fu_708_p2;
wire   [63:0] tmp_28_fu_757_p2;
wire   [63:0] tmp_100_fu_768_p2;
wire   [63:0] tmp_101_fu_792_p2;
wire   [31:0] grp_fu_803_p1;
wire   [63:0] tmp_33_fu_820_p2;
wire   [31:0] current_fu_824_p1;
wire   [31:0] tmp_37_fu_842_p2;
wire   [31:0] tmp_41_fu_862_p2;
wire   [19:0] mem_index_gep3_fu_882_p2;
wire   [20:0] adjSize104_cast_fu_887_p1;
wire   [0:0] addrCmp_fu_891_p2;
wire   [20:0] gepindex_fu_902_p2;
wire   [0:0] addrCmp7_fu_896_p2;
wire   [20:0] gepindex11_fu_908_p3;
wire   [20:0] gepindex2_fu_916_p3;
wire   [19:0] mem_index_gep4_fu_929_p2;
wire   [20:0] adjSize107_cast_fu_934_p1;
wire   [0:0] addrCmp8_fu_938_p2;
wire   [20:0] gepindex12_fu_949_p2;
wire   [0:0] addrCmp9_fu_943_p2;
wire   [20:0] gepindex13_fu_955_p3;
wire   [20:0] gepindex14_fu_963_p3;
wire   [4:0] start_pos_fu_976_p3;
wire   [4:0] end_pos3_fu_983_p2;
wire   [5:0] tmp_105_fu_995_p1;
wire   [5:0] tmp_106_fu_999_p1;
wire   [0:0] tmp_104_fu_989_p2;
wire   [5:0] tmp_108_fu_1013_p2;
wire   [5:0] tmp_110_fu_1025_p2;
reg   [31:0] tmp_107_fu_1003_p4;
wire   [5:0] tmp_109_fu_1019_p2;
wire   [5:0] tmp_111_fu_1031_p3;
wire   [5:0] tmp_113_fu_1047_p3;
wire   [31:0] tmp_112_fu_1039_p3;
wire   [31:0] tmp_115_fu_1061_p1;
wire   [4:0] start_pos4_fu_1071_p3;
wire   [4:0] end_pos4_fu_1078_p2;
wire   [5:0] tmp_123_fu_1090_p1;
wire   [5:0] tmp_124_fu_1094_p1;
wire   [0:0] tmp_122_fu_1084_p2;
wire   [5:0] tmp_126_fu_1108_p2;
wire   [5:0] tmp_128_fu_1120_p2;
reg   [31:0] tmp_125_fu_1098_p4;
wire   [5:0] tmp_127_fu_1114_p2;
wire   [5:0] tmp_129_fu_1126_p3;
wire   [5:0] tmp_131_fu_1142_p3;
wire   [31:0] tmp_130_fu_1134_p3;
wire   [31:0] tmp_133_fu_1156_p1;
wire   [19:0] mem_index_gep5_fu_1166_p2;
wire   [20:0] adjSize119_cast_fu_1171_p1;
wire   [0:0] addrCmp10_fu_1175_p2;
wire   [20:0] gepindex15_fu_1186_p2;
wire   [0:0] addrCmp11_fu_1180_p2;
wire   [20:0] gepindex16_fu_1192_p3;
wire   [20:0] gepindex17_fu_1200_p3;
wire   [31:0] tmp_116_fu_1213_p1;
wire   [31:0] tmp_118_fu_1216_p2;
wire   [31:0] tmp_119_fu_1222_p2;
wire   [7:0] tmp_120_fu_1227_p1;
wire   [13:0] tmp_35_fu_1231_p1;
wire   [31:0] tmp_134_fu_1241_p1;
wire   [31:0] tmp_136_fu_1244_p2;
wire   [31:0] tmp_137_fu_1250_p2;
wire   [7:0] tmp_138_fu_1255_p1;
wire   [13:0] tmp_39_fu_1259_p1;
wire   [4:0] start_pos5_fu_1269_p3;
wire   [4:0] end_pos5_fu_1276_p2;
wire   [5:0] tmp_141_fu_1288_p1;
wire   [5:0] tmp_142_fu_1292_p1;
wire   [0:0] tmp_140_fu_1282_p2;
wire   [5:0] tmp_144_fu_1306_p2;
wire   [5:0] tmp_146_fu_1318_p2;
reg   [31:0] tmp_143_fu_1296_p4;
wire   [5:0] tmp_145_fu_1312_p2;
wire   [5:0] tmp_147_fu_1324_p3;
wire   [5:0] tmp_149_fu_1340_p3;
wire   [31:0] tmp_148_fu_1332_p3;
wire   [31:0] tmp_151_fu_1354_p1;
wire   [31:0] tmp_152_fu_1364_p1;
wire   [31:0] tmp_154_fu_1367_p2;
wire   [31:0] tmp_155_fu_1373_p2;
wire   [7:0] tmp_156_fu_1378_p1;
wire   [13:0] tmp_43_fu_1382_p1;
wire   [6:0] tmp_19_fu_1414_p1;
wire   [31:0] tmp_20_fu_1419_p2;
wire   [31:0] tmp_30_fu_1423_p2;
wire   [13:0] mem_index_gep_fu_1479_p2;
wire   [14:0] adjSize131_cast_fu_1484_p1;
wire   [0:0] addrCmp1_fu_1488_p2;
wire   [14:0] gepindex1_fu_1499_p2;
wire   [0:0] addrCmp2_fu_1493_p2;
wire   [14:0] gepindex3_fu_1505_p3;
wire   [14:0] gepindex4_fu_1513_p3;
wire   [7:0] tmp_21_fu_1469_p4;
wire   [5:0] tmp_38_fu_1526_p1;
wire   [5:0] tmp_42_fu_1529_p1;
wire   [5:0] tmp_45_fu_1536_p2;
wire   [5:0] tmp_46_fu_1542_p3;
wire   [5:0] tmp_48_fu_1556_p3;
wire   [5:0] tmp_47_fu_1549_p3;
wire   [5:0] tmp_49_fu_1563_p2;
wire   [31:0] tmp_44_fu_1532_p1;
wire   [31:0] tmp_50_fu_1569_p1;
wire   [31:0] tmp_53_fu_1581_p2;
reg   [31:0] tmp_54_fu_1587_p4;
wire   [31:0] tmp_51_fu_1573_p1;
wire   [31:0] tmp_52_fu_1577_p1;
wire   [31:0] tmp_56_fu_1604_p2;
wire   [31:0] tmp_57_fu_1610_p2;
wire   [31:0] tmp_55_fu_1597_p3;
wire   [31:0] p_demorgan_fu_1616_p2;
wire   [3:0] tmp_59_fu_1629_p1;
wire   [31:0] tmp_24_fu_1639_p2;
wire   [31:0] tmp_27_fu_1678_p2;
wire   [13:0] mem_index_gep1_fu_1707_p2;
wire   [14:0] adjSize145_cast_fu_1712_p1;
wire   [0:0] addrCmp3_fu_1716_p2;
wire   [14:0] gepindex5_fu_1727_p2;
wire   [0:0] addrCmp4_fu_1721_p2;
wire   [14:0] gepindex6_fu_1733_p3;
wire   [14:0] gepindex7_fu_1741_p3;
wire   [7:0] tmp_23_fu_1697_p4;
wire   [5:0] tmp_62_fu_1754_p1;
wire   [5:0] tmp_63_fu_1757_p1;
wire   [5:0] tmp_65_fu_1764_p2;
wire   [5:0] tmp_66_fu_1770_p3;
wire   [5:0] tmp_68_fu_1784_p3;
wire   [5:0] tmp_67_fu_1777_p3;
wire   [5:0] tmp_69_fu_1791_p2;
wire   [31:0] tmp_64_fu_1760_p1;
wire   [31:0] tmp_70_fu_1797_p1;
wire   [31:0] tmp_73_fu_1809_p2;
reg   [31:0] tmp_74_fu_1815_p4;
wire   [31:0] tmp_71_fu_1801_p1;
wire   [31:0] tmp_72_fu_1805_p1;
wire   [31:0] tmp_76_fu_1832_p2;
wire   [31:0] tmp_77_fu_1838_p2;
wire   [31:0] tmp_75_fu_1825_p3;
wire   [31:0] p_demorgan1_fu_1844_p2;
wire   [3:0] tmp_79_fu_1857_p1;
wire   [13:0] mem_index_gep2_fu_1896_p2;
wire   [14:0] adjSize160_cast_fu_1901_p1;
wire   [0:0] addrCmp5_fu_1905_p2;
wire   [14:0] gepindex8_fu_1916_p2;
wire   [0:0] addrCmp6_fu_1910_p2;
wire   [14:0] gepindex9_fu_1922_p3;
wire   [14:0] gepindex10_fu_1930_p3;
wire   [7:0] tmp_26_fu_1886_p4;
wire   [5:0] tmp_82_fu_1943_p1;
wire   [5:0] tmp_83_fu_1946_p1;
wire   [5:0] tmp_85_fu_1953_p2;
wire   [5:0] tmp_86_fu_1959_p3;
wire   [5:0] tmp_88_fu_1973_p3;
wire   [5:0] tmp_87_fu_1966_p3;
wire   [5:0] tmp_89_fu_1980_p2;
wire   [31:0] tmp_84_fu_1949_p1;
wire   [31:0] tmp_90_fu_1986_p1;
wire   [31:0] tmp_93_fu_1998_p2;
reg   [31:0] tmp_94_fu_2004_p4;
wire   [31:0] tmp_91_fu_1990_p1;
wire   [31:0] tmp_92_fu_1994_p1;
wire   [31:0] tmp_96_fu_2021_p2;
wire   [31:0] tmp_97_fu_2027_p2;
wire   [31:0] tmp_95_fu_2014_p3;
wire   [31:0] p_demorgan2_fu_2033_p2;
wire   [3:0] tmp_99_fu_2046_p1;
wire    ap_CS_fsm_state41;
reg   [37:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [31:0] tmp_19_fu_1414_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
#0 length_r_0_data_reg = 32'd0;
#0 length_r_0_vld_reg = 1'b0;
#0 height_0_data_reg = 32'd0;
#0 height_0_vld_reg = 1'b0;
#0 scaledLength_0_data_reg = 32'd0;
#0 scaledLength_0_vld_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_MAXI_ARREADY = 1'b0;
#0 ap_reg_ioackin_MAXI_AWREADY = 1'b0;
#0 ap_reg_ioackin_MAXI_WREADY = 1'b0;
end

toplevel_sectionDbkb #(
    .DataWidth( 32 ),
    .AddressRange( 108000 ),
    .AddressWidth( 17 ))
sectionDataCopy_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sectionDataCopy_address0),
    .ce0(sectionDataCopy_ce0),
    .we0(sectionDataCopy_we0),
    .d0(MAXI_addr_read_reg_2094),
    .q0(sectionDataCopy_q0),
    .address1(sectionDataCopy_address1),
    .ce1(sectionDataCopy_ce1),
    .q1(sectionDataCopy_q1)
);

toplevel_newSecticud #(
    .DataWidth( 32 ),
    .AddressRange( 1688 ),
    .AddressWidth( 11 ))
newSectionData_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(newSectionData_address0),
    .ce0(newSectionData_ce0),
    .we0(newSectionData_we0),
    .d0(newSectionData_d0),
    .q0(newSectionData_q0)
);

toplevel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
toplevel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .ram(ram),
    .length_r(length_r),
    .height(height),
    .scaledLength(scaledLength)
);

toplevel_MAXI_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MAXI_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MAXI_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MAXI_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MAXI_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MAXI_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MAXI_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MAXI_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MAXI_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MAXI_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MAXI_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MAXI_CACHE_VALUE ))
toplevel_MAXI_m_axi_U(
    .AWVALID(m_axi_MAXI_AWVALID),
    .AWREADY(m_axi_MAXI_AWREADY),
    .AWADDR(m_axi_MAXI_AWADDR),
    .AWID(m_axi_MAXI_AWID),
    .AWLEN(m_axi_MAXI_AWLEN),
    .AWSIZE(m_axi_MAXI_AWSIZE),
    .AWBURST(m_axi_MAXI_AWBURST),
    .AWLOCK(m_axi_MAXI_AWLOCK),
    .AWCACHE(m_axi_MAXI_AWCACHE),
    .AWPROT(m_axi_MAXI_AWPROT),
    .AWQOS(m_axi_MAXI_AWQOS),
    .AWREGION(m_axi_MAXI_AWREGION),
    .AWUSER(m_axi_MAXI_AWUSER),
    .WVALID(m_axi_MAXI_WVALID),
    .WREADY(m_axi_MAXI_WREADY),
    .WDATA(m_axi_MAXI_WDATA),
    .WSTRB(m_axi_MAXI_WSTRB),
    .WLAST(m_axi_MAXI_WLAST),
    .WID(m_axi_MAXI_WID),
    .WUSER(m_axi_MAXI_WUSER),
    .ARVALID(m_axi_MAXI_ARVALID),
    .ARREADY(m_axi_MAXI_ARREADY),
    .ARADDR(m_axi_MAXI_ARADDR),
    .ARID(m_axi_MAXI_ARID),
    .ARLEN(m_axi_MAXI_ARLEN),
    .ARSIZE(m_axi_MAXI_ARSIZE),
    .ARBURST(m_axi_MAXI_ARBURST),
    .ARLOCK(m_axi_MAXI_ARLOCK),
    .ARCACHE(m_axi_MAXI_ARCACHE),
    .ARPROT(m_axi_MAXI_ARPROT),
    .ARQOS(m_axi_MAXI_ARQOS),
    .ARREGION(m_axi_MAXI_ARREGION),
    .ARUSER(m_axi_MAXI_ARUSER),
    .RVALID(m_axi_MAXI_RVALID),
    .RREADY(m_axi_MAXI_RREADY),
    .RDATA(m_axi_MAXI_RDATA),
    .RLAST(m_axi_MAXI_RLAST),
    .RID(m_axi_MAXI_RID),
    .RUSER(m_axi_MAXI_RUSER),
    .RRESP(m_axi_MAXI_RRESP),
    .BVALID(m_axi_MAXI_BVALID),
    .BREADY(m_axi_MAXI_BREADY),
    .BRESP(m_axi_MAXI_BRESP),
    .BID(m_axi_MAXI_BID),
    .BUSER(m_axi_MAXI_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(MAXI_ARVALID),
    .I_ARREADY(MAXI_ARREADY),
    .I_ARADDR(MAXI_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd108000),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(MAXI_RVALID),
    .I_RREADY(MAXI_RREADY),
    .I_RDATA(MAXI_RDATA),
    .I_RID(MAXI_RID),
    .I_RUSER(MAXI_RUSER),
    .I_RRESP(MAXI_RRESP),
    .I_RLAST(MAXI_RLAST),
    .I_AWVALID(MAXI_AWVALID),
    .I_AWREADY(MAXI_AWREADY),
    .I_AWADDR(MAXI_addr_reg_2078),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1688),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(MAXI_WVALID),
    .I_WREADY(MAXI_WREADY),
    .I_WDATA(newSectionData_load_reg_2447),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(MAXI_BVALID),
    .I_BREADY(MAXI_BREADY),
    .I_BRESP(MAXI_BRESP),
    .I_BID(MAXI_BID),
    .I_BUSER(MAXI_BUSER)
);

toplevel_mul_64s_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
toplevel_mul_64s_dEe_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(windowY1_reg_524),
    .din1(grp_fu_803_p1),
    .ce(1'b1),
    .dout(grp_fu_803_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state35) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state15_io) & (tmp_9_fu_657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state35)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state35);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b0 == ap_block_state15_io) & (tmp_9_fu_657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_MAXI_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_MAXI_ARREADY == 1'b1)) begin
                ap_reg_ioackin_MAXI_ARREADY <= 1'b0;
            end else if ((1'b1 == MAXI_ARREADY)) begin
                ap_reg_ioackin_MAXI_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_MAXI_AWREADY <= 1'b0;
    end else begin
        if (((tmp_9_fu_657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
            if ((1'b0 == ap_block_state15_io)) begin
                ap_reg_ioackin_MAXI_AWREADY <= 1'b0;
            end else if ((1'b1 == MAXI_AWREADY)) begin
                ap_reg_ioackin_MAXI_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_MAXI_WREADY <= 1'b0;
    end else begin
        if (((exitcond2_reg_2433_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
            if ((1'b0 == ap_block_pp1_stage0_11001)) begin
                ap_reg_ioackin_MAXI_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp1_stage0_01001) & (1'b1 == MAXI_WREADY))) begin
                ap_reg_ioackin_MAXI_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state15_io) & (tmp_9_fu_657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        indvar2_reg_535 <= 11'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond2_fu_2056_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar2_reg_535 <= indvar_next1_fu_2062_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_2085 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_reg_310 <= indvar_next_reg_2089;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_310 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv1_reg_346 <= 64'd7;
    end else if (((tmp_16_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        indvars_iv1_reg_346 <= indvars_iv_next4_fu_751_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv3_reg_334 <= 64'd8;
    end else if (((tmp_16_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        indvars_iv3_reg_334 <= indvars_iv_next3_fu_745_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv4_reg_358 <= 64'd18446744073709551615;
    end else if (((tmp_16_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        indvars_iv4_reg_358 <= indvars_iv_next2_fu_739_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state15_io) & (tmp_9_fu_657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        indvars_iv5_reg_405 <= 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        indvars_iv5_reg_405 <= indvars_iv_next7_reg_2203;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state15_io) & (tmp_9_fu_657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        indvars_iv7_reg_393 <= 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        indvars_iv7_reg_393 <= indvars_iv_next6_reg_2198;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state15_io) & (tmp_9_fu_657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        indvars_iv_reg_417 <= 64'd18446744073709551615;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        indvars_iv_reg_417 <= indvars_iv_next_reg_2329;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state15_io) & (tmp_9_fu_657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        p_0194_1_reg_429 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        p_0194_1_reg_429 <= scaledY_V_reg_2165;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_s_reg_370 <= 7'd0;
    end else if (((tmp_16_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        p_s_reg_370 <= scaledX_V_reg_2137;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_797_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        rollingAverage_V_0_2_reg_465 <= rollingAverage_V_0_3_reg_512;
    end else if (((tmp_16_fu_722_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        rollingAverage_V_0_2_reg_465 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rollingAverage_V_0_3_reg_512 <= rollingAverage_0_V_reg_2294;
    end else if (((exitcond3_fu_762_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        rollingAverage_V_0_3_reg_512 <= rollingAverage_V_0_2_reg_465;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_797_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        rollingAverage_V_1_2_reg_453 <= rollingAverage_V_1_3_reg_500;
    end else if (((tmp_16_fu_722_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        rollingAverage_V_1_2_reg_453 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rollingAverage_V_1_3_reg_500 <= rollingAverage_1_V_reg_2299;
    end else if (((exitcond3_fu_762_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        rollingAverage_V_1_3_reg_500 <= rollingAverage_V_1_2_reg_453;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_797_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        rollingAverage_V_2_2_reg_441 <= rollingAverage_V_2_3_reg_488;
    end else if (((tmp_16_fu_722_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        rollingAverage_V_2_2_reg_441 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rollingAverage_V_2_3_reg_488 <= rollingAverage_2_V_fu_1386_p2;
    end else if (((exitcond3_fu_762_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        rollingAverage_V_2_3_reg_488 <= rollingAverage_V_2_2_reg_441;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_797_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        windowX1_reg_477 <= windowX_1_fu_814_p2;
    end else if (((tmp_16_fu_722_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        windowX1_reg_477 <= windowX_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        windowX_reg_322 <= 64'd0;
    end else if (((tmp_16_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        windowX_reg_322 <= x_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        windowY1_reg_524 <= windowY_1_reg_2211;
    end else if (((exitcond3_fu_762_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        windowY1_reg_524 <= windowY_reg_381;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state15_io) & (tmp_9_fu_657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        windowY_reg_381 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        windowY_reg_381 <= y_reg_2324;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_2085 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_addr_read_reg_2094 <= MAXI_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_MAXI_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        MAXI_addr_reg_2078[29 : 0] <= tmp_7_fu_556_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        adjSize1_reg_2379 <= {{tmp_24_fu_1639_p2[15:2]}};
        adjSize2_reg_2409 <= {{tmp_27_fu_1678_p2[15:2]}};
        end_pos1_reg_2390[4 : 3] <= end_pos1_fu_1666_p2[4 : 3];
        start_pos2_reg_2385[4 : 3] <= start_pos2_fu_1658_p3[4 : 3];
        tmp_60_reg_2374 <= tmp_60_fu_1644_p1;
        tmp_61_reg_2395 <= tmp_61_fu_1672_p2;
        tmp_80_reg_2403 <= tmp_80_fu_1683_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        adjSize3_reg_2231 <= {{tmp_33_fu_820_p2[21:2]}};
        adjSize4_reg_2242 <= {{tmp_37_fu_842_p2[21:2]}};
        adjSize5_reg_2253 <= {{tmp_41_fu_862_p2[21:2]}};
        tmp_103_reg_2226 <= tmp_103_fu_828_p1;
        tmp_121_reg_2237 <= tmp_121_fu_848_p1;
        tmp_139_reg_2248 <= tmp_139_fu_868_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        adjSize_reg_2350 <= {{index_fu_1429_p2[15:2]}};
        end_pos_reg_2361[4 : 3] <= end_pos_fu_1457_p2[4 : 3];
        index_reg_2339 <= index_fu_1429_p2;
        start_pos1_reg_2356[4 : 3] <= start_pos1_fu_1449_p3[4 : 3];
        tmp_31_reg_2345 <= tmp_31_fu_1435_p1;
        tmp_34_reg_2366 <= tmp_34_fu_1463_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        end_pos2_reg_2420[4 : 3] <= end_pos2_fu_1874_p2[4 : 3];
        start_pos3_reg_2415[4 : 3] <= start_pos3_fu_1867_p3[4 : 3];
        tmp_81_reg_2425 <= tmp_81_fu_1880_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_2085 <= exitcond1_fu_566_p2;
        exitcond1_reg_2085_pp0_iter1_reg <= exitcond1_reg_2085;
        indvar_reg_310_pp0_iter1_reg <= indvar_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond2_reg_2433 <= exitcond2_fu_2056_p2;
        exitcond2_reg_2433_pp1_iter1_reg <= exitcond2_reg_2433;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (height_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (height_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (height_0_vld_reg == 1'b1)))) begin
        height_0_data_reg <= height;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_op_assign_reg_2319 <= i_op_assign_fu_1392_p2;
        indvars_iv_next_reg_2329 <= indvars_iv_next_fu_1404_p2;
        y_reg_2324 <= y_fu_1398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_2089 <= indvar_next_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_762_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        indvars_iv_next6_reg_2198 <= indvars_iv_next6_fu_780_p2;
        indvars_iv_next7_reg_2203 <= indvars_iv_next7_fu_786_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (length_r_0_vld_reg == 1'b1)))) begin
        length_r_0_data_reg <= length_r;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond2_reg_2433 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        newSectionData_load_reg_2447 <= newSectionData_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ram1_reg_2073 <= {{ram[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        rollingAverage_0_V_reg_2294 <= rollingAverage_0_V_fu_1235_p2;
        rollingAverage_1_V_reg_2299 <= rollingAverage_1_V_fu_1263_p2;
        tmp_150_reg_2304[5 : 1] <= tmp_150_fu_1348_p2[5 : 1];
        tmp_153_reg_2309 <= tmp_153_fu_1358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (scaledLength_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (scaledLength_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (scaledLength_0_vld_reg == 1'b1)))) begin
        scaledLength_0_data_reg <= scaledLength;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state15_io) & (1'b1 == ap_CS_fsm_state15))) begin
        scaledX_V_reg_2137 <= scaledX_V_fu_662_p2;
        umax3_reg_2128 <= umax3_fu_649_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        scaledY_V_reg_2165 <= scaledY_V_fu_727_p2;
        umax5_reg_2157 <= umax5_fu_714_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_10_reg_2147 <= tmp_10_fu_672_p2;
        tmp_12_reg_2152 <= tmp_12_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_114_reg_2269[5 : 1] <= tmp_114_fu_1055_p2[5 : 1];
        tmp_117_reg_2274 <= tmp_117_fu_1065_p2;
        tmp_132_reg_2279[5 : 1] <= tmp_132_fu_1150_p2[5 : 1];
        tmp_135_reg_2284 <= tmp_135_fu_1160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_19_reg_2334 <= tmp_19_fu_1414_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_1_reg_2106[31 : 0] <= tmp_1_fu_587_p1[31 : 0];
        tmp_25_reg_2113[31 : 0] <= tmp_25_fu_603_p1[31 : 0];
        tmp_reg_2099[31 : 0] <= tmp_fu_583_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_762_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        tmp_29_reg_2193 <= tmp_29_fu_774_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_2_reg_2118 <= tmp_2_fu_607_p2;
        tmp_4_reg_2123 <= tmp_4_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_32_reg_2221 <= grp_fu_803_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state15_io) & (tmp_9_fu_657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        tmp_s_reg_2142[6 : 0] <= tmp_s_fu_668_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        windowY_1_reg_2211 <= windowY_1_fu_808_p2;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_MAXI_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        MAXI_ARVALID = 1'b1;
    end else begin
        MAXI_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_MAXI_AWREADY == 1'b0) & (tmp_9_fu_657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        MAXI_AWVALID = 1'b1;
    end else begin
        MAXI_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state42))) begin
        MAXI_BREADY = 1'b1;
    end else begin
        MAXI_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_2085 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_RREADY = 1'b1;
    end else begin
        MAXI_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_MAXI_WREADY == 1'b0) & (exitcond2_reg_2433_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        MAXI_WVALID = 1'b1;
    end else begin
        MAXI_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        MAXI_blk_n_AR = m_axi_MAXI_ARREADY;
    end else begin
        MAXI_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_9_fu_657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        MAXI_blk_n_AW = m_axi_MAXI_AWREADY;
    end else begin
        MAXI_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        MAXI_blk_n_B = m_axi_MAXI_BVALID;
    end else begin
        MAXI_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2085 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_blk_n_R = m_axi_MAXI_RVALID;
    end else begin
        MAXI_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond2_reg_2433_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        MAXI_blk_n_W = m_axi_MAXI_WREADY;
    end else begin
        MAXI_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond1_fu_566_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_2056_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state35 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state35 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state42))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2085 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_phi_fu_314_p4 = indvar_next_reg_2089;
    end else begin
        ap_phi_mux_indvar_phi_fu_314_p4 = indvar_reg_310;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state42))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_MAXI_ARREADY == 1'b0)) begin
        ap_sig_ioackin_MAXI_ARREADY = MAXI_ARREADY;
    end else begin
        ap_sig_ioackin_MAXI_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_MAXI_AWREADY == 1'b0)) begin
        ap_sig_ioackin_MAXI_AWREADY = MAXI_AWREADY;
    end else begin
        ap_sig_ioackin_MAXI_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_MAXI_WREADY == 1'b0)) begin
        ap_sig_ioackin_MAXI_WREADY = MAXI_WREADY;
    end else begin
        ap_sig_ioackin_MAXI_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state42))) begin
        height_0_ack_out = 1'b1;
    end else begin
        height_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state42))) begin
        length_r_0_ack_out = 1'b1;
    end else begin
        length_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        newSectionData_address0 = indvar3_fu_2068_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        newSectionData_address0 = gepindex2166_cast_fu_1938_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        newSectionData_address0 = gepindex2151_cast_fu_1749_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        newSectionData_address0 = gepindex2137_cast_fu_1521_p1;
    end else begin
        newSectionData_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        newSectionData_ce0 = 1'b1;
    end else begin
        newSectionData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        newSectionData_d0 = tmp_98_fu_2039_p2;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        newSectionData_d0 = tmp_78_fu_1850_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        newSectionData_d0 = tmp_58_fu_1622_p2;
    end else begin
        newSectionData_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        newSectionData_we0 = mask2_fu_2049_p2;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        newSectionData_we0 = mask1_fu_1860_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        newSectionData_we0 = mask_fu_1632_p2;
    end else begin
        newSectionData_we0 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state42))) begin
        scaledLength_0_ack_out = 1'b1;
    end else begin
        scaledLength_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        sectionDataCopy_address0 = gepindex2_cast_fu_924_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sectionDataCopy_address0 = indvar1_fu_578_p1;
    end else begin
        sectionDataCopy_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        sectionDataCopy_address1 = gepindex2125_cast_fu_1208_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        sectionDataCopy_address1 = gepindex2113_cast_fu_971_p1;
    end else begin
        sectionDataCopy_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        sectionDataCopy_ce0 = 1'b1;
    end else begin
        sectionDataCopy_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        sectionDataCopy_ce1 = 1'b1;
    end else begin
        sectionDataCopy_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_2085_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sectionDataCopy_we0 = 1'b1;
    end else begin
        sectionDataCopy_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_MAXI_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_fu_566_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_fu_566_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b0 == ap_block_state15_io) & (tmp_9_fu_657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_state15_io) & (tmp_9_fu_657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((tmp_16_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((exitcond3_fu_762_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((exitcond_fu_797_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond2_fu_2056_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond2_fu_2056_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MAXI_ARADDR = tmp_7_fu_556_p1;

assign addrCmp10_fu_1175_p2 = ((adjSize5_reg_2253 < 20'd1041820) ? 1'b1 : 1'b0);

assign addrCmp11_fu_1180_p2 = ((mem_index_gep5_fu_1166_p2 < 20'd114756) ? 1'b1 : 1'b0);

assign addrCmp1_fu_1488_p2 = ((adjSize_reg_2350 < 14'd16380) ? 1'b1 : 1'b0);

assign addrCmp2_fu_1493_p2 = ((mem_index_gep_fu_1479_p2 < 14'd1692) ? 1'b1 : 1'b0);

assign addrCmp3_fu_1716_p2 = ((adjSize1_reg_2379 < 14'd16380) ? 1'b1 : 1'b0);

assign addrCmp4_fu_1721_p2 = ((mem_index_gep1_fu_1707_p2 < 14'd1692) ? 1'b1 : 1'b0);

assign addrCmp5_fu_1905_p2 = ((adjSize2_reg_2409 < 14'd16380) ? 1'b1 : 1'b0);

assign addrCmp6_fu_1910_p2 = ((mem_index_gep2_fu_1896_p2 < 14'd1692) ? 1'b1 : 1'b0);

assign addrCmp7_fu_896_p2 = ((mem_index_gep3_fu_882_p2 < 20'd114756) ? 1'b1 : 1'b0);

assign addrCmp8_fu_938_p2 = ((adjSize4_reg_2242 < 20'd1041820) ? 1'b1 : 1'b0);

assign addrCmp9_fu_943_p2 = ((mem_index_gep4_fu_929_p2 < 20'd114756) ? 1'b1 : 1'b0);

assign addrCmp_fu_891_p2 = ((adjSize3_reg_2231 < 20'd1041820) ? 1'b1 : 1'b0);

assign adjSize104_cast_fu_887_p1 = mem_index_gep3_fu_882_p2;

assign adjSize107_cast_fu_934_p1 = mem_index_gep4_fu_929_p2;

assign adjSize119_cast_fu_1171_p1 = mem_index_gep5_fu_1166_p2;

assign adjSize131_cast_fu_1484_p1 = mem_index_gep_fu_1479_p2;

assign adjSize145_cast_fu_1712_p1 = mem_index_gep1_fu_1707_p2;

assign adjSize160_cast_fu_1901_p1 = mem_index_gep2_fu_1896_p2;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == MAXI_RVALID) & (exitcond1_reg_2085 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == MAXI_RVALID) & (exitcond1_reg_2085 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((1'b0 == MAXI_RVALID) & (exitcond1_reg_2085 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((ap_sig_ioackin_MAXI_AWREADY == 1'b0) & (tmp_9_fu_657_p2 == 1'd0));
end

assign ap_block_state35_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state37_io = ((ap_sig_ioackin_MAXI_WREADY == 1'b0) & (exitcond2_reg_2433_pp1_iter1_reg == 1'd0));
end

assign ap_block_state37_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_return = 32'd1;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign current_fu_824_p1 = tmp_33_fu_820_p2[31:0];

assign end_pos1_fu_1666_p2 = (start_pos2_fu_1658_p3 | 5'd7);

assign end_pos2_fu_1874_p2 = (start_pos3_fu_1867_p3 | 5'd7);

assign end_pos3_fu_983_p2 = (start_pos_fu_976_p3 | 5'd7);

assign end_pos4_fu_1078_p2 = (start_pos4_fu_1071_p3 | 5'd7);

assign end_pos5_fu_1276_p2 = (start_pos5_fu_1269_p3 | 5'd7);

assign end_pos_fu_1457_p2 = (start_pos1_fu_1449_p3 | 5'd7);

assign exitcond1_fu_566_p2 = ((ap_phi_mux_indvar_phi_fu_314_p4 == 17'd108000) ? 1'b1 : 1'b0);

assign exitcond2_fu_2056_p2 = ((indvar2_reg_535 == 11'd1688) ? 1'b1 : 1'b0);

assign exitcond3_fu_762_p2 = ((windowX1_reg_477 == tmp_28_fu_757_p2) ? 1'b1 : 1'b0);

assign exitcond_fu_797_p2 = ((windowY1_reg_524 == tmp_101_fu_792_p2) ? 1'b1 : 1'b0);

assign gepindex10_fu_1930_p3 = ((addrCmp6_fu_1910_p2[0:0] === 1'b1) ? gepindex9_fu_1922_p3 : 15'd1687);

assign gepindex11_fu_908_p3 = ((addrCmp_fu_891_p2[0:0] === 1'b1) ? gepindex_fu_902_p2 : 21'd107999);

assign gepindex12_fu_949_p2 = ($signed(21'd2090396) + $signed(adjSize107_cast_fu_934_p1));

assign gepindex13_fu_955_p3 = ((addrCmp8_fu_938_p2[0:0] === 1'b1) ? gepindex12_fu_949_p2 : 21'd107999);

assign gepindex14_fu_963_p3 = ((addrCmp9_fu_943_p2[0:0] === 1'b1) ? gepindex13_fu_955_p3 : 21'd107999);

assign gepindex15_fu_1186_p2 = ($signed(21'd2090396) + $signed(adjSize119_cast_fu_1171_p1));

assign gepindex16_fu_1192_p3 = ((addrCmp10_fu_1175_p2[0:0] === 1'b1) ? gepindex15_fu_1186_p2 : 21'd107999);

assign gepindex17_fu_1200_p3 = ((addrCmp11_fu_1180_p2[0:0] === 1'b1) ? gepindex16_fu_1192_p3 : 21'd107999);

assign gepindex1_fu_1499_p2 = ($signed(15'd32764) + $signed(adjSize131_cast_fu_1484_p1));

assign gepindex2113_cast_fu_971_p1 = $signed(gepindex14_fu_963_p3);

assign gepindex2125_cast_fu_1208_p1 = $signed(gepindex17_fu_1200_p3);

assign gepindex2137_cast_fu_1521_p1 = $signed(gepindex4_fu_1513_p3);

assign gepindex2151_cast_fu_1749_p1 = $signed(gepindex7_fu_1741_p3);

assign gepindex2166_cast_fu_1938_p1 = $signed(gepindex10_fu_1930_p3);

assign gepindex2_cast_fu_924_p1 = $signed(gepindex2_fu_916_p3);

assign gepindex2_fu_916_p3 = ((addrCmp7_fu_896_p2[0:0] === 1'b1) ? gepindex11_fu_908_p3 : 21'd107999);

assign gepindex3_fu_1505_p3 = ((addrCmp1_fu_1488_p2[0:0] === 1'b1) ? gepindex1_fu_1499_p2 : 15'd1687);

assign gepindex4_fu_1513_p3 = ((addrCmp2_fu_1493_p2[0:0] === 1'b1) ? gepindex3_fu_1505_p3 : 15'd1687);

assign gepindex5_fu_1727_p2 = ($signed(15'd32764) + $signed(adjSize145_cast_fu_1712_p1));

assign gepindex6_fu_1733_p3 = ((addrCmp3_fu_1716_p2[0:0] === 1'b1) ? gepindex5_fu_1727_p2 : 15'd1687);

assign gepindex7_fu_1741_p3 = ((addrCmp4_fu_1721_p2[0:0] === 1'b1) ? gepindex6_fu_1733_p3 : 15'd1687);

assign gepindex8_fu_1916_p2 = ($signed(15'd32764) + $signed(adjSize160_cast_fu_1901_p1));

assign gepindex9_fu_1922_p3 = ((addrCmp5_fu_1905_p2[0:0] === 1'b1) ? gepindex8_fu_1916_p2 : 15'd1687);

assign gepindex_fu_902_p2 = ($signed(21'd2090396) + $signed(adjSize104_cast_fu_887_p1));

assign grp_fu_803_p1 = tmp_25_reg_2113;

assign i_op_assign_fu_1392_p2 = (32'd1 + scaledLength_0_data_reg);

assign index_fu_1429_p2 = (tmp_30_fu_1423_p2 - tmp_20_fu_1419_p2);

assign indvar1_fu_578_p1 = indvar_reg_310_pp0_iter1_reg;

assign indvar3_fu_2068_p1 = indvar2_reg_535;

assign indvar_next1_fu_2062_p2 = (indvar2_reg_535 + 11'd1);

assign indvar_next_fu_572_p2 = (ap_phi_mux_indvar_phi_fu_314_p4 + 17'd1);

assign indvars_iv_next2_fu_739_p2 = (indvars_iv4_reg_358 + 64'd8);

assign indvars_iv_next3_fu_745_p2 = (indvars_iv3_reg_334 + 64'd8);

assign indvars_iv_next4_fu_751_p2 = (indvars_iv1_reg_346 + 64'd8);

assign indvars_iv_next6_fu_780_p2 = (64'd8 + indvars_iv7_reg_393);

assign indvars_iv_next7_fu_786_p2 = (64'd8 + indvars_iv5_reg_405);

assign indvars_iv_next_fu_1404_p2 = (64'd8 + indvars_iv_reg_417);

assign mask1_fu_1860_p2 = 4'd1 << tmp_79_fu_1857_p1;

assign mask2_fu_2049_p2 = 4'd1 << tmp_99_fu_2046_p1;

assign mask_fu_1632_p2 = 4'd1 << tmp_59_fu_1629_p1;

assign mem_index_gep1_fu_1707_p2 = (14'd4 + adjSize1_reg_2379);

assign mem_index_gep2_fu_1896_p2 = (14'd4 + adjSize2_reg_2409);

assign mem_index_gep3_fu_882_p2 = (20'd6756 + adjSize3_reg_2231);

assign mem_index_gep4_fu_929_p2 = (20'd6756 + adjSize4_reg_2242);

assign mem_index_gep5_fu_1166_p2 = (20'd6756 + adjSize5_reg_2253);

assign mem_index_gep_fu_1479_p2 = (14'd4 + adjSize_reg_2350);

assign p_demorgan1_fu_1844_p2 = (tmp_77_fu_1838_p2 & tmp_76_fu_1832_p2);

assign p_demorgan2_fu_2033_p2 = (tmp_97_fu_2027_p2 & tmp_96_fu_2021_p2);

assign p_demorgan_fu_1616_p2 = (tmp_57_fu_1610_p2 & tmp_56_fu_1604_p2);

assign rollingAverage_0_V_fu_1235_p2 = (tmp_35_fu_1231_p1 + rollingAverage_V_0_3_reg_512);

assign rollingAverage_1_V_fu_1263_p2 = (tmp_39_fu_1259_p1 + rollingAverage_V_1_3_reg_500);

assign rollingAverage_2_V_fu_1386_p2 = (tmp_43_fu_1382_p1 + rollingAverage_V_2_3_reg_488);

assign scaledX_V_fu_662_p2 = (p_s_reg_370 + 7'd1);

assign scaledY_V_fu_727_p2 = (p_0194_1_reg_429 + 7'd1);

assign start_pos1_fu_1449_p3 = {{tmp_31_fu_1435_p1}, {3'd0}};

assign start_pos2_fu_1658_p3 = {{tmp_60_fu_1644_p1}, {3'd0}};

assign start_pos3_fu_1867_p3 = {{tmp_80_reg_2403}, {3'd0}};

assign start_pos4_fu_1071_p3 = {{tmp_121_reg_2237}, {3'd0}};

assign start_pos5_fu_1269_p3 = {{tmp_139_reg_2248}, {3'd0}};

assign start_pos_fu_976_p3 = {{tmp_103_reg_2226}, {3'd0}};

assign tmp_100_fu_768_p2 = windowX1_reg_477 << 64'd2;

assign tmp_101_fu_792_p2 = (indvars_iv_reg_417 - umax5_reg_2157);

assign tmp_103_fu_828_p1 = tmp_33_fu_820_p2[1:0];

assign tmp_104_fu_989_p2 = ((start_pos_fu_976_p3 > end_pos3_fu_983_p2) ? 1'b1 : 1'b0);

assign tmp_105_fu_995_p1 = start_pos_fu_976_p3;

assign tmp_106_fu_999_p1 = end_pos3_fu_983_p2;

integer ap_tvar_int_0;

always @ (sectionDataCopy_q0) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_107_fu_1003_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_107_fu_1003_p4[ap_tvar_int_0] = sectionDataCopy_q0[31 - ap_tvar_int_0];
        end
    end
end

assign tmp_108_fu_1013_p2 = (tmp_105_fu_995_p1 - tmp_106_fu_999_p1);

assign tmp_109_fu_1019_p2 = (tmp_105_fu_995_p1 ^ 6'd31);

assign tmp_10_fu_672_p2 = ((indvars_iv7_reg_393 > windowY_reg_381) ? 1'b1 : 1'b0);

assign tmp_110_fu_1025_p2 = (tmp_106_fu_999_p1 - tmp_105_fu_995_p1);

assign tmp_111_fu_1031_p3 = ((tmp_104_fu_989_p2[0:0] === 1'b1) ? tmp_108_fu_1013_p2 : tmp_110_fu_1025_p2);

assign tmp_112_fu_1039_p3 = ((tmp_104_fu_989_p2[0:0] === 1'b1) ? tmp_107_fu_1003_p4 : sectionDataCopy_q0);

assign tmp_113_fu_1047_p3 = ((tmp_104_fu_989_p2[0:0] === 1'b1) ? tmp_109_fu_1019_p2 : tmp_105_fu_995_p1);

assign tmp_114_fu_1055_p2 = (6'd31 - tmp_111_fu_1031_p3);

assign tmp_115_fu_1061_p1 = tmp_113_fu_1047_p3;

assign tmp_116_fu_1213_p1 = tmp_114_reg_2269;

assign tmp_117_fu_1065_p2 = tmp_112_fu_1039_p3 >> tmp_115_fu_1061_p1;

assign tmp_118_fu_1216_p2 = 32'd4294967295 >> tmp_116_fu_1213_p1;

assign tmp_119_fu_1222_p2 = (tmp_118_fu_1216_p2 & tmp_117_reg_2274);

assign tmp_11_fu_690_p2 = (indvars_iv_reg_417 - umax_fu_683_p3);

assign tmp_120_fu_1227_p1 = tmp_119_fu_1222_p2[7:0];

assign tmp_121_fu_848_p1 = tmp_37_fu_842_p2[1:0];

assign tmp_122_fu_1084_p2 = ((start_pos4_fu_1071_p3 > end_pos4_fu_1078_p2) ? 1'b1 : 1'b0);

assign tmp_123_fu_1090_p1 = start_pos4_fu_1071_p3;

assign tmp_124_fu_1094_p1 = end_pos4_fu_1078_p2;

integer ap_tvar_int_1;

always @ (sectionDataCopy_q1) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_125_fu_1098_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_125_fu_1098_p4[ap_tvar_int_1] = sectionDataCopy_q1[31 - ap_tvar_int_1];
        end
    end
end

assign tmp_126_fu_1108_p2 = (tmp_123_fu_1090_p1 - tmp_124_fu_1094_p1);

assign tmp_127_fu_1114_p2 = (tmp_123_fu_1090_p1 ^ 6'd31);

assign tmp_128_fu_1120_p2 = (tmp_124_fu_1094_p1 - tmp_123_fu_1090_p1);

assign tmp_129_fu_1126_p3 = ((tmp_122_fu_1084_p2[0:0] === 1'b1) ? tmp_126_fu_1108_p2 : tmp_128_fu_1120_p2);

assign tmp_12_fu_678_p2 = ((indvars_iv7_reg_393 > tmp_reg_2099) ? 1'b1 : 1'b0);

assign tmp_130_fu_1134_p3 = ((tmp_122_fu_1084_p2[0:0] === 1'b1) ? tmp_125_fu_1098_p4 : sectionDataCopy_q1);

assign tmp_131_fu_1142_p3 = ((tmp_122_fu_1084_p2[0:0] === 1'b1) ? tmp_127_fu_1114_p2 : tmp_123_fu_1090_p1);

assign tmp_132_fu_1150_p2 = (6'd31 - tmp_129_fu_1126_p3);

assign tmp_133_fu_1156_p1 = tmp_131_fu_1142_p3;

assign tmp_134_fu_1241_p1 = tmp_132_reg_2279;

assign tmp_135_fu_1160_p2 = tmp_130_fu_1134_p3 >> tmp_133_fu_1156_p1;

assign tmp_136_fu_1244_p2 = 32'd4294967295 >> tmp_134_fu_1241_p1;

assign tmp_137_fu_1250_p2 = (tmp_136_fu_1244_p2 & tmp_135_reg_2284);

assign tmp_138_fu_1255_p1 = tmp_137_fu_1250_p2[7:0];

assign tmp_139_fu_868_p1 = tmp_41_fu_862_p2[1:0];

assign tmp_13_fu_702_p2 = (indvars_iv5_reg_405 - umax4_fu_696_p3);

assign tmp_140_fu_1282_p2 = ((start_pos5_fu_1269_p3 > end_pos5_fu_1276_p2) ? 1'b1 : 1'b0);

assign tmp_141_fu_1288_p1 = start_pos5_fu_1269_p3;

assign tmp_142_fu_1292_p1 = end_pos5_fu_1276_p2;

integer ap_tvar_int_2;

always @ (sectionDataCopy_q1) begin
    for (ap_tvar_int_2 = 32 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 31 - 0) begin
            tmp_143_fu_1296_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_143_fu_1296_p4[ap_tvar_int_2] = sectionDataCopy_q1[31 - ap_tvar_int_2];
        end
    end
end

assign tmp_144_fu_1306_p2 = (tmp_141_fu_1288_p1 - tmp_142_fu_1292_p1);

assign tmp_145_fu_1312_p2 = (tmp_141_fu_1288_p1 ^ 6'd31);

assign tmp_146_fu_1318_p2 = (tmp_142_fu_1292_p1 - tmp_141_fu_1288_p1);

assign tmp_147_fu_1324_p3 = ((tmp_140_fu_1282_p2[0:0] === 1'b1) ? tmp_144_fu_1306_p2 : tmp_146_fu_1318_p2);

assign tmp_148_fu_1332_p3 = ((tmp_140_fu_1282_p2[0:0] === 1'b1) ? tmp_143_fu_1296_p4 : sectionDataCopy_q1);

assign tmp_149_fu_1340_p3 = ((tmp_140_fu_1282_p2[0:0] === 1'b1) ? tmp_145_fu_1312_p2 : tmp_141_fu_1288_p1);

assign tmp_14_fu_708_p2 = ((tmp_11_fu_690_p2 > tmp_13_fu_702_p2) ? 1'b1 : 1'b0);

assign tmp_150_fu_1348_p2 = (6'd31 - tmp_147_fu_1324_p3);

assign tmp_151_fu_1354_p1 = tmp_149_fu_1340_p3;

assign tmp_152_fu_1364_p1 = tmp_150_reg_2304;

assign tmp_153_fu_1358_p2 = tmp_148_fu_1332_p3 >> tmp_151_fu_1354_p1;

assign tmp_154_fu_1367_p2 = 32'd4294967295 >> tmp_152_fu_1364_p1;

assign tmp_155_fu_1373_p2 = (tmp_154_fu_1367_p2 & tmp_153_reg_2309);

assign tmp_156_fu_1378_p1 = tmp_155_fu_1373_p2[7:0];

assign tmp_15_fu_591_p2 = length_r_0_data_reg << 32'd2;

assign tmp_16_fu_722_p2 = ((windowY_reg_381 < tmp_reg_2099) ? 1'b1 : 1'b0);

assign tmp_19_fu_1414_p1 = tmp_19_fu_1414_p10;

assign tmp_19_fu_1414_p10 = p_0194_1_reg_429;

assign tmp_19_fu_1414_p2 = ($signed(i_op_assign_reg_2319) * $signed({{1'b0}, {tmp_19_fu_1414_p1}}));

assign tmp_1_fu_587_p1 = length_r_0_data_reg;

assign tmp_20_fu_1419_p2 = (tmp_19_reg_2334 + tmp_s_reg_2142);

assign tmp_21_fu_1469_p4 = {{rollingAverage_V_0_2_reg_465[13:6]}};

assign tmp_22_fu_597_p2 = (tmp_15_fu_591_p2 - length_r_0_data_reg);

assign tmp_23_fu_1697_p4 = {{rollingAverage_V_1_2_reg_453[13:6]}};

assign tmp_24_fu_1639_p2 = (32'd1 + index_reg_2339);

assign tmp_25_fu_603_p1 = tmp_22_fu_597_p2;

assign tmp_26_fu_1886_p4 = {{rollingAverage_V_2_2_reg_441[13:6]}};

assign tmp_27_fu_1678_p2 = (32'd2 + index_reg_2339);

assign tmp_28_fu_757_p2 = (indvars_iv4_reg_358 - umax3_reg_2128);

assign tmp_29_fu_774_p2 = (tmp_100_fu_768_p2 - windowX1_reg_477);

assign tmp_2_fu_607_p2 = ((indvars_iv3_reg_334 > windowX_reg_322) ? 1'b1 : 1'b0);

assign tmp_30_fu_1423_p2 = tmp_20_fu_1419_p2 << 32'd2;

assign tmp_31_fu_1435_p1 = index_fu_1429_p2[1:0];

assign tmp_33_fu_820_p2 = (tmp_29_reg_2193 + tmp_32_reg_2221);

assign tmp_34_fu_1463_p2 = ((start_pos1_fu_1449_p3 > end_pos_fu_1457_p2) ? 1'b1 : 1'b0);

assign tmp_35_fu_1231_p1 = tmp_120_fu_1227_p1;

assign tmp_37_fu_842_p2 = (32'd1 + current_fu_824_p1);

assign tmp_38_fu_1526_p1 = start_pos1_reg_2356;

assign tmp_39_fu_1259_p1 = tmp_138_fu_1255_p1;

assign tmp_3_fu_625_p2 = (indvars_iv4_reg_358 - umax1_fu_618_p3);

assign tmp_41_fu_862_p2 = (32'd2 + current_fu_824_p1);

assign tmp_42_fu_1529_p1 = end_pos_reg_2361;

assign tmp_43_fu_1382_p1 = tmp_156_fu_1378_p1;

assign tmp_44_fu_1532_p1 = tmp_21_fu_1469_p4;

assign tmp_45_fu_1536_p2 = (tmp_38_fu_1526_p1 ^ 6'd31);

assign tmp_46_fu_1542_p3 = ((tmp_34_reg_2366[0:0] === 1'b1) ? tmp_38_fu_1526_p1 : tmp_42_fu_1529_p1);

assign tmp_47_fu_1549_p3 = ((tmp_34_reg_2366[0:0] === 1'b1) ? tmp_42_fu_1529_p1 : tmp_38_fu_1526_p1);

assign tmp_48_fu_1556_p3 = ((tmp_34_reg_2366[0:0] === 1'b1) ? tmp_45_fu_1536_p2 : tmp_38_fu_1526_p1);

assign tmp_49_fu_1563_p2 = (tmp_46_fu_1542_p3 ^ 6'd31);

assign tmp_4_fu_613_p2 = ((indvars_iv3_reg_334 > tmp_1_reg_2106) ? 1'b1 : 1'b0);

assign tmp_50_fu_1569_p1 = tmp_48_fu_1556_p3;

assign tmp_51_fu_1573_p1 = tmp_47_fu_1549_p3;

assign tmp_52_fu_1577_p1 = tmp_49_fu_1563_p2;

assign tmp_53_fu_1581_p2 = tmp_44_fu_1532_p1 << tmp_50_fu_1569_p1;

integer ap_tvar_int_3;

always @ (tmp_53_fu_1581_p2) begin
    for (ap_tvar_int_3 = 32 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 31 - 0) begin
            tmp_54_fu_1587_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_54_fu_1587_p4[ap_tvar_int_3] = tmp_53_fu_1581_p2[31 - ap_tvar_int_3];
        end
    end
end

assign tmp_55_fu_1597_p3 = ((tmp_34_reg_2366[0:0] === 1'b1) ? tmp_54_fu_1587_p4 : tmp_53_fu_1581_p2);

assign tmp_56_fu_1604_p2 = 32'd4294967295 << tmp_51_fu_1573_p1;

assign tmp_57_fu_1610_p2 = 32'd4294967295 >> tmp_52_fu_1577_p1;

assign tmp_58_fu_1622_p2 = (tmp_55_fu_1597_p3 & p_demorgan_fu_1616_p2);

assign tmp_59_fu_1629_p1 = tmp_31_reg_2345;

assign tmp_5_fu_637_p2 = (indvars_iv1_reg_346 - umax2_fu_631_p3);

assign tmp_60_fu_1644_p1 = tmp_24_fu_1639_p2[1:0];

assign tmp_61_fu_1672_p2 = ((start_pos2_fu_1658_p3 > end_pos1_fu_1666_p2) ? 1'b1 : 1'b0);

assign tmp_62_fu_1754_p1 = start_pos2_reg_2385;

assign tmp_63_fu_1757_p1 = end_pos1_reg_2390;

assign tmp_64_fu_1760_p1 = tmp_23_fu_1697_p4;

assign tmp_65_fu_1764_p2 = (tmp_62_fu_1754_p1 ^ 6'd31);

assign tmp_66_fu_1770_p3 = ((tmp_61_reg_2395[0:0] === 1'b1) ? tmp_62_fu_1754_p1 : tmp_63_fu_1757_p1);

assign tmp_67_fu_1777_p3 = ((tmp_61_reg_2395[0:0] === 1'b1) ? tmp_63_fu_1757_p1 : tmp_62_fu_1754_p1);

assign tmp_68_fu_1784_p3 = ((tmp_61_reg_2395[0:0] === 1'b1) ? tmp_65_fu_1764_p2 : tmp_62_fu_1754_p1);

assign tmp_69_fu_1791_p2 = (tmp_66_fu_1770_p3 ^ 6'd31);

assign tmp_6_fu_643_p2 = ((tmp_3_fu_625_p2 > tmp_5_fu_637_p2) ? 1'b1 : 1'b0);

assign tmp_70_fu_1797_p1 = tmp_68_fu_1784_p3;

assign tmp_71_fu_1801_p1 = tmp_67_fu_1777_p3;

assign tmp_72_fu_1805_p1 = tmp_69_fu_1791_p2;

assign tmp_73_fu_1809_p2 = tmp_64_fu_1760_p1 << tmp_70_fu_1797_p1;

integer ap_tvar_int_4;

always @ (tmp_73_fu_1809_p2) begin
    for (ap_tvar_int_4 = 32 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 31 - 0) begin
            tmp_74_fu_1815_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_74_fu_1815_p4[ap_tvar_int_4] = tmp_73_fu_1809_p2[31 - ap_tvar_int_4];
        end
    end
end

assign tmp_75_fu_1825_p3 = ((tmp_61_reg_2395[0:0] === 1'b1) ? tmp_74_fu_1815_p4 : tmp_73_fu_1809_p2);

assign tmp_76_fu_1832_p2 = 32'd4294967295 << tmp_71_fu_1801_p1;

assign tmp_77_fu_1838_p2 = 32'd4294967295 >> tmp_72_fu_1805_p1;

assign tmp_78_fu_1850_p2 = (tmp_75_fu_1825_p3 & p_demorgan1_fu_1844_p2);

assign tmp_79_fu_1857_p1 = tmp_60_reg_2374;

assign tmp_7_fu_556_p1 = ram1_reg_2073;

assign tmp_80_fu_1683_p1 = tmp_27_fu_1678_p2[1:0];

assign tmp_81_fu_1880_p2 = ((start_pos3_fu_1867_p3 > end_pos2_fu_1874_p2) ? 1'b1 : 1'b0);

assign tmp_82_fu_1943_p1 = start_pos3_reg_2415;

assign tmp_83_fu_1946_p1 = end_pos2_reg_2420;

assign tmp_84_fu_1949_p1 = tmp_26_fu_1886_p4;

assign tmp_85_fu_1953_p2 = (tmp_82_fu_1943_p1 ^ 6'd31);

assign tmp_86_fu_1959_p3 = ((tmp_81_reg_2425[0:0] === 1'b1) ? tmp_82_fu_1943_p1 : tmp_83_fu_1946_p1);

assign tmp_87_fu_1966_p3 = ((tmp_81_reg_2425[0:0] === 1'b1) ? tmp_83_fu_1946_p1 : tmp_82_fu_1943_p1);

assign tmp_88_fu_1973_p3 = ((tmp_81_reg_2425[0:0] === 1'b1) ? tmp_85_fu_1953_p2 : tmp_82_fu_1943_p1);

assign tmp_89_fu_1980_p2 = (tmp_86_fu_1959_p3 ^ 6'd31);

assign tmp_90_fu_1986_p1 = tmp_88_fu_1973_p3;

assign tmp_91_fu_1990_p1 = tmp_87_fu_1966_p3;

assign tmp_92_fu_1994_p1 = tmp_89_fu_1980_p2;

assign tmp_93_fu_1998_p2 = tmp_84_fu_1949_p1 << tmp_90_fu_1986_p1;

integer ap_tvar_int_5;

always @ (tmp_93_fu_1998_p2) begin
    for (ap_tvar_int_5 = 32 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 31 - 0) begin
            tmp_94_fu_2004_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            tmp_94_fu_2004_p4[ap_tvar_int_5] = tmp_93_fu_1998_p2[31 - ap_tvar_int_5];
        end
    end
end

assign tmp_95_fu_2014_p3 = ((tmp_81_reg_2425[0:0] === 1'b1) ? tmp_94_fu_2004_p4 : tmp_93_fu_1998_p2);

assign tmp_96_fu_2021_p2 = 32'd4294967295 << tmp_91_fu_1990_p1;

assign tmp_97_fu_2027_p2 = 32'd4294967295 >> tmp_92_fu_1994_p1;

assign tmp_98_fu_2039_p2 = (tmp_95_fu_2014_p3 & p_demorgan2_fu_2033_p2);

assign tmp_99_fu_2046_p1 = tmp_80_reg_2403;

assign tmp_9_fu_657_p2 = ((windowX_reg_322 < tmp_1_reg_2106) ? 1'b1 : 1'b0);

assign tmp_fu_583_p1 = height_0_data_reg;

assign tmp_s_fu_668_p1 = p_s_reg_370;

assign umax1_fu_618_p3 = ((tmp_2_reg_2118[0:0] === 1'b1) ? indvars_iv3_reg_334 : windowX_reg_322);

assign umax2_fu_631_p3 = ((tmp_4_reg_2123[0:0] === 1'b1) ? indvars_iv3_reg_334 : tmp_1_reg_2106);

assign umax3_fu_649_p3 = ((tmp_6_fu_643_p2[0:0] === 1'b1) ? tmp_3_fu_625_p2 : tmp_5_fu_637_p2);

assign umax4_fu_696_p3 = ((tmp_12_reg_2152[0:0] === 1'b1) ? indvars_iv7_reg_393 : tmp_reg_2099);

assign umax5_fu_714_p3 = ((tmp_14_fu_708_p2[0:0] === 1'b1) ? tmp_11_fu_690_p2 : tmp_13_fu_702_p2);

assign umax_fu_683_p3 = ((tmp_10_reg_2147[0:0] === 1'b1) ? indvars_iv7_reg_393 : windowY_reg_381);

assign windowX_1_fu_814_p2 = (windowX1_reg_477 + 64'd1);

assign windowY_1_fu_808_p2 = ($signed(64'd1) + $signed(windowY1_reg_524));

assign x_fu_733_p2 = (windowX_reg_322 + 64'd8);

assign y_fu_1398_p2 = (64'd8 + windowY_reg_381);

always @ (posedge ap_clk) begin
    MAXI_addr_reg_2078[31:30] <= 2'b00;
    tmp_reg_2099[63:32] <= 32'b00000000000000000000000000000000;
    tmp_1_reg_2106[63:32] <= 32'b00000000000000000000000000000000;
    tmp_25_reg_2113[63:32] <= 32'b00000000000000000000000000000000;
    tmp_s_reg_2142[31:7] <= 25'b0000000000000000000000000;
    tmp_114_reg_2269[0] <= 1'b0;
    tmp_132_reg_2279[0] <= 1'b0;
    tmp_150_reg_2304[0] <= 1'b0;
    start_pos1_reg_2356[2:0] <= 3'b000;
    end_pos_reg_2361[2:0] <= 3'b111;
    start_pos2_reg_2385[2:0] <= 3'b000;
    end_pos1_reg_2390[2:0] <= 3'b111;
    start_pos3_reg_2415[2:0] <= 3'b000;
    end_pos2_reg_2420[2:0] <= 3'b111;
end

endmodule //toplevel
