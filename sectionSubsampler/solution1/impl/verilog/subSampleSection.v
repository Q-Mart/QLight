// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="subSampleSection,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=7.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.562500,HLS_SYN_LAT=9692,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=4,HLS_SYN_FF=1468,HLS_SYN_LUT=2806,HLS_VERSION=2018_2_1}" *)

module subSampleSection (
        ap_clk,
        ap_rst_n,
        m_axi_MAXI_AWVALID,
        m_axi_MAXI_AWREADY,
        m_axi_MAXI_AWADDR,
        m_axi_MAXI_AWID,
        m_axi_MAXI_AWLEN,
        m_axi_MAXI_AWSIZE,
        m_axi_MAXI_AWBURST,
        m_axi_MAXI_AWLOCK,
        m_axi_MAXI_AWCACHE,
        m_axi_MAXI_AWPROT,
        m_axi_MAXI_AWQOS,
        m_axi_MAXI_AWREGION,
        m_axi_MAXI_AWUSER,
        m_axi_MAXI_WVALID,
        m_axi_MAXI_WREADY,
        m_axi_MAXI_WDATA,
        m_axi_MAXI_WSTRB,
        m_axi_MAXI_WLAST,
        m_axi_MAXI_WID,
        m_axi_MAXI_WUSER,
        m_axi_MAXI_ARVALID,
        m_axi_MAXI_ARREADY,
        m_axi_MAXI_ARADDR,
        m_axi_MAXI_ARID,
        m_axi_MAXI_ARLEN,
        m_axi_MAXI_ARSIZE,
        m_axi_MAXI_ARBURST,
        m_axi_MAXI_ARLOCK,
        m_axi_MAXI_ARCACHE,
        m_axi_MAXI_ARPROT,
        m_axi_MAXI_ARQOS,
        m_axi_MAXI_ARREGION,
        m_axi_MAXI_ARUSER,
        m_axi_MAXI_RVALID,
        m_axi_MAXI_RREADY,
        m_axi_MAXI_RDATA,
        m_axi_MAXI_RLAST,
        m_axi_MAXI_RID,
        m_axi_MAXI_RUSER,
        m_axi_MAXI_RRESP,
        m_axi_MAXI_BVALID,
        m_axi_MAXI_BREADY,
        m_axi_MAXI_BRESP,
        m_axi_MAXI_BID,
        m_axi_MAXI_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_pp0_stage0 = 20'd16384;
parameter    ap_ST_fsm_state18 = 20'd32768;
parameter    ap_ST_fsm_state19 = 20'd65536;
parameter    ap_ST_fsm_state20 = 20'd131072;
parameter    ap_ST_fsm_state21 = 20'd262144;
parameter    ap_ST_fsm_state22 = 20'd524288;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MAXI_ID_WIDTH = 1;
parameter    C_M_AXI_MAXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_MAXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MAXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_USER_VALUE = 0;
parameter    C_M_AXI_MAXI_PROT_VALUE = 0;
parameter    C_M_AXI_MAXI_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MAXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_MAXI_AWVALID;
input   m_axi_MAXI_AWREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_AWADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_AWID;
output  [7:0] m_axi_MAXI_AWLEN;
output  [2:0] m_axi_MAXI_AWSIZE;
output  [1:0] m_axi_MAXI_AWBURST;
output  [1:0] m_axi_MAXI_AWLOCK;
output  [3:0] m_axi_MAXI_AWCACHE;
output  [2:0] m_axi_MAXI_AWPROT;
output  [3:0] m_axi_MAXI_AWQOS;
output  [3:0] m_axi_MAXI_AWREGION;
output  [C_M_AXI_MAXI_AWUSER_WIDTH - 1:0] m_axi_MAXI_AWUSER;
output   m_axi_MAXI_WVALID;
input   m_axi_MAXI_WREADY;
output  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_WDATA;
output  [C_M_AXI_MAXI_WSTRB_WIDTH - 1:0] m_axi_MAXI_WSTRB;
output   m_axi_MAXI_WLAST;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_WID;
output  [C_M_AXI_MAXI_WUSER_WIDTH - 1:0] m_axi_MAXI_WUSER;
output   m_axi_MAXI_ARVALID;
input   m_axi_MAXI_ARREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_ARADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_ARID;
output  [7:0] m_axi_MAXI_ARLEN;
output  [2:0] m_axi_MAXI_ARSIZE;
output  [1:0] m_axi_MAXI_ARBURST;
output  [1:0] m_axi_MAXI_ARLOCK;
output  [3:0] m_axi_MAXI_ARCACHE;
output  [2:0] m_axi_MAXI_ARPROT;
output  [3:0] m_axi_MAXI_ARQOS;
output  [3:0] m_axi_MAXI_ARREGION;
output  [C_M_AXI_MAXI_ARUSER_WIDTH - 1:0] m_axi_MAXI_ARUSER;
input   m_axi_MAXI_RVALID;
output   m_axi_MAXI_RREADY;
input  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_RDATA;
input   m_axi_MAXI_RLAST;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_RID;
input  [C_M_AXI_MAXI_RUSER_WIDTH - 1:0] m_axi_MAXI_RUSER;
input  [1:0] m_axi_MAXI_RRESP;
input   m_axi_MAXI_BVALID;
output   m_axi_MAXI_BREADY;
input  [1:0] m_axi_MAXI_BRESP;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_BID;
input  [C_M_AXI_MAXI_BUSER_WIDTH - 1:0] m_axi_MAXI_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] factor;
reg   [31:0] factor_0_data_reg;
reg    factor_0_vld_reg;
reg    factor_0_ack_out;
wire   [31:0] length_r;
reg   [31:0] length_r_0_data_reg;
reg    length_r_0_vld_reg;
reg    length_r_0_ack_out;
wire   [31:0] height;
reg   [31:0] height_0_data_reg;
reg    height_0_vld_reg;
reg    height_0_ack_out;
wire   [31:0] in_r;
wire   [31:0] out_r;
reg   [12:0] outCache_address0;
reg    outCache_ce0;
reg    outCache_we0;
reg   [0:0] outCache_d0;
reg   [12:0] outCache_address1;
reg    outCache_ce1;
reg    outCache_we1;
reg   [0:0] outCache_d1;
wire   [0:0] outCache_q1;
wire   [31:0] ap_return;
reg    MAXI_blk_n_AW;
wire    ap_CS_fsm_state13;
reg   [0:0] tmp_2_reg_857;
reg   [0:0] tmp_2_1_reg_878;
reg   [0:0] tmp_2_2_reg_882;
reg   [0:0] tmp_2_3_reg_910;
reg   [0:0] tmp_2_4_reg_937;
reg    MAXI_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_961;
reg   [0:0] exitcond_reg_961_pp0_iter1_reg;
reg    MAXI_blk_n_B;
wire    ap_CS_fsm_state22;
reg    MAXI_AWVALID;
wire    MAXI_AWREADY;
reg    MAXI_WVALID;
wire    MAXI_WREADY;
wire   [31:0] MAXI_WDATA;
wire    MAXI_ARREADY;
wire    MAXI_RVALID;
wire   [31:0] MAXI_RDATA;
wire    MAXI_RLAST;
wire   [0:0] MAXI_RID;
wire   [0:0] MAXI_RUSER;
wire   [1:0] MAXI_RRESP;
wire    MAXI_BVALID;
reg    MAXI_BREADY;
wire   [1:0] MAXI_BRESP;
wire   [0:0] MAXI_BID;
wire   [0:0] MAXI_BUSER;
reg   [12:0] indvar_reg_339;
reg   [31:0] MAXI_addr_reg_813;
wire   [7:0] inPtr_V_fu_386_p1;
reg   [7:0] inPtr_V_reg_819;
reg  signed [31:0] height_read_reg_838;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp_fu_396_p2;
reg  signed [31:0] tmp_reg_843;
wire   [31:0] grp_fu_402_p2;
reg   [31:0] tmp_1_reg_848;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_2_fu_406_p2;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp_5_fu_480_p2;
reg   [31:0] tmp_5_reg_861;
wire    ap_CS_fsm_state8;
wire   [31:0] i_1_fu_486_p2;
reg   [31:0] i_1_reg_869;
wire   [0:0] tmp_2_1_fu_498_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_2_2_fu_572_p2;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_15_fu_596_p3;
reg   [0:0] tmp_15_reg_886;
wire   [0:0] tmp_16_fu_609_p3;
reg   [0:0] tmp_16_reg_891;
wire   [31:0] i_1_2_fu_616_p2;
reg   [31:0] i_1_2_reg_896;
wire   [31:0] outIndex_2_2_fu_621_p2;
reg   [31:0] outIndex_2_2_reg_905;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_2_3_fu_649_p2;
wire   [0:0] tmp_17_fu_653_p3;
reg   [0:0] tmp_17_reg_914;
wire   [0:0] tmp_18_fu_664_p3;
reg   [0:0] tmp_18_reg_919;
wire   [0:0] tmp_19_fu_676_p3;
reg   [0:0] tmp_19_reg_924;
wire   [31:0] i_1_3_fu_683_p2;
reg   [31:0] i_1_3_reg_929;
wire   [0:0] tmp_2_4_fu_687_p2;
wire   [0:0] tmp_21_fu_741_p3;
reg   [0:0] tmp_21_reg_941;
reg    ap_sig_ioackin_MAXI_AWREADY;
reg    ap_predicate_op153_writereq_state13;
reg    ap_block_state13_io;
wire   [0:0] tmp_22_fu_753_p3;
reg   [0:0] tmp_22_reg_946;
wire   [31:0] i_1_4_fu_760_p2;
reg   [31:0] i_1_4_reg_951;
wire   [31:0] outIndex_2_4_fu_764_p2;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond_fu_792_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state15_pp0_stage0_iter0;
wire    ap_block_state16_pp0_stage0_iter1;
wire    ap_block_state17_pp0_stage0_iter2;
reg    ap_sig_ioackin_MAXI_WREADY;
reg    ap_block_state17_io;
reg    ap_block_pp0_stage0_11001;
wire   [12:0] indvar_next_fu_798_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] outCache_load_reg_975;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state15;
reg   [31:0] outIndex_reg_315;
reg   [31:0] i_reg_327;
wire   [63:0] tmp_9_fu_419_p1;
wire   [63:0] tmp_9_0_1_fu_444_p1;
wire   [63:0] tmp_9_0_2_fu_469_p1;
wire   [63:0] tmp_9_1_fu_509_p1;
wire   [63:0] tmp_9_1_1_fu_533_p1;
wire   [63:0] tmp_9_1_2_fu_563_p1;
wire   [63:0] tmp_9_2_fu_585_p1;
wire   [63:0] tmp_9_2_1_fu_633_p1;
wire   [63:0] tmp_9_2_2_fu_644_p1;
wire   [63:0] tmp_9_3_fu_692_p1;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_9_3_1_fu_702_p1;
wire   [63:0] tmp_9_3_2_fu_719_p1;
wire   [63:0] tmp_9_4_fu_731_p1;
wire   [63:0] tmp_9_4_1_fu_776_p1;
wire   [63:0] tmp_9_4_2_fu_787_p1;
wire   [63:0] indvar1_fu_804_p1;
wire   [63:0] tmp_3_fu_360_p1;
reg    ap_reg_ioackin_MAXI_AWREADY;
reg    ap_reg_ioackin_MAXI_WREADY;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_6_fu_411_p3;
wire   [0:0] tmp_7_fu_436_p3;
wire   [0:0] tmp_8_fu_461_p3;
wire   [0:0] tmp_11_fu_502_p3;
wire   [0:0] tmp_12_fu_525_p3;
wire   [0:0] tmp_13_fu_555_p3;
wire   [0:0] tmp_14_fu_577_p3;
wire   [0:0] tmp_20_fu_724_p3;
wire   [29:0] out3_fu_350_p4;
wire   [3:0] adjSize_fu_370_p4;
wire   [0:0] ptr_cmp_fu_380_p2;
wire   [31:0] tmp_4_fu_390_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] index_assign_0_1_fu_430_p2;
wire   [31:0] tmp_s_fu_424_p2;
wire   [31:0] index_assign_0_2_fu_455_p2;
wire   [31:0] tmp_0_1_fu_449_p2;
wire   [31:0] tmp_10_fu_474_p2;
wire   [31:0] outIndex_2_fu_492_p2;
wire   [31:0] index_assign_1_1_fu_520_p2;
wire   [31:0] tmp_1_4_fu_514_p2;
wire   [31:0] index_assign_1_2_fu_550_p2;
wire   [31:0] tmp_1_1_fu_544_p2;
wire   [31:0] i_1_1_fu_568_p2;
wire   [31:0] outIndex_2_1_fu_538_p2;
wire   [31:0] index_assign_2_1_fu_590_p2;
wire   [31:0] index_assign_2_2_fu_603_p2;
wire   [31:0] tmp_2_5_fu_627_p2;
wire   [31:0] tmp_2_1_6_fu_638_p2;
wire   [31:0] index_assign_3_1_fu_659_p2;
wire   [31:0] index_assign_3_2_fu_671_p2;
wire   [31:0] tmp_3_7_fu_696_p2;
wire   [31:0] tmp_3_1_fu_713_p2;
wire   [31:0] outIndex_2_3_fu_707_p2;
wire   [31:0] index_assign_4_1_fu_736_p2;
wire   [31:0] index_assign_4_2_fu_748_p2;
wire   [31:0] tmp_4_8_fu_770_p2;
wire   [31:0] tmp_4_1_fu_781_p2;
wire    ap_CS_fsm_state21;
reg   [19:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
#0 factor_0_data_reg = 32'd0;
#0 factor_0_vld_reg = 1'b0;
#0 length_r_0_data_reg = 32'd0;
#0 length_r_0_vld_reg = 1'b0;
#0 height_0_data_reg = 32'd0;
#0 height_0_vld_reg = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_MAXI_AWREADY = 1'b0;
#0 ap_reg_ioackin_MAXI_WREADY = 1'b0;
end

subSampleSection_bkb #(
    .DataWidth( 1 ),
    .AddressRange( 6750 ),
    .AddressWidth( 13 ))
outCache_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(outCache_address0),
    .ce0(outCache_ce0),
    .we0(outCache_we0),
    .d0(outCache_d0),
    .address1(outCache_address1),
    .ce1(outCache_ce1),
    .we1(outCache_we1),
    .d1(outCache_d1),
    .q1(outCache_q1)
);

subSampleSection_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
subSampleSection_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .factor(factor),
    .length_r(length_r),
    .height(height),
    .in_r(in_r),
    .out_r(out_r)
);

subSampleSection_MAXI_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MAXI_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MAXI_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MAXI_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MAXI_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MAXI_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MAXI_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MAXI_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MAXI_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MAXI_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MAXI_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MAXI_CACHE_VALUE ))
subSampleSection_MAXI_m_axi_U(
    .AWVALID(m_axi_MAXI_AWVALID),
    .AWREADY(m_axi_MAXI_AWREADY),
    .AWADDR(m_axi_MAXI_AWADDR),
    .AWID(m_axi_MAXI_AWID),
    .AWLEN(m_axi_MAXI_AWLEN),
    .AWSIZE(m_axi_MAXI_AWSIZE),
    .AWBURST(m_axi_MAXI_AWBURST),
    .AWLOCK(m_axi_MAXI_AWLOCK),
    .AWCACHE(m_axi_MAXI_AWCACHE),
    .AWPROT(m_axi_MAXI_AWPROT),
    .AWQOS(m_axi_MAXI_AWQOS),
    .AWREGION(m_axi_MAXI_AWREGION),
    .AWUSER(m_axi_MAXI_AWUSER),
    .WVALID(m_axi_MAXI_WVALID),
    .WREADY(m_axi_MAXI_WREADY),
    .WDATA(m_axi_MAXI_WDATA),
    .WSTRB(m_axi_MAXI_WSTRB),
    .WLAST(m_axi_MAXI_WLAST),
    .WID(m_axi_MAXI_WID),
    .WUSER(m_axi_MAXI_WUSER),
    .ARVALID(m_axi_MAXI_ARVALID),
    .ARREADY(m_axi_MAXI_ARREADY),
    .ARADDR(m_axi_MAXI_ARADDR),
    .ARID(m_axi_MAXI_ARID),
    .ARLEN(m_axi_MAXI_ARLEN),
    .ARSIZE(m_axi_MAXI_ARSIZE),
    .ARBURST(m_axi_MAXI_ARBURST),
    .ARLOCK(m_axi_MAXI_ARLOCK),
    .ARCACHE(m_axi_MAXI_ARCACHE),
    .ARPROT(m_axi_MAXI_ARPROT),
    .ARQOS(m_axi_MAXI_ARQOS),
    .ARREGION(m_axi_MAXI_ARREGION),
    .ARUSER(m_axi_MAXI_ARUSER),
    .RVALID(m_axi_MAXI_RVALID),
    .RREADY(m_axi_MAXI_RREADY),
    .RDATA(m_axi_MAXI_RDATA),
    .RLAST(m_axi_MAXI_RLAST),
    .RID(m_axi_MAXI_RID),
    .RUSER(m_axi_MAXI_RUSER),
    .RRESP(m_axi_MAXI_RRESP),
    .BVALID(m_axi_MAXI_BVALID),
    .BREADY(m_axi_MAXI_BREADY),
    .BRESP(m_axi_MAXI_BRESP),
    .BID(m_axi_MAXI_BID),
    .BUSER(m_axi_MAXI_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(MAXI_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(MAXI_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(MAXI_RDATA),
    .I_RID(MAXI_RID),
    .I_RUSER(MAXI_RUSER),
    .I_RRESP(MAXI_RRESP),
    .I_RLAST(MAXI_RLAST),
    .I_AWVALID(MAXI_AWVALID),
    .I_AWREADY(MAXI_AWREADY),
    .I_AWADDR(MAXI_addr_reg_813),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6750),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(MAXI_WVALID),
    .I_WREADY(MAXI_WREADY),
    .I_WDATA(MAXI_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(MAXI_BVALID),
    .I_BREADY(MAXI_BREADY),
    .I_BRESP(MAXI_BRESP),
    .I_BID(MAXI_BID),
    .I_BUSER(MAXI_BUSER)
);

subSampleSection_cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
subSampleSection_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(height_read_reg_838),
    .din1(tmp_reg_843),
    .ce(1'b1),
    .dout(grp_fu_402_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13) & ((tmp_2_4_reg_937 == 1'd0) | (tmp_2_3_reg_910 == 1'd0) | (tmp_2_2_reg_882 == 1'd0) | (tmp_2_1_reg_878 == 1'd0) | (tmp_2_reg_857 == 1'd0)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state15)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state15);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13) & ((tmp_2_4_reg_937 == 1'd0) | (tmp_2_3_reg_910 == 1'd0) | (tmp_2_2_reg_882 == 1'd0) | (tmp_2_1_reg_878 == 1'd0) | (tmp_2_reg_857 == 1'd0)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_MAXI_AWREADY <= 1'b0;
    end else begin
        if (((ap_predicate_op153_writereq_state13 == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
            if ((1'b0 == ap_block_state13_io)) begin
                ap_reg_ioackin_MAXI_AWREADY <= 1'b0;
            end else if ((1'b1 == MAXI_AWREADY)) begin
                ap_reg_ioackin_MAXI_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_MAXI_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_961_pp0_iter1_reg == 1'd0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_MAXI_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == MAXI_WREADY))) begin
                ap_reg_ioackin_MAXI_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_reg_327 <= i_1_4_reg_951;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_327 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13) & ((tmp_2_4_reg_937 == 1'd0) | (tmp_2_3_reg_910 == 1'd0) | (tmp_2_2_reg_882 == 1'd0) | (tmp_2_1_reg_878 == 1'd0) | (tmp_2_reg_857 == 1'd0)))) begin
        indvar_reg_339 <= 13'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_fu_792_p2 == 1'd0))) begin
        indvar_reg_339 <= indvar_next_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        outIndex_reg_315 <= outIndex_2_4_fu_764_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        outIndex_reg_315 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        MAXI_addr_reg_813[29 : 0] <= tmp_3_fu_360_p1[29 : 0];
        inPtr_V_reg_819[0] <= inPtr_V_fu_386_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_961 <= exitcond_fu_792_p2;
        exitcond_reg_961_pp0_iter1_reg <= exitcond_reg_961;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (factor_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (factor_0_vld_reg == 1'b1) & (factor_0_ack_out == 1'b1)))) begin
        factor_0_data_reg <= factor;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (height_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (height_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (height_0_vld_reg == 1'b1)))) begin
        height_0_data_reg <= height;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        height_read_reg_838 <= height_0_data_reg;
        tmp_reg_843 <= tmp_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_2_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_1_2_reg_896 <= i_1_2_fu_616_p2;
        tmp_15_reg_886 <= tmp_15_fu_596_p3;
        tmp_16_reg_891 <= tmp_16_fu_609_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_3_fu_649_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_1_3_reg_929 <= i_1_3_fu_683_p2;
        tmp_17_reg_914 <= tmp_17_fu_653_p3;
        tmp_18_reg_919 <= tmp_18_fu_664_p3;
        tmp_19_reg_924 <= tmp_19_fu_676_p3;
        tmp_2_4_reg_937 <= tmp_2_4_fu_687_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state13_io) & (tmp_2_4_reg_937 == 1'd1) & (1'b1 == ap_CS_fsm_state13) & (tmp_2_3_reg_910 == 1'd1) & (tmp_2_2_reg_882 == 1'd1) & (tmp_2_1_reg_878 == 1'd1) & (tmp_2_reg_857 == 1'd1))) begin
        i_1_4_reg_951 <= i_1_4_fu_760_p2;
        tmp_21_reg_941 <= tmp_21_fu_741_p3;
        tmp_22_reg_946 <= tmp_22_fu_753_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_869 <= i_1_fu_486_p2;
        tmp_5_reg_861 <= tmp_5_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (length_r_0_vld_reg == 1'b1)))) begin
        length_r_0_data_reg <= length_r;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_961 == 1'd0))) begin
        outCache_load_reg_975 <= outCache_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        outIndex_2_2_reg_905 <= outIndex_2_2_fu_621_p2;
        tmp_2_3_reg_910 <= tmp_2_3_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_1_reg_848 <= grp_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_2_1_reg_878 <= tmp_2_1_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_2_2_reg_882 <= tmp_2_2_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_2_reg_857 <= tmp_2_fu_406_p2;
    end
end

always @ (*) begin
    if (((ap_predicate_op153_writereq_state13 == 1'b1) & (ap_reg_ioackin_MAXI_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
        MAXI_AWVALID = 1'b1;
    end else begin
        MAXI_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
        MAXI_BREADY = 1'b1;
    end else begin
        MAXI_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_MAXI_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_961_pp0_iter1_reg == 1'd0))) begin
        MAXI_WVALID = 1'b1;
    end else begin
        MAXI_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & ((tmp_2_4_reg_937 == 1'd0) | (tmp_2_3_reg_910 == 1'd0) | (tmp_2_2_reg_882 == 1'd0) | (tmp_2_1_reg_878 == 1'd0) | (tmp_2_reg_857 == 1'd0)))) begin
        MAXI_blk_n_AW = m_axi_MAXI_AWREADY;
    end else begin
        MAXI_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        MAXI_blk_n_B = m_axi_MAXI_BVALID;
    end else begin
        MAXI_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_961_pp0_iter1_reg == 1'd0))) begin
        MAXI_blk_n_W = m_axi_MAXI_WREADY;
    end else begin
        MAXI_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_792_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_MAXI_AWREADY == 1'b0)) begin
        ap_sig_ioackin_MAXI_AWREADY = MAXI_AWREADY;
    end else begin
        ap_sig_ioackin_MAXI_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_MAXI_WREADY == 1'b0)) begin
        ap_sig_ioackin_MAXI_WREADY = MAXI_WREADY;
    end else begin
        ap_sig_ioackin_MAXI_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
        factor_0_ack_out = 1'b1;
    end else begin
        factor_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
        height_0_ack_out = 1'b1;
    end else begin
        height_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
        length_r_0_ack_out = 1'b1;
    end else begin
        length_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        outCache_address0 = tmp_9_4_2_fu_787_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        outCache_address0 = tmp_9_4_fu_731_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        outCache_address0 = tmp_9_3_1_fu_702_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        outCache_address0 = tmp_9_2_2_fu_644_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        outCache_address0 = tmp_9_2_fu_585_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        outCache_address0 = tmp_9_1_1_fu_533_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        outCache_address0 = tmp_9_0_1_fu_444_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        outCache_address0 = tmp_9_fu_419_p1;
    end else begin
        outCache_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outCache_address1 = indvar1_fu_804_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        outCache_address1 = tmp_9_4_1_fu_776_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        outCache_address1 = tmp_9_3_2_fu_719_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        outCache_address1 = tmp_9_3_fu_692_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        outCache_address1 = tmp_9_2_1_fu_633_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        outCache_address1 = tmp_9_1_2_fu_563_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        outCache_address1 = tmp_9_1_fu_509_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        outCache_address1 = tmp_9_0_2_fu_469_p1;
    end else begin
        outCache_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)))) begin
        outCache_ce0 = 1'b1;
    end else begin
        outCache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)))) begin
        outCache_ce1 = 1'b1;
    end else begin
        outCache_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        outCache_d0 = tmp_22_reg_946;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        outCache_d0 = tmp_20_fu_724_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        outCache_d0 = tmp_18_reg_919;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        outCache_d0 = tmp_16_reg_891;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        outCache_d0 = tmp_14_fu_577_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        outCache_d0 = tmp_12_fu_525_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        outCache_d0 = tmp_7_fu_436_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        outCache_d0 = tmp_6_fu_411_p3;
    end else begin
        outCache_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        outCache_d1 = tmp_21_reg_941;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        outCache_d1 = tmp_19_reg_924;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        outCache_d1 = tmp_17_reg_914;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        outCache_d1 = tmp_15_reg_886;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        outCache_d1 = tmp_13_fu_555_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        outCache_d1 = tmp_11_fu_502_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        outCache_d1 = tmp_8_fu_461_p3;
    end else begin
        outCache_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | ((tmp_2_2_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((tmp_2_1_fu_498_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((tmp_2_fu_406_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((1'b0 == ap_block_state13_io) & (tmp_2_4_reg_937 == 1'd1) & (1'b1 == ap_CS_fsm_state13) & (tmp_2_3_reg_910 == 1'd1) & (tmp_2_2_reg_882 == 1'd1) & (tmp_2_1_reg_878 == 1'd1) & (tmp_2_reg_857 == 1'd1)))) begin
        outCache_we0 = 1'b1;
    end else begin
        outCache_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | ((tmp_2_1_fu_498_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13) & (tmp_2_3_reg_910 == 1'd1) & (tmp_2_2_reg_882 == 1'd1) & (tmp_2_1_reg_878 == 1'd1) & (tmp_2_reg_857 == 1'd1)))) begin
        outCache_we1 = 1'b1;
    end else begin
        outCache_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_2_fu_406_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_2_1_fu_498_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_2_2_fu_572_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (tmp_2_3_fu_649_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13) & ((tmp_2_4_reg_937 == 1'd0) | (tmp_2_3_reg_910 == 1'd0) | (tmp_2_2_reg_882 == 1'd0) | (tmp_2_1_reg_878 == 1'd0) | (tmp_2_reg_857 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_state13_io) & (tmp_2_4_reg_937 == 1'd1) & (1'b1 == ap_CS_fsm_state13) & (tmp_2_3_reg_910 == 1'd1) & (tmp_2_2_reg_882 == 1'd1) & (tmp_2_1_reg_878 == 1'd1) & (tmp_2_reg_857 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_fu_792_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_fu_792_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MAXI_WDATA = outCache_load_reg_975;

assign adjSize_fu_370_p4 = {{in_r[5:2]}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state13_io = ((ap_predicate_op153_writereq_state13 == 1'b1) & (ap_sig_ioackin_MAXI_AWREADY == 1'b0));
end

assign ap_block_state15_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((ap_sig_ioackin_MAXI_WREADY == 1'b0) & (exitcond_reg_961_pp0_iter1_reg == 1'd0));
end

assign ap_block_state17_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op153_writereq_state13 = ((tmp_2_4_reg_937 == 1'd0) | (tmp_2_3_reg_910 == 1'd0) | (tmp_2_2_reg_882 == 1'd0) | (tmp_2_1_reg_878 == 1'd0) | (tmp_2_reg_857 == 1'd0));
end

assign ap_return = 32'd2;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_792_p2 = ((indvar_reg_339 == 13'd6750) ? 1'b1 : 1'b0);

assign i_1_1_fu_568_p2 = (tmp_5_reg_861 + i_1_reg_869);

assign i_1_2_fu_616_p2 = (tmp_5_reg_861 + i_1_1_fu_568_p2);

assign i_1_3_fu_683_p2 = (tmp_5_reg_861 + i_1_2_reg_896);

assign i_1_4_fu_760_p2 = (tmp_5_reg_861 + i_1_3_reg_929);

assign i_1_fu_486_p2 = (i_reg_327 + tmp_5_fu_480_p2);

assign inPtr_V_fu_386_p1 = ptr_cmp_fu_380_p2;

assign index_assign_0_1_fu_430_p2 = (32'd1 + i_reg_327);

assign index_assign_0_2_fu_455_p2 = (32'd2 + i_reg_327);

assign index_assign_1_1_fu_520_p2 = (i_1_reg_869 + 32'd1);

assign index_assign_1_2_fu_550_p2 = (i_1_reg_869 + 32'd2);

assign index_assign_2_1_fu_590_p2 = (i_1_1_fu_568_p2 + 32'd1);

assign index_assign_2_2_fu_603_p2 = (i_1_1_fu_568_p2 + 32'd2);

assign index_assign_3_1_fu_659_p2 = (i_1_2_reg_896 + 32'd1);

assign index_assign_3_2_fu_671_p2 = (i_1_2_reg_896 + 32'd2);

assign index_assign_4_1_fu_736_p2 = (i_1_3_reg_929 + 32'd1);

assign index_assign_4_2_fu_748_p2 = (i_1_3_reg_929 + 32'd2);

assign indvar1_fu_804_p1 = indvar_reg_339;

assign indvar_next_fu_798_p2 = (indvar_reg_339 + 13'd1);

assign out3_fu_350_p4 = {{out_r[31:2]}};

assign outIndex_2_1_fu_538_p2 = (outIndex_reg_315 + 32'd6);

assign outIndex_2_2_fu_621_p2 = (outIndex_reg_315 + 32'd9);

assign outIndex_2_3_fu_707_p2 = (outIndex_reg_315 + 32'd12);

assign outIndex_2_4_fu_764_p2 = (outIndex_reg_315 + 32'd15);

assign outIndex_2_fu_492_p2 = (32'd3 + outIndex_reg_315);

assign ptr_cmp_fu_380_p2 = ((adjSize_fu_370_p4 != 4'd0) ? 1'b1 : 1'b0);

assign tmp_0_1_fu_449_p2 = (32'd2 + outIndex_reg_315);

assign tmp_10_fu_474_p2 = factor_0_data_reg << 32'd2;

assign tmp_11_fu_502_p3 = inPtr_V_reg_819[i_1_reg_869];

assign tmp_12_fu_525_p3 = inPtr_V_reg_819[index_assign_1_1_fu_520_p2];

assign tmp_13_fu_555_p3 = inPtr_V_reg_819[index_assign_1_2_fu_550_p2];

assign tmp_14_fu_577_p3 = inPtr_V_reg_819[i_1_1_fu_568_p2];

assign tmp_15_fu_596_p3 = inPtr_V_reg_819[index_assign_2_1_fu_590_p2];

assign tmp_16_fu_609_p3 = inPtr_V_reg_819[index_assign_2_2_fu_603_p2];

assign tmp_17_fu_653_p3 = inPtr_V_reg_819[i_1_2_reg_896];

assign tmp_18_fu_664_p3 = inPtr_V_reg_819[index_assign_3_1_fu_659_p2];

assign tmp_19_fu_676_p3 = inPtr_V_reg_819[index_assign_3_2_fu_671_p2];

assign tmp_1_1_fu_544_p2 = (outIndex_reg_315 + 32'd5);

assign tmp_1_4_fu_514_p2 = (outIndex_reg_315 + 32'd4);

assign tmp_20_fu_724_p3 = inPtr_V_reg_819[i_1_3_reg_929];

assign tmp_21_fu_741_p3 = inPtr_V_reg_819[index_assign_4_1_fu_736_p2];

assign tmp_22_fu_753_p3 = inPtr_V_reg_819[index_assign_4_2_fu_748_p2];

assign tmp_2_1_6_fu_638_p2 = (outIndex_reg_315 + 32'd8);

assign tmp_2_1_fu_498_p2 = ((i_1_reg_869 < tmp_1_reg_848) ? 1'b1 : 1'b0);

assign tmp_2_2_fu_572_p2 = ((i_1_1_fu_568_p2 < tmp_1_reg_848) ? 1'b1 : 1'b0);

assign tmp_2_3_fu_649_p2 = ((i_1_2_reg_896 < tmp_1_reg_848) ? 1'b1 : 1'b0);

assign tmp_2_4_fu_687_p2 = ((i_1_3_fu_683_p2 < tmp_1_reg_848) ? 1'b1 : 1'b0);

assign tmp_2_5_fu_627_p2 = (outIndex_reg_315 + 32'd7);

assign tmp_2_fu_406_p2 = ((i_reg_327 < tmp_1_reg_848) ? 1'b1 : 1'b0);

assign tmp_3_1_fu_713_p2 = (outIndex_reg_315 + 32'd11);

assign tmp_3_7_fu_696_p2 = (outIndex_reg_315 + 32'd10);

assign tmp_3_fu_360_p1 = out3_fu_350_p4;

assign tmp_4_1_fu_781_p2 = (outIndex_reg_315 + 32'd14);

assign tmp_4_8_fu_770_p2 = (outIndex_reg_315 + 32'd13);

assign tmp_4_fu_390_p2 = length_r_0_data_reg << 32'd2;

assign tmp_5_fu_480_p2 = (tmp_10_fu_474_p2 - factor_0_data_reg);

assign tmp_6_fu_411_p3 = inPtr_V_reg_819[i_reg_327];

assign tmp_7_fu_436_p3 = inPtr_V_reg_819[index_assign_0_1_fu_430_p2];

assign tmp_8_fu_461_p3 = inPtr_V_reg_819[index_assign_0_2_fu_455_p2];

assign tmp_9_0_1_fu_444_p1 = tmp_s_fu_424_p2;

assign tmp_9_0_2_fu_469_p1 = tmp_0_1_fu_449_p2;

assign tmp_9_1_1_fu_533_p1 = tmp_1_4_fu_514_p2;

assign tmp_9_1_2_fu_563_p1 = tmp_1_1_fu_544_p2;

assign tmp_9_1_fu_509_p1 = outIndex_2_fu_492_p2;

assign tmp_9_2_1_fu_633_p1 = tmp_2_5_fu_627_p2;

assign tmp_9_2_2_fu_644_p1 = tmp_2_1_6_fu_638_p2;

assign tmp_9_2_fu_585_p1 = outIndex_2_1_fu_538_p2;

assign tmp_9_3_1_fu_702_p1 = tmp_3_7_fu_696_p2;

assign tmp_9_3_2_fu_719_p1 = tmp_3_1_fu_713_p2;

assign tmp_9_3_fu_692_p1 = outIndex_2_2_reg_905;

assign tmp_9_4_1_fu_776_p1 = tmp_4_8_fu_770_p2;

assign tmp_9_4_2_fu_787_p1 = tmp_4_1_fu_781_p2;

assign tmp_9_4_fu_731_p1 = outIndex_2_3_fu_707_p2;

assign tmp_9_fu_419_p1 = outIndex_reg_315;

assign tmp_fu_396_p2 = (tmp_4_fu_390_p2 - length_r_0_data_reg);

assign tmp_s_fu_424_p2 = (32'd1 + outIndex_reg_315);

always @ (posedge ap_clk) begin
    MAXI_addr_reg_813[31:30] <= 2'b00;
    inPtr_V_reg_819[7:1] <= 7'b0000000;
end

endmodule //subSampleSection
