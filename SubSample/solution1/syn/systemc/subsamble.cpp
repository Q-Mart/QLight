// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "subsamble.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<24> subsamble::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<3> subsamble::ap_const_lv3_0 = "000";
const sc_lv<1> subsamble::ap_const_lv1_0 = "0";
const sc_logic subsamble::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic subsamble::ap_const_logic_0 = sc_dt::Log_0;

subsamble::subsamble(sc_module_name name) : sc_module(name), mVcdFile(0) {
    AXIvideo2Mat_U0 = new AXIvideo2Mat("AXIvideo2Mat_U0");
    AXIvideo2Mat_U0->ap_clk(ap_clk);
    AXIvideo2Mat_U0->ap_rst(ap_rst_n_inv);
    AXIvideo2Mat_U0->ap_start(AXIvideo2Mat_U0_ap_start);
    AXIvideo2Mat_U0->start_full_n(start_for_Not_U0_full_n);
    AXIvideo2Mat_U0->ap_done(AXIvideo2Mat_U0_ap_done);
    AXIvideo2Mat_U0->ap_continue(AXIvideo2Mat_U0_ap_continue);
    AXIvideo2Mat_U0->ap_idle(AXIvideo2Mat_U0_ap_idle);
    AXIvideo2Mat_U0->ap_ready(AXIvideo2Mat_U0_ap_ready);
    AXIvideo2Mat_U0->start_out(AXIvideo2Mat_U0_start_out);
    AXIvideo2Mat_U0->start_write(AXIvideo2Mat_U0_start_write);
    AXIvideo2Mat_U0->stream_in_TDATA(stream_in_TDATA);
    AXIvideo2Mat_U0->stream_in_TVALID(stream_in_TVALID);
    AXIvideo2Mat_U0->stream_in_TREADY(AXIvideo2Mat_U0_stream_in_TREADY);
    AXIvideo2Mat_U0->stream_in_TKEEP(stream_in_TKEEP);
    AXIvideo2Mat_U0->stream_in_TSTRB(stream_in_TSTRB);
    AXIvideo2Mat_U0->stream_in_TUSER(stream_in_TUSER);
    AXIvideo2Mat_U0->stream_in_TLAST(stream_in_TLAST);
    AXIvideo2Mat_U0->stream_in_TID(stream_in_TID);
    AXIvideo2Mat_U0->stream_in_TDEST(stream_in_TDEST);
    AXIvideo2Mat_U0->img_data_stream_0_V_din(AXIvideo2Mat_U0_img_data_stream_0_V_din);
    AXIvideo2Mat_U0->img_data_stream_0_V_full_n(img0_data_stream_0_s_full_n);
    AXIvideo2Mat_U0->img_data_stream_0_V_write(AXIvideo2Mat_U0_img_data_stream_0_V_write);
    AXIvideo2Mat_U0->img_data_stream_1_V_din(AXIvideo2Mat_U0_img_data_stream_1_V_din);
    AXIvideo2Mat_U0->img_data_stream_1_V_full_n(img0_data_stream_1_s_full_n);
    AXIvideo2Mat_U0->img_data_stream_1_V_write(AXIvideo2Mat_U0_img_data_stream_1_V_write);
    AXIvideo2Mat_U0->img_data_stream_2_V_din(AXIvideo2Mat_U0_img_data_stream_2_V_din);
    AXIvideo2Mat_U0->img_data_stream_2_V_full_n(img0_data_stream_2_s_full_n);
    AXIvideo2Mat_U0->img_data_stream_2_V_write(AXIvideo2Mat_U0_img_data_stream_2_V_write);
    Not_U0 = new Not_r("Not_U0");
    Not_U0->ap_clk(ap_clk);
    Not_U0->ap_rst(ap_rst_n_inv);
    Not_U0->ap_start(Not_U0_ap_start);
    Not_U0->start_full_n(start_for_Mat2AXIvideo_U0_full_n);
    Not_U0->ap_done(Not_U0_ap_done);
    Not_U0->ap_continue(Not_U0_ap_continue);
    Not_U0->ap_idle(Not_U0_ap_idle);
    Not_U0->ap_ready(Not_U0_ap_ready);
    Not_U0->start_out(Not_U0_start_out);
    Not_U0->start_write(Not_U0_start_write);
    Not_U0->src_data_stream_0_V_dout(img0_data_stream_0_s_dout);
    Not_U0->src_data_stream_0_V_empty_n(img0_data_stream_0_s_empty_n);
    Not_U0->src_data_stream_0_V_read(Not_U0_src_data_stream_0_V_read);
    Not_U0->src_data_stream_1_V_dout(img0_data_stream_1_s_dout);
    Not_U0->src_data_stream_1_V_empty_n(img0_data_stream_1_s_empty_n);
    Not_U0->src_data_stream_1_V_read(Not_U0_src_data_stream_1_V_read);
    Not_U0->src_data_stream_2_V_dout(img0_data_stream_2_s_dout);
    Not_U0->src_data_stream_2_V_empty_n(img0_data_stream_2_s_empty_n);
    Not_U0->src_data_stream_2_V_read(Not_U0_src_data_stream_2_V_read);
    Not_U0->dst_data_stream_0_V_din(Not_U0_dst_data_stream_0_V_din);
    Not_U0->dst_data_stream_0_V_full_n(img1_data_stream_0_s_full_n);
    Not_U0->dst_data_stream_0_V_write(Not_U0_dst_data_stream_0_V_write);
    Not_U0->dst_data_stream_1_V_din(Not_U0_dst_data_stream_1_V_din);
    Not_U0->dst_data_stream_1_V_full_n(img1_data_stream_1_s_full_n);
    Not_U0->dst_data_stream_1_V_write(Not_U0_dst_data_stream_1_V_write);
    Not_U0->dst_data_stream_2_V_din(Not_U0_dst_data_stream_2_V_din);
    Not_U0->dst_data_stream_2_V_full_n(img1_data_stream_2_s_full_n);
    Not_U0->dst_data_stream_2_V_write(Not_U0_dst_data_stream_2_V_write);
    Mat2AXIvideo_U0 = new Mat2AXIvideo("Mat2AXIvideo_U0");
    Mat2AXIvideo_U0->ap_clk(ap_clk);
    Mat2AXIvideo_U0->ap_rst(ap_rst_n_inv);
    Mat2AXIvideo_U0->ap_start(Mat2AXIvideo_U0_ap_start);
    Mat2AXIvideo_U0->ap_done(Mat2AXIvideo_U0_ap_done);
    Mat2AXIvideo_U0->ap_continue(Mat2AXIvideo_U0_ap_continue);
    Mat2AXIvideo_U0->ap_idle(Mat2AXIvideo_U0_ap_idle);
    Mat2AXIvideo_U0->ap_ready(Mat2AXIvideo_U0_ap_ready);
    Mat2AXIvideo_U0->img_data_stream_0_V_dout(img1_data_stream_0_s_dout);
    Mat2AXIvideo_U0->img_data_stream_0_V_empty_n(img1_data_stream_0_s_empty_n);
    Mat2AXIvideo_U0->img_data_stream_0_V_read(Mat2AXIvideo_U0_img_data_stream_0_V_read);
    Mat2AXIvideo_U0->img_data_stream_1_V_dout(img1_data_stream_1_s_dout);
    Mat2AXIvideo_U0->img_data_stream_1_V_empty_n(img1_data_stream_1_s_empty_n);
    Mat2AXIvideo_U0->img_data_stream_1_V_read(Mat2AXIvideo_U0_img_data_stream_1_V_read);
    Mat2AXIvideo_U0->img_data_stream_2_V_dout(img1_data_stream_2_s_dout);
    Mat2AXIvideo_U0->img_data_stream_2_V_empty_n(img1_data_stream_2_s_empty_n);
    Mat2AXIvideo_U0->img_data_stream_2_V_read(Mat2AXIvideo_U0_img_data_stream_2_V_read);
    Mat2AXIvideo_U0->stream_process_TDATA(Mat2AXIvideo_U0_stream_process_TDATA);
    Mat2AXIvideo_U0->stream_process_TVALID(Mat2AXIvideo_U0_stream_process_TVALID);
    Mat2AXIvideo_U0->stream_process_TREADY(stream_process_TREADY);
    Mat2AXIvideo_U0->stream_process_TKEEP(Mat2AXIvideo_U0_stream_process_TKEEP);
    Mat2AXIvideo_U0->stream_process_TSTRB(Mat2AXIvideo_U0_stream_process_TSTRB);
    Mat2AXIvideo_U0->stream_process_TUSER(Mat2AXIvideo_U0_stream_process_TUSER);
    Mat2AXIvideo_U0->stream_process_TLAST(Mat2AXIvideo_U0_stream_process_TLAST);
    Mat2AXIvideo_U0->stream_process_TID(Mat2AXIvideo_U0_stream_process_TID);
    Mat2AXIvideo_U0->stream_process_TDEST(Mat2AXIvideo_U0_stream_process_TDEST);
    img0_data_stream_0_s_U = new fifo_w8_d1_A("img0_data_stream_0_s_U");
    img0_data_stream_0_s_U->clk(ap_clk);
    img0_data_stream_0_s_U->reset(ap_rst_n_inv);
    img0_data_stream_0_s_U->if_read_ce(ap_var_for_const0);
    img0_data_stream_0_s_U->if_write_ce(ap_var_for_const0);
    img0_data_stream_0_s_U->if_din(AXIvideo2Mat_U0_img_data_stream_0_V_din);
    img0_data_stream_0_s_U->if_full_n(img0_data_stream_0_s_full_n);
    img0_data_stream_0_s_U->if_write(AXIvideo2Mat_U0_img_data_stream_0_V_write);
    img0_data_stream_0_s_U->if_dout(img0_data_stream_0_s_dout);
    img0_data_stream_0_s_U->if_empty_n(img0_data_stream_0_s_empty_n);
    img0_data_stream_0_s_U->if_read(Not_U0_src_data_stream_0_V_read);
    img0_data_stream_1_s_U = new fifo_w8_d1_A("img0_data_stream_1_s_U");
    img0_data_stream_1_s_U->clk(ap_clk);
    img0_data_stream_1_s_U->reset(ap_rst_n_inv);
    img0_data_stream_1_s_U->if_read_ce(ap_var_for_const0);
    img0_data_stream_1_s_U->if_write_ce(ap_var_for_const0);
    img0_data_stream_1_s_U->if_din(AXIvideo2Mat_U0_img_data_stream_1_V_din);
    img0_data_stream_1_s_U->if_full_n(img0_data_stream_1_s_full_n);
    img0_data_stream_1_s_U->if_write(AXIvideo2Mat_U0_img_data_stream_1_V_write);
    img0_data_stream_1_s_U->if_dout(img0_data_stream_1_s_dout);
    img0_data_stream_1_s_U->if_empty_n(img0_data_stream_1_s_empty_n);
    img0_data_stream_1_s_U->if_read(Not_U0_src_data_stream_1_V_read);
    img0_data_stream_2_s_U = new fifo_w8_d1_A("img0_data_stream_2_s_U");
    img0_data_stream_2_s_U->clk(ap_clk);
    img0_data_stream_2_s_U->reset(ap_rst_n_inv);
    img0_data_stream_2_s_U->if_read_ce(ap_var_for_const0);
    img0_data_stream_2_s_U->if_write_ce(ap_var_for_const0);
    img0_data_stream_2_s_U->if_din(AXIvideo2Mat_U0_img_data_stream_2_V_din);
    img0_data_stream_2_s_U->if_full_n(img0_data_stream_2_s_full_n);
    img0_data_stream_2_s_U->if_write(AXIvideo2Mat_U0_img_data_stream_2_V_write);
    img0_data_stream_2_s_U->if_dout(img0_data_stream_2_s_dout);
    img0_data_stream_2_s_U->if_empty_n(img0_data_stream_2_s_empty_n);
    img0_data_stream_2_s_U->if_read(Not_U0_src_data_stream_2_V_read);
    img1_data_stream_0_s_U = new fifo_w8_d1_A("img1_data_stream_0_s_U");
    img1_data_stream_0_s_U->clk(ap_clk);
    img1_data_stream_0_s_U->reset(ap_rst_n_inv);
    img1_data_stream_0_s_U->if_read_ce(ap_var_for_const0);
    img1_data_stream_0_s_U->if_write_ce(ap_var_for_const0);
    img1_data_stream_0_s_U->if_din(Not_U0_dst_data_stream_0_V_din);
    img1_data_stream_0_s_U->if_full_n(img1_data_stream_0_s_full_n);
    img1_data_stream_0_s_U->if_write(Not_U0_dst_data_stream_0_V_write);
    img1_data_stream_0_s_U->if_dout(img1_data_stream_0_s_dout);
    img1_data_stream_0_s_U->if_empty_n(img1_data_stream_0_s_empty_n);
    img1_data_stream_0_s_U->if_read(Mat2AXIvideo_U0_img_data_stream_0_V_read);
    img1_data_stream_1_s_U = new fifo_w8_d1_A("img1_data_stream_1_s_U");
    img1_data_stream_1_s_U->clk(ap_clk);
    img1_data_stream_1_s_U->reset(ap_rst_n_inv);
    img1_data_stream_1_s_U->if_read_ce(ap_var_for_const0);
    img1_data_stream_1_s_U->if_write_ce(ap_var_for_const0);
    img1_data_stream_1_s_U->if_din(Not_U0_dst_data_stream_1_V_din);
    img1_data_stream_1_s_U->if_full_n(img1_data_stream_1_s_full_n);
    img1_data_stream_1_s_U->if_write(Not_U0_dst_data_stream_1_V_write);
    img1_data_stream_1_s_U->if_dout(img1_data_stream_1_s_dout);
    img1_data_stream_1_s_U->if_empty_n(img1_data_stream_1_s_empty_n);
    img1_data_stream_1_s_U->if_read(Mat2AXIvideo_U0_img_data_stream_1_V_read);
    img1_data_stream_2_s_U = new fifo_w8_d1_A("img1_data_stream_2_s_U");
    img1_data_stream_2_s_U->clk(ap_clk);
    img1_data_stream_2_s_U->reset(ap_rst_n_inv);
    img1_data_stream_2_s_U->if_read_ce(ap_var_for_const0);
    img1_data_stream_2_s_U->if_write_ce(ap_var_for_const0);
    img1_data_stream_2_s_U->if_din(Not_U0_dst_data_stream_2_V_din);
    img1_data_stream_2_s_U->if_full_n(img1_data_stream_2_s_full_n);
    img1_data_stream_2_s_U->if_write(Not_U0_dst_data_stream_2_V_write);
    img1_data_stream_2_s_U->if_dout(img1_data_stream_2_s_dout);
    img1_data_stream_2_s_U->if_empty_n(img1_data_stream_2_s_empty_n);
    img1_data_stream_2_s_U->if_read(Mat2AXIvideo_U0_img_data_stream_2_V_read);
    start_for_Not_U0_U = new start_for_Not_U0("start_for_Not_U0_U");
    start_for_Not_U0_U->clk(ap_clk);
    start_for_Not_U0_U->reset(ap_rst_n_inv);
    start_for_Not_U0_U->if_read_ce(ap_var_for_const0);
    start_for_Not_U0_U->if_write_ce(ap_var_for_const0);
    start_for_Not_U0_U->if_din(start_for_Not_U0_din);
    start_for_Not_U0_U->if_full_n(start_for_Not_U0_full_n);
    start_for_Not_U0_U->if_write(AXIvideo2Mat_U0_start_write);
    start_for_Not_U0_U->if_dout(start_for_Not_U0_dout);
    start_for_Not_U0_U->if_empty_n(start_for_Not_U0_empty_n);
    start_for_Not_U0_U->if_read(Not_U0_ap_ready);
    start_for_Mat2AXIbkb_U = new start_for_Mat2AXIbkb("start_for_Mat2AXIbkb_U");
    start_for_Mat2AXIbkb_U->clk(ap_clk);
    start_for_Mat2AXIbkb_U->reset(ap_rst_n_inv);
    start_for_Mat2AXIbkb_U->if_read_ce(ap_var_for_const0);
    start_for_Mat2AXIbkb_U->if_write_ce(ap_var_for_const0);
    start_for_Mat2AXIbkb_U->if_din(start_for_Mat2AXIvideo_U0_din);
    start_for_Mat2AXIbkb_U->if_full_n(start_for_Mat2AXIvideo_U0_full_n);
    start_for_Mat2AXIbkb_U->if_write(Not_U0_start_write);
    start_for_Mat2AXIbkb_U->if_dout(start_for_Mat2AXIvideo_U0_dout);
    start_for_Mat2AXIbkb_U->if_empty_n(start_for_Mat2AXIvideo_U0_empty_n);
    start_for_Mat2AXIbkb_U->if_read(Mat2AXIvideo_U0_ap_ready);

    SC_METHOD(thread_AXIvideo2Mat_U0_ap_continue);

    SC_METHOD(thread_AXIvideo2Mat_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Mat2AXIvideo_U0_ap_continue);

    SC_METHOD(thread_Mat2AXIvideo_U0_ap_start);
    sensitive << ( start_for_Mat2AXIvideo_U0_empty_n );

    SC_METHOD(thread_Mat2AXIvideo_U0_start_full_n);

    SC_METHOD(thread_Mat2AXIvideo_U0_start_write);

    SC_METHOD(thread_Not_U0_ap_continue);

    SC_METHOD(thread_Not_U0_ap_start);
    sensitive << ( start_for_Not_U0_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( Mat2AXIvideo_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( AXIvideo2Mat_U0_ap_idle );
    sensitive << ( Not_U0_ap_idle );
    sensitive << ( Mat2AXIvideo_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( AXIvideo2Mat_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Mat2AXIvideo_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( AXIvideo2Mat_U0_ap_ready );

    SC_METHOD(thread_start_for_Mat2AXIvideo_U0_din);

    SC_METHOD(thread_start_for_Not_U0_din);

    SC_METHOD(thread_stream_in_TREADY);
    sensitive << ( AXIvideo2Mat_U0_stream_in_TREADY );

    SC_METHOD(thread_stream_process_TDATA);
    sensitive << ( Mat2AXIvideo_U0_stream_process_TDATA );

    SC_METHOD(thread_stream_process_TDEST);
    sensitive << ( Mat2AXIvideo_U0_stream_process_TDEST );

    SC_METHOD(thread_stream_process_TID);
    sensitive << ( Mat2AXIvideo_U0_stream_process_TID );

    SC_METHOD(thread_stream_process_TKEEP);
    sensitive << ( Mat2AXIvideo_U0_stream_process_TKEEP );

    SC_METHOD(thread_stream_process_TLAST);
    sensitive << ( Mat2AXIvideo_U0_stream_process_TLAST );

    SC_METHOD(thread_stream_process_TSTRB);
    sensitive << ( Mat2AXIvideo_U0_stream_process_TSTRB );

    SC_METHOD(thread_stream_process_TUSER);
    sensitive << ( Mat2AXIvideo_U0_stream_process_TUSER );

    SC_METHOD(thread_stream_process_TVALID);
    sensitive << ( Mat2AXIvideo_U0_stream_process_TVALID );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "subsamble_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, stream_in_TDATA, "(port)stream_in_TDATA");
    sc_trace(mVcdFile, stream_in_TKEEP, "(port)stream_in_TKEEP");
    sc_trace(mVcdFile, stream_in_TSTRB, "(port)stream_in_TSTRB");
    sc_trace(mVcdFile, stream_in_TUSER, "(port)stream_in_TUSER");
    sc_trace(mVcdFile, stream_in_TLAST, "(port)stream_in_TLAST");
    sc_trace(mVcdFile, stream_in_TID, "(port)stream_in_TID");
    sc_trace(mVcdFile, stream_in_TDEST, "(port)stream_in_TDEST");
    sc_trace(mVcdFile, stream_process_TDATA, "(port)stream_process_TDATA");
    sc_trace(mVcdFile, stream_process_TKEEP, "(port)stream_process_TKEEP");
    sc_trace(mVcdFile, stream_process_TSTRB, "(port)stream_process_TSTRB");
    sc_trace(mVcdFile, stream_process_TUSER, "(port)stream_process_TUSER");
    sc_trace(mVcdFile, stream_process_TLAST, "(port)stream_process_TLAST");
    sc_trace(mVcdFile, stream_process_TID, "(port)stream_process_TID");
    sc_trace(mVcdFile, stream_process_TDEST, "(port)stream_process_TDEST");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, stream_in_TVALID, "(port)stream_in_TVALID");
    sc_trace(mVcdFile, stream_in_TREADY, "(port)stream_in_TREADY");
    sc_trace(mVcdFile, stream_process_TVALID, "(port)stream_process_TVALID");
    sc_trace(mVcdFile, stream_process_TREADY, "(port)stream_process_TREADY");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_ap_start, "AXIvideo2Mat_U0_ap_start");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_ap_done, "AXIvideo2Mat_U0_ap_done");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_ap_continue, "AXIvideo2Mat_U0_ap_continue");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_ap_idle, "AXIvideo2Mat_U0_ap_idle");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_ap_ready, "AXIvideo2Mat_U0_ap_ready");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_start_out, "AXIvideo2Mat_U0_start_out");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_start_write, "AXIvideo2Mat_U0_start_write");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_stream_in_TREADY, "AXIvideo2Mat_U0_stream_in_TREADY");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_0_V_din, "AXIvideo2Mat_U0_img_data_stream_0_V_din");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_0_V_write, "AXIvideo2Mat_U0_img_data_stream_0_V_write");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_1_V_din, "AXIvideo2Mat_U0_img_data_stream_1_V_din");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_1_V_write, "AXIvideo2Mat_U0_img_data_stream_1_V_write");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_2_V_din, "AXIvideo2Mat_U0_img_data_stream_2_V_din");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_2_V_write, "AXIvideo2Mat_U0_img_data_stream_2_V_write");
    sc_trace(mVcdFile, Not_U0_ap_start, "Not_U0_ap_start");
    sc_trace(mVcdFile, Not_U0_ap_done, "Not_U0_ap_done");
    sc_trace(mVcdFile, Not_U0_ap_continue, "Not_U0_ap_continue");
    sc_trace(mVcdFile, Not_U0_ap_idle, "Not_U0_ap_idle");
    sc_trace(mVcdFile, Not_U0_ap_ready, "Not_U0_ap_ready");
    sc_trace(mVcdFile, Not_U0_start_out, "Not_U0_start_out");
    sc_trace(mVcdFile, Not_U0_start_write, "Not_U0_start_write");
    sc_trace(mVcdFile, Not_U0_src_data_stream_0_V_read, "Not_U0_src_data_stream_0_V_read");
    sc_trace(mVcdFile, Not_U0_src_data_stream_1_V_read, "Not_U0_src_data_stream_1_V_read");
    sc_trace(mVcdFile, Not_U0_src_data_stream_2_V_read, "Not_U0_src_data_stream_2_V_read");
    sc_trace(mVcdFile, Not_U0_dst_data_stream_0_V_din, "Not_U0_dst_data_stream_0_V_din");
    sc_trace(mVcdFile, Not_U0_dst_data_stream_0_V_write, "Not_U0_dst_data_stream_0_V_write");
    sc_trace(mVcdFile, Not_U0_dst_data_stream_1_V_din, "Not_U0_dst_data_stream_1_V_din");
    sc_trace(mVcdFile, Not_U0_dst_data_stream_1_V_write, "Not_U0_dst_data_stream_1_V_write");
    sc_trace(mVcdFile, Not_U0_dst_data_stream_2_V_din, "Not_U0_dst_data_stream_2_V_din");
    sc_trace(mVcdFile, Not_U0_dst_data_stream_2_V_write, "Not_U0_dst_data_stream_2_V_write");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_ap_start, "Mat2AXIvideo_U0_ap_start");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_ap_done, "Mat2AXIvideo_U0_ap_done");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_ap_continue, "Mat2AXIvideo_U0_ap_continue");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_ap_idle, "Mat2AXIvideo_U0_ap_idle");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_ap_ready, "Mat2AXIvideo_U0_ap_ready");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_img_data_stream_0_V_read, "Mat2AXIvideo_U0_img_data_stream_0_V_read");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_img_data_stream_1_V_read, "Mat2AXIvideo_U0_img_data_stream_1_V_read");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_img_data_stream_2_V_read, "Mat2AXIvideo_U0_img_data_stream_2_V_read");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_stream_process_TDATA, "Mat2AXIvideo_U0_stream_process_TDATA");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_stream_process_TVALID, "Mat2AXIvideo_U0_stream_process_TVALID");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_stream_process_TKEEP, "Mat2AXIvideo_U0_stream_process_TKEEP");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_stream_process_TSTRB, "Mat2AXIvideo_U0_stream_process_TSTRB");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_stream_process_TUSER, "Mat2AXIvideo_U0_stream_process_TUSER");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_stream_process_TLAST, "Mat2AXIvideo_U0_stream_process_TLAST");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_stream_process_TID, "Mat2AXIvideo_U0_stream_process_TID");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_stream_process_TDEST, "Mat2AXIvideo_U0_stream_process_TDEST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, img0_data_stream_0_s_full_n, "img0_data_stream_0_s_full_n");
    sc_trace(mVcdFile, img0_data_stream_0_s_dout, "img0_data_stream_0_s_dout");
    sc_trace(mVcdFile, img0_data_stream_0_s_empty_n, "img0_data_stream_0_s_empty_n");
    sc_trace(mVcdFile, img0_data_stream_1_s_full_n, "img0_data_stream_1_s_full_n");
    sc_trace(mVcdFile, img0_data_stream_1_s_dout, "img0_data_stream_1_s_dout");
    sc_trace(mVcdFile, img0_data_stream_1_s_empty_n, "img0_data_stream_1_s_empty_n");
    sc_trace(mVcdFile, img0_data_stream_2_s_full_n, "img0_data_stream_2_s_full_n");
    sc_trace(mVcdFile, img0_data_stream_2_s_dout, "img0_data_stream_2_s_dout");
    sc_trace(mVcdFile, img0_data_stream_2_s_empty_n, "img0_data_stream_2_s_empty_n");
    sc_trace(mVcdFile, img1_data_stream_0_s_full_n, "img1_data_stream_0_s_full_n");
    sc_trace(mVcdFile, img1_data_stream_0_s_dout, "img1_data_stream_0_s_dout");
    sc_trace(mVcdFile, img1_data_stream_0_s_empty_n, "img1_data_stream_0_s_empty_n");
    sc_trace(mVcdFile, img1_data_stream_1_s_full_n, "img1_data_stream_1_s_full_n");
    sc_trace(mVcdFile, img1_data_stream_1_s_dout, "img1_data_stream_1_s_dout");
    sc_trace(mVcdFile, img1_data_stream_1_s_empty_n, "img1_data_stream_1_s_empty_n");
    sc_trace(mVcdFile, img1_data_stream_2_s_full_n, "img1_data_stream_2_s_full_n");
    sc_trace(mVcdFile, img1_data_stream_2_s_dout, "img1_data_stream_2_s_dout");
    sc_trace(mVcdFile, img1_data_stream_2_s_empty_n, "img1_data_stream_2_s_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_Not_U0_din, "start_for_Not_U0_din");
    sc_trace(mVcdFile, start_for_Not_U0_full_n, "start_for_Not_U0_full_n");
    sc_trace(mVcdFile, start_for_Not_U0_dout, "start_for_Not_U0_dout");
    sc_trace(mVcdFile, start_for_Not_U0_empty_n, "start_for_Not_U0_empty_n");
    sc_trace(mVcdFile, start_for_Mat2AXIvideo_U0_din, "start_for_Mat2AXIvideo_U0_din");
    sc_trace(mVcdFile, start_for_Mat2AXIvideo_U0_full_n, "start_for_Mat2AXIvideo_U0_full_n");
    sc_trace(mVcdFile, start_for_Mat2AXIvideo_U0_dout, "start_for_Mat2AXIvideo_U0_dout");
    sc_trace(mVcdFile, start_for_Mat2AXIvideo_U0_empty_n, "start_for_Mat2AXIvideo_U0_empty_n");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_start_full_n, "Mat2AXIvideo_U0_start_full_n");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_start_write, "Mat2AXIvideo_U0_start_write");
#endif

    }
    mHdltvinHandle.open("subsamble.hdltvin.dat");
    mHdltvoutHandle.open("subsamble.hdltvout.dat");
}

subsamble::~subsamble() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete AXIvideo2Mat_U0;
    delete Not_U0;
    delete Mat2AXIvideo_U0;
    delete img0_data_stream_0_s_U;
    delete img0_data_stream_1_s_U;
    delete img0_data_stream_2_s_U;
    delete img1_data_stream_0_s_U;
    delete img1_data_stream_1_s_U;
    delete img1_data_stream_2_s_U;
    delete start_for_Not_U0_U;
    delete start_for_Mat2AXIbkb_U;
}

void subsamble::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void subsamble::thread_AXIvideo2Mat_U0_ap_continue() {
    AXIvideo2Mat_U0_ap_continue = ap_const_logic_1;
}

void subsamble::thread_AXIvideo2Mat_U0_ap_start() {
    AXIvideo2Mat_U0_ap_start = ap_start.read();
}

void subsamble::thread_Mat2AXIvideo_U0_ap_continue() {
    Mat2AXIvideo_U0_ap_continue = ap_const_logic_1;
}

void subsamble::thread_Mat2AXIvideo_U0_ap_start() {
    Mat2AXIvideo_U0_ap_start = start_for_Mat2AXIvideo_U0_empty_n.read();
}

void subsamble::thread_Mat2AXIvideo_U0_start_full_n() {
    Mat2AXIvideo_U0_start_full_n = ap_const_logic_1;
}

void subsamble::thread_Mat2AXIvideo_U0_start_write() {
    Mat2AXIvideo_U0_start_write = ap_const_logic_0;
}

void subsamble::thread_Not_U0_ap_continue() {
    Not_U0_ap_continue = ap_const_logic_1;
}

void subsamble::thread_Not_U0_ap_start() {
    Not_U0_ap_start = start_for_Not_U0_empty_n.read();
}

void subsamble::thread_ap_done() {
    ap_done = Mat2AXIvideo_U0_ap_done.read();
}

void subsamble::thread_ap_idle() {
    ap_idle = (AXIvideo2Mat_U0_ap_idle.read() & Not_U0_ap_idle.read() & Mat2AXIvideo_U0_ap_idle.read());
}

void subsamble::thread_ap_ready() {
    ap_ready = AXIvideo2Mat_U0_ap_ready.read();
}

void subsamble::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void subsamble::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void subsamble::thread_ap_sync_done() {
    ap_sync_done = Mat2AXIvideo_U0_ap_done.read();
}

void subsamble::thread_ap_sync_ready() {
    ap_sync_ready = AXIvideo2Mat_U0_ap_ready.read();
}

void subsamble::thread_start_for_Mat2AXIvideo_U0_din() {
    start_for_Mat2AXIvideo_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void subsamble::thread_start_for_Not_U0_din() {
    start_for_Not_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void subsamble::thread_stream_in_TREADY() {
    stream_in_TREADY = AXIvideo2Mat_U0_stream_in_TREADY.read();
}

void subsamble::thread_stream_process_TDATA() {
    stream_process_TDATA = Mat2AXIvideo_U0_stream_process_TDATA.read();
}

void subsamble::thread_stream_process_TDEST() {
    stream_process_TDEST = Mat2AXIvideo_U0_stream_process_TDEST.read();
}

void subsamble::thread_stream_process_TID() {
    stream_process_TID = Mat2AXIvideo_U0_stream_process_TID.read();
}

void subsamble::thread_stream_process_TKEEP() {
    stream_process_TKEEP = Mat2AXIvideo_U0_stream_process_TKEEP.read();
}

void subsamble::thread_stream_process_TLAST() {
    stream_process_TLAST = Mat2AXIvideo_U0_stream_process_TLAST.read();
}

void subsamble::thread_stream_process_TSTRB() {
    stream_process_TSTRB = Mat2AXIvideo_U0_stream_process_TSTRB.read();
}

void subsamble::thread_stream_process_TUSER() {
    stream_process_TUSER = Mat2AXIvideo_U0_stream_process_TUSER.read();
}

void subsamble::thread_stream_process_TVALID() {
    stream_process_TVALID = Mat2AXIvideo_U0_stream_process_TVALID.read();
}

void subsamble::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"stream_in_TDATA\" :  \"" << stream_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TKEEP\" :  \"" << stream_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TSTRB\" :  \"" << stream_in_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TUSER\" :  \"" << stream_in_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TLAST\" :  \"" << stream_in_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TID\" :  \"" << stream_in_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TDEST\" :  \"" << stream_in_TDEST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"stream_process_TDATA\" :  \"" << stream_process_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_process_TKEEP\" :  \"" << stream_process_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_process_TSTRB\" :  \"" << stream_process_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_process_TUSER\" :  \"" << stream_process_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_process_TLAST\" :  \"" << stream_process_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_process_TID\" :  \"" << stream_process_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_process_TDEST\" :  \"" << stream_process_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TVALID\" :  \"" << stream_in_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_in_TREADY\" :  \"" << stream_in_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_process_TVALID\" :  \"" << stream_process_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_process_TREADY\" :  \"" << stream_process_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

