// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="subsamble,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=10615742,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=3,HLS_SYN_FF=1641,HLS_SYN_LUT=4119,HLS_VERSION=2018_2_1}" *)

module subsamble (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TKEEP,
        stream_in_TSTRB,
        stream_in_TUSER,
        stream_in_TLAST,
        stream_in_TID,
        stream_in_TDEST,
        stream_process_TDATA,
        stream_process_TVALID,
        stream_process_TREADY,
        stream_process_TKEEP,
        stream_process_TSTRB,
        stream_process_TUSER,
        stream_process_TLAST,
        stream_process_TID,
        stream_process_TDEST,
        stream_passThrough_TDATA,
        stream_passThrough_TVALID,
        stream_passThrough_TREADY,
        stream_passThrough_TKEEP,
        stream_passThrough_TSTRB,
        stream_passThrough_TUSER,
        stream_passThrough_TLAST,
        stream_passThrough_TID,
        stream_passThrough_TDEST
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_pp0_stage0 = 14'd16;
parameter    ap_ST_fsm_state7 = 14'd32;
parameter    ap_ST_fsm_state8 = 14'd64;
parameter    ap_ST_fsm_state9 = 14'd128;
parameter    ap_ST_fsm_state10 = 14'd256;
parameter    ap_ST_fsm_state11 = 14'd512;
parameter    ap_ST_fsm_pp1_stage0 = 14'd1024;
parameter    ap_ST_fsm_state14 = 14'd2048;
parameter    ap_ST_fsm_state15 = 14'd4096;
parameter    ap_ST_fsm_state16 = 14'd8192;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [2:0] stream_in_TKEEP;
input  [2:0] stream_in_TSTRB;
input  [0:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
input  [0:0] stream_in_TID;
input  [0:0] stream_in_TDEST;
output  [23:0] stream_process_TDATA;
output   stream_process_TVALID;
input   stream_process_TREADY;
output  [2:0] stream_process_TKEEP;
output  [2:0] stream_process_TSTRB;
output  [0:0] stream_process_TUSER;
output  [0:0] stream_process_TLAST;
output  [0:0] stream_process_TID;
output  [0:0] stream_process_TDEST;
output  [23:0] stream_passThrough_TDATA;
output   stream_passThrough_TVALID;
input   stream_passThrough_TREADY;
output  [2:0] stream_passThrough_TKEEP;
output  [2:0] stream_passThrough_TSTRB;
output  [0:0] stream_passThrough_TUSER;
output  [0:0] stream_passThrough_TLAST;
output  [0:0] stream_passThrough_TID;
output  [0:0] stream_passThrough_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] stream_in_V_data_V_0_data_out;
wire    stream_in_V_data_V_0_vld_in;
wire    stream_in_V_data_V_0_vld_out;
wire    stream_in_V_data_V_0_ack_in;
reg    stream_in_V_data_V_0_ack_out;
reg   [23:0] stream_in_V_data_V_0_payload_A;
reg   [23:0] stream_in_V_data_V_0_payload_B;
reg    stream_in_V_data_V_0_sel_rd;
reg    stream_in_V_data_V_0_sel_wr;
wire    stream_in_V_data_V_0_sel;
wire    stream_in_V_data_V_0_load_A;
wire    stream_in_V_data_V_0_load_B;
reg   [1:0] stream_in_V_data_V_0_state;
wire    stream_in_V_data_V_0_state_cmp_full;
reg   [2:0] stream_in_V_keep_V_0_data_out;
wire    stream_in_V_keep_V_0_vld_in;
wire    stream_in_V_keep_V_0_vld_out;
wire    stream_in_V_keep_V_0_ack_in;
reg    stream_in_V_keep_V_0_ack_out;
reg   [2:0] stream_in_V_keep_V_0_payload_A;
reg   [2:0] stream_in_V_keep_V_0_payload_B;
reg    stream_in_V_keep_V_0_sel_rd;
reg    stream_in_V_keep_V_0_sel_wr;
wire    stream_in_V_keep_V_0_sel;
wire    stream_in_V_keep_V_0_load_A;
wire    stream_in_V_keep_V_0_load_B;
reg   [1:0] stream_in_V_keep_V_0_state;
wire    stream_in_V_keep_V_0_state_cmp_full;
reg   [2:0] stream_in_V_strb_V_0_data_out;
wire    stream_in_V_strb_V_0_vld_in;
wire    stream_in_V_strb_V_0_vld_out;
wire    stream_in_V_strb_V_0_ack_in;
reg    stream_in_V_strb_V_0_ack_out;
reg   [2:0] stream_in_V_strb_V_0_payload_A;
reg   [2:0] stream_in_V_strb_V_0_payload_B;
reg    stream_in_V_strb_V_0_sel_rd;
reg    stream_in_V_strb_V_0_sel_wr;
wire    stream_in_V_strb_V_0_sel;
wire    stream_in_V_strb_V_0_load_A;
wire    stream_in_V_strb_V_0_load_B;
reg   [1:0] stream_in_V_strb_V_0_state;
wire    stream_in_V_strb_V_0_state_cmp_full;
reg   [0:0] stream_in_V_user_V_0_data_out;
wire    stream_in_V_user_V_0_vld_in;
wire    stream_in_V_user_V_0_vld_out;
wire    stream_in_V_user_V_0_ack_in;
reg    stream_in_V_user_V_0_ack_out;
reg   [0:0] stream_in_V_user_V_0_payload_A;
reg   [0:0] stream_in_V_user_V_0_payload_B;
reg    stream_in_V_user_V_0_sel_rd;
reg    stream_in_V_user_V_0_sel_wr;
wire    stream_in_V_user_V_0_sel;
wire    stream_in_V_user_V_0_load_A;
wire    stream_in_V_user_V_0_load_B;
reg   [1:0] stream_in_V_user_V_0_state;
wire    stream_in_V_user_V_0_state_cmp_full;
reg   [0:0] stream_in_V_last_V_0_data_out;
wire    stream_in_V_last_V_0_vld_in;
wire    stream_in_V_last_V_0_vld_out;
wire    stream_in_V_last_V_0_ack_in;
reg    stream_in_V_last_V_0_ack_out;
reg   [0:0] stream_in_V_last_V_0_payload_A;
reg   [0:0] stream_in_V_last_V_0_payload_B;
reg    stream_in_V_last_V_0_sel_rd;
reg    stream_in_V_last_V_0_sel_wr;
wire    stream_in_V_last_V_0_sel;
wire    stream_in_V_last_V_0_load_A;
wire    stream_in_V_last_V_0_load_B;
reg   [1:0] stream_in_V_last_V_0_state;
wire    stream_in_V_last_V_0_state_cmp_full;
reg   [0:0] stream_in_V_id_V_0_data_out;
wire    stream_in_V_id_V_0_vld_in;
wire    stream_in_V_id_V_0_vld_out;
wire    stream_in_V_id_V_0_ack_in;
reg    stream_in_V_id_V_0_ack_out;
reg   [0:0] stream_in_V_id_V_0_payload_A;
reg   [0:0] stream_in_V_id_V_0_payload_B;
reg    stream_in_V_id_V_0_sel_rd;
reg    stream_in_V_id_V_0_sel_wr;
wire    stream_in_V_id_V_0_sel;
wire    stream_in_V_id_V_0_load_A;
wire    stream_in_V_id_V_0_load_B;
reg   [1:0] stream_in_V_id_V_0_state;
wire    stream_in_V_id_V_0_state_cmp_full;
reg   [0:0] stream_in_V_dest_V_0_data_out;
wire    stream_in_V_dest_V_0_vld_in;
wire    stream_in_V_dest_V_0_vld_out;
wire    stream_in_V_dest_V_0_ack_in;
reg    stream_in_V_dest_V_0_ack_out;
reg   [0:0] stream_in_V_dest_V_0_payload_A;
reg   [0:0] stream_in_V_dest_V_0_payload_B;
reg    stream_in_V_dest_V_0_sel_rd;
reg    stream_in_V_dest_V_0_sel_wr;
wire    stream_in_V_dest_V_0_sel;
wire    stream_in_V_dest_V_0_load_A;
wire    stream_in_V_dest_V_0_load_B;
reg   [1:0] stream_in_V_dest_V_0_state;
wire    stream_in_V_dest_V_0_state_cmp_full;
reg   [23:0] stream_process_V_data_V_1_data_out;
wire    stream_process_V_data_V_1_vld_in;
wire    stream_process_V_data_V_1_vld_out;
wire    stream_process_V_data_V_1_ack_in;
wire    stream_process_V_data_V_1_ack_out;
reg   [23:0] stream_process_V_data_V_1_payload_A;
reg   [23:0] stream_process_V_data_V_1_payload_B;
reg    stream_process_V_data_V_1_sel_rd;
reg    stream_process_V_data_V_1_sel_wr;
wire    stream_process_V_data_V_1_sel;
wire    stream_process_V_data_V_1_load_A;
wire    stream_process_V_data_V_1_load_B;
reg   [1:0] stream_process_V_data_V_1_state;
wire    stream_process_V_data_V_1_state_cmp_full;
reg   [2:0] stream_process_V_keep_V_1_data_out;
wire    stream_process_V_keep_V_1_vld_in;
wire    stream_process_V_keep_V_1_vld_out;
wire    stream_process_V_keep_V_1_ack_in;
wire    stream_process_V_keep_V_1_ack_out;
reg   [2:0] stream_process_V_keep_V_1_payload_A;
reg   [2:0] stream_process_V_keep_V_1_payload_B;
reg    stream_process_V_keep_V_1_sel_rd;
reg    stream_process_V_keep_V_1_sel_wr;
wire    stream_process_V_keep_V_1_sel;
wire    stream_process_V_keep_V_1_load_A;
wire    stream_process_V_keep_V_1_load_B;
reg   [1:0] stream_process_V_keep_V_1_state;
wire    stream_process_V_keep_V_1_state_cmp_full;
reg   [2:0] stream_process_V_strb_V_1_data_out;
wire    stream_process_V_strb_V_1_vld_in;
wire    stream_process_V_strb_V_1_vld_out;
wire    stream_process_V_strb_V_1_ack_in;
wire    stream_process_V_strb_V_1_ack_out;
reg   [2:0] stream_process_V_strb_V_1_payload_A;
reg   [2:0] stream_process_V_strb_V_1_payload_B;
reg    stream_process_V_strb_V_1_sel_rd;
reg    stream_process_V_strb_V_1_sel_wr;
wire    stream_process_V_strb_V_1_sel;
wire    stream_process_V_strb_V_1_load_A;
wire    stream_process_V_strb_V_1_load_B;
reg   [1:0] stream_process_V_strb_V_1_state;
wire    stream_process_V_strb_V_1_state_cmp_full;
reg   [0:0] stream_process_V_user_V_1_data_out;
wire    stream_process_V_user_V_1_vld_in;
wire    stream_process_V_user_V_1_vld_out;
wire    stream_process_V_user_V_1_ack_in;
wire    stream_process_V_user_V_1_ack_out;
reg   [0:0] stream_process_V_user_V_1_payload_A;
reg   [0:0] stream_process_V_user_V_1_payload_B;
reg    stream_process_V_user_V_1_sel_rd;
reg    stream_process_V_user_V_1_sel_wr;
wire    stream_process_V_user_V_1_sel;
wire    stream_process_V_user_V_1_load_A;
wire    stream_process_V_user_V_1_load_B;
reg   [1:0] stream_process_V_user_V_1_state;
wire    stream_process_V_user_V_1_state_cmp_full;
reg   [0:0] stream_process_V_last_V_1_data_out;
wire    stream_process_V_last_V_1_vld_in;
wire    stream_process_V_last_V_1_vld_out;
wire    stream_process_V_last_V_1_ack_in;
wire    stream_process_V_last_V_1_ack_out;
reg   [0:0] stream_process_V_last_V_1_payload_A;
reg   [0:0] stream_process_V_last_V_1_payload_B;
reg    stream_process_V_last_V_1_sel_rd;
reg    stream_process_V_last_V_1_sel_wr;
wire    stream_process_V_last_V_1_sel;
wire    stream_process_V_last_V_1_load_A;
wire    stream_process_V_last_V_1_load_B;
reg   [1:0] stream_process_V_last_V_1_state;
wire    stream_process_V_last_V_1_state_cmp_full;
reg   [0:0] stream_process_V_id_V_1_data_out;
wire    stream_process_V_id_V_1_vld_in;
wire    stream_process_V_id_V_1_vld_out;
wire    stream_process_V_id_V_1_ack_in;
wire    stream_process_V_id_V_1_ack_out;
reg   [0:0] stream_process_V_id_V_1_payload_A;
reg   [0:0] stream_process_V_id_V_1_payload_B;
reg    stream_process_V_id_V_1_sel_rd;
reg    stream_process_V_id_V_1_sel_wr;
wire    stream_process_V_id_V_1_sel;
wire    stream_process_V_id_V_1_load_A;
wire    stream_process_V_id_V_1_load_B;
reg   [1:0] stream_process_V_id_V_1_state;
wire    stream_process_V_id_V_1_state_cmp_full;
reg   [0:0] stream_process_V_dest_V_1_data_out;
wire    stream_process_V_dest_V_1_vld_in;
wire    stream_process_V_dest_V_1_vld_out;
wire    stream_process_V_dest_V_1_ack_in;
wire    stream_process_V_dest_V_1_ack_out;
reg   [0:0] stream_process_V_dest_V_1_payload_A;
reg   [0:0] stream_process_V_dest_V_1_payload_B;
reg    stream_process_V_dest_V_1_sel_rd;
reg    stream_process_V_dest_V_1_sel_wr;
wire    stream_process_V_dest_V_1_sel;
wire    stream_process_V_dest_V_1_load_A;
wire    stream_process_V_dest_V_1_load_B;
reg   [1:0] stream_process_V_dest_V_1_state;
wire    stream_process_V_dest_V_1_state_cmp_full;
reg   [23:0] stream_passThrough_V_data_V_1_data_out;
wire    stream_passThrough_V_data_V_1_vld_in;
wire    stream_passThrough_V_data_V_1_vld_out;
wire    stream_passThrough_V_data_V_1_ack_in;
wire    stream_passThrough_V_data_V_1_ack_out;
reg   [23:0] stream_passThrough_V_data_V_1_payload_A;
reg   [23:0] stream_passThrough_V_data_V_1_payload_B;
reg    stream_passThrough_V_data_V_1_sel_rd;
reg    stream_passThrough_V_data_V_1_sel_wr;
wire    stream_passThrough_V_data_V_1_sel;
wire    stream_passThrough_V_data_V_1_load_A;
wire    stream_passThrough_V_data_V_1_load_B;
reg   [1:0] stream_passThrough_V_data_V_1_state;
wire    stream_passThrough_V_data_V_1_state_cmp_full;
reg   [2:0] stream_passThrough_V_keep_V_1_data_out;
wire    stream_passThrough_V_keep_V_1_vld_in;
wire    stream_passThrough_V_keep_V_1_vld_out;
wire    stream_passThrough_V_keep_V_1_ack_in;
wire    stream_passThrough_V_keep_V_1_ack_out;
reg   [2:0] stream_passThrough_V_keep_V_1_payload_A;
reg   [2:0] stream_passThrough_V_keep_V_1_payload_B;
reg    stream_passThrough_V_keep_V_1_sel_rd;
reg    stream_passThrough_V_keep_V_1_sel_wr;
wire    stream_passThrough_V_keep_V_1_sel;
wire    stream_passThrough_V_keep_V_1_load_A;
wire    stream_passThrough_V_keep_V_1_load_B;
reg   [1:0] stream_passThrough_V_keep_V_1_state;
wire    stream_passThrough_V_keep_V_1_state_cmp_full;
reg   [2:0] stream_passThrough_V_strb_V_1_data_out;
wire    stream_passThrough_V_strb_V_1_vld_in;
wire    stream_passThrough_V_strb_V_1_vld_out;
wire    stream_passThrough_V_strb_V_1_ack_in;
wire    stream_passThrough_V_strb_V_1_ack_out;
reg   [2:0] stream_passThrough_V_strb_V_1_payload_A;
reg   [2:0] stream_passThrough_V_strb_V_1_payload_B;
reg    stream_passThrough_V_strb_V_1_sel_rd;
reg    stream_passThrough_V_strb_V_1_sel_wr;
wire    stream_passThrough_V_strb_V_1_sel;
wire    stream_passThrough_V_strb_V_1_load_A;
wire    stream_passThrough_V_strb_V_1_load_B;
reg   [1:0] stream_passThrough_V_strb_V_1_state;
wire    stream_passThrough_V_strb_V_1_state_cmp_full;
reg   [0:0] stream_passThrough_V_user_V_1_data_out;
wire    stream_passThrough_V_user_V_1_vld_in;
wire    stream_passThrough_V_user_V_1_vld_out;
wire    stream_passThrough_V_user_V_1_ack_in;
wire    stream_passThrough_V_user_V_1_ack_out;
reg   [0:0] stream_passThrough_V_user_V_1_payload_A;
reg   [0:0] stream_passThrough_V_user_V_1_payload_B;
reg    stream_passThrough_V_user_V_1_sel_rd;
reg    stream_passThrough_V_user_V_1_sel_wr;
wire    stream_passThrough_V_user_V_1_sel;
wire    stream_passThrough_V_user_V_1_load_A;
wire    stream_passThrough_V_user_V_1_load_B;
reg   [1:0] stream_passThrough_V_user_V_1_state;
wire    stream_passThrough_V_user_V_1_state_cmp_full;
reg   [0:0] stream_passThrough_V_last_V_1_data_out;
wire    stream_passThrough_V_last_V_1_vld_in;
wire    stream_passThrough_V_last_V_1_vld_out;
wire    stream_passThrough_V_last_V_1_ack_in;
wire    stream_passThrough_V_last_V_1_ack_out;
reg   [0:0] stream_passThrough_V_last_V_1_payload_A;
reg   [0:0] stream_passThrough_V_last_V_1_payload_B;
reg    stream_passThrough_V_last_V_1_sel_rd;
reg    stream_passThrough_V_last_V_1_sel_wr;
wire    stream_passThrough_V_last_V_1_sel;
wire    stream_passThrough_V_last_V_1_load_A;
wire    stream_passThrough_V_last_V_1_load_B;
reg   [1:0] stream_passThrough_V_last_V_1_state;
wire    stream_passThrough_V_last_V_1_state_cmp_full;
reg   [0:0] stream_passThrough_V_id_V_1_data_out;
wire    stream_passThrough_V_id_V_1_vld_in;
wire    stream_passThrough_V_id_V_1_vld_out;
wire    stream_passThrough_V_id_V_1_ack_in;
wire    stream_passThrough_V_id_V_1_ack_out;
reg   [0:0] stream_passThrough_V_id_V_1_payload_A;
reg   [0:0] stream_passThrough_V_id_V_1_payload_B;
reg    stream_passThrough_V_id_V_1_sel_rd;
reg    stream_passThrough_V_id_V_1_sel_wr;
wire    stream_passThrough_V_id_V_1_sel;
wire    stream_passThrough_V_id_V_1_load_A;
wire    stream_passThrough_V_id_V_1_load_B;
reg   [1:0] stream_passThrough_V_id_V_1_state;
wire    stream_passThrough_V_id_V_1_state_cmp_full;
reg   [0:0] stream_passThrough_V_dest_V_1_data_out;
wire    stream_passThrough_V_dest_V_1_vld_in;
wire    stream_passThrough_V_dest_V_1_vld_out;
wire    stream_passThrough_V_dest_V_1_ack_in;
wire    stream_passThrough_V_dest_V_1_ack_out;
reg   [0:0] stream_passThrough_V_dest_V_1_payload_A;
reg   [0:0] stream_passThrough_V_dest_V_1_payload_B;
reg    stream_passThrough_V_dest_V_1_sel_rd;
reg    stream_passThrough_V_dest_V_1_sel_wr;
wire    stream_passThrough_V_dest_V_1_sel;
wire    stream_passThrough_V_dest_V_1_load_A;
wire    stream_passThrough_V_dest_V_1_load_B;
reg   [1:0] stream_passThrough_V_dest_V_1_state;
wire    stream_passThrough_V_dest_V_1_state_cmp_full;
reg   [10:0] t_V_1_reg_582;
reg   [10:0] j_i_reg_604;
wire   [0:0] exitcond5_i_fu_698_p2;
wire    ap_CS_fsm_state4;
wire   [10:0] i_V_fu_704_p2;
reg   [10:0] i_V_reg_858;
wire   [0:0] exitcond_i_fu_710_p2;
reg   [0:0] exitcond_i_reg_863;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire   [7:0] img0_data_stream_0_s_dout;
wire    img0_data_stream_0_s_empty_n;
reg    img0_data_stream_0_s_read;
wire   [7:0] img0_data_stream_1_s_dout;
wire    img0_data_stream_1_s_empty_n;
reg    img0_data_stream_1_s_read;
wire   [7:0] img0_data_stream_2_s_dout;
wire    img0_data_stream_2_s_empty_n;
reg    img0_data_stream_2_s_read;
wire    img1_data_stream_0_s_full_n;
reg    img1_data_stream_0_s_write;
wire    img1_data_stream_1_s_full_n;
reg    img1_data_stream_1_s_write;
wire    img1_data_stream_2_s_full_n;
reg    img1_data_stream_2_s_write;
wire    imgDuplicate_data_st_full_n;
reg    imgDuplicate_data_st_write;
wire    imgDuplicate_data_st_1_full_n;
reg    imgDuplicate_data_st_1_write;
wire    imgDuplicate_data_st_2_full_n;
reg    imgDuplicate_data_st_2_write;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_V_fu_716_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond1_fu_722_p2;
wire    ap_CS_fsm_state11;
wire   [10:0] i_fu_728_p2;
reg   [10:0] i_reg_876;
wire   [0:0] exitcond_fu_734_p2;
reg   [0:0] exitcond_reg_881;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state12_pp1_stage0_iter0;
wire   [7:0] img3_data_stream_0_s_dout;
wire    img3_data_stream_0_s_empty_n;
reg    img3_data_stream_0_s_read;
wire   [7:0] img3_data_stream_1_s_dout;
wire    img3_data_stream_1_s_empty_n;
reg    img3_data_stream_1_s_read;
wire   [7:0] img3_data_stream_2_s_dout;
wire    img3_data_stream_2_s_empty_n;
reg    img3_data_stream_2_s_read;
wire    img4_data_stream_0_s_full_n;
reg    img4_data_stream_0_s_write;
wire    img4_data_stream_1_s_full_n;
reg    img4_data_stream_1_s_write;
wire    img4_data_stream_2_s_full_n;
reg    img4_data_stream_2_s_write;
reg    ap_block_state13_pp1_stage0_iter1;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] j_fu_740_p2;
reg    ap_enable_reg_pp1_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state12;
wire    grp_Filter2D_fu_615_ap_start;
wire    grp_Filter2D_fu_615_ap_done;
wire    grp_Filter2D_fu_615_ap_idle;
wire    grp_Filter2D_fu_615_ap_ready;
wire    grp_Filter2D_fu_615_p_src_data_stream_0_V_read;
wire    grp_Filter2D_fu_615_p_src_data_stream_1_V_read;
wire    grp_Filter2D_fu_615_p_src_data_stream_2_V_read;
wire   [7:0] grp_Filter2D_fu_615_p_dst_data_stream_0_V_din;
wire    grp_Filter2D_fu_615_p_dst_data_stream_0_V_write;
wire   [7:0] grp_Filter2D_fu_615_p_dst_data_stream_1_V_din;
wire    grp_Filter2D_fu_615_p_dst_data_stream_1_V_write;
wire   [7:0] grp_Filter2D_fu_615_p_dst_data_stream_2_V_din;
wire    grp_Filter2D_fu_615_p_dst_data_stream_2_V_write;
wire    grp_AXIvideo2Mat_fu_625_ap_start;
wire    grp_AXIvideo2Mat_fu_625_ap_done;
wire    grp_AXIvideo2Mat_fu_625_ap_idle;
wire    grp_AXIvideo2Mat_fu_625_ap_ready;
wire    grp_AXIvideo2Mat_fu_625_stream_in_TVALID;
wire    grp_AXIvideo2Mat_fu_625_stream_in_TREADY;
wire   [7:0] grp_AXIvideo2Mat_fu_625_img_data_stream_0_V_din;
wire    grp_AXIvideo2Mat_fu_625_img_data_stream_0_V_write;
wire   [7:0] grp_AXIvideo2Mat_fu_625_img_data_stream_1_V_din;
wire    grp_AXIvideo2Mat_fu_625_img_data_stream_1_V_write;
wire   [7:0] grp_AXIvideo2Mat_fu_625_img_data_stream_2_V_din;
wire    grp_AXIvideo2Mat_fu_625_img_data_stream_2_V_write;
wire    grp_CvtColor_fu_646_ap_start;
wire    grp_CvtColor_fu_646_ap_done;
wire    grp_CvtColor_fu_646_ap_idle;
wire    grp_CvtColor_fu_646_ap_ready;
wire    grp_CvtColor_fu_646_p_src_data_stream_0_V_read;
wire    grp_CvtColor_fu_646_p_src_data_stream_1_V_read;
wire    grp_CvtColor_fu_646_p_src_data_stream_2_V_read;
wire   [7:0] grp_CvtColor_fu_646_p_dst_data_stream_0_V_din;
wire    grp_CvtColor_fu_646_p_dst_data_stream_0_V_write;
wire   [7:0] grp_CvtColor_fu_646_p_dst_data_stream_1_V_din;
wire    grp_CvtColor_fu_646_p_dst_data_stream_1_V_write;
wire   [7:0] grp_CvtColor_fu_646_p_dst_data_stream_2_V_din;
wire    grp_CvtColor_fu_646_p_dst_data_stream_2_V_write;
wire    grp_Mat2AXIvideo_fu_656_ap_start;
wire    grp_Mat2AXIvideo_fu_656_ap_done;
wire    grp_Mat2AXIvideo_fu_656_ap_idle;
wire    grp_Mat2AXIvideo_fu_656_ap_ready;
wire    grp_Mat2AXIvideo_fu_656_img_data_stream_0_V_read;
wire    grp_Mat2AXIvideo_fu_656_img_data_stream_1_V_read;
wire    grp_Mat2AXIvideo_fu_656_img_data_stream_2_V_read;
wire   [23:0] grp_Mat2AXIvideo_fu_656_stream_passThrough_TDATA;
wire    grp_Mat2AXIvideo_fu_656_stream_passThrough_TVALID;
wire    grp_Mat2AXIvideo_fu_656_stream_passThrough_TREADY;
wire   [2:0] grp_Mat2AXIvideo_fu_656_stream_passThrough_TKEEP;
wire   [2:0] grp_Mat2AXIvideo_fu_656_stream_passThrough_TSTRB;
wire   [0:0] grp_Mat2AXIvideo_fu_656_stream_passThrough_TUSER;
wire   [0:0] grp_Mat2AXIvideo_fu_656_stream_passThrough_TLAST;
wire   [0:0] grp_Mat2AXIvideo_fu_656_stream_passThrough_TID;
wire   [0:0] grp_Mat2AXIvideo_fu_656_stream_passThrough_TDEST;
wire    grp_Mat2AXIvideo_fu_677_ap_start;
wire    grp_Mat2AXIvideo_fu_677_ap_done;
wire    grp_Mat2AXIvideo_fu_677_ap_idle;
wire    grp_Mat2AXIvideo_fu_677_ap_ready;
wire    grp_Mat2AXIvideo_fu_677_img_data_stream_0_V_read;
wire    grp_Mat2AXIvideo_fu_677_img_data_stream_1_V_read;
wire    grp_Mat2AXIvideo_fu_677_img_data_stream_2_V_read;
wire   [23:0] grp_Mat2AXIvideo_fu_677_stream_passThrough_TDATA;
wire    grp_Mat2AXIvideo_fu_677_stream_passThrough_TVALID;
wire    grp_Mat2AXIvideo_fu_677_stream_passThrough_TREADY;
wire   [2:0] grp_Mat2AXIvideo_fu_677_stream_passThrough_TKEEP;
wire   [2:0] grp_Mat2AXIvideo_fu_677_stream_passThrough_TSTRB;
wire   [0:0] grp_Mat2AXIvideo_fu_677_stream_passThrough_TUSER;
wire   [0:0] grp_Mat2AXIvideo_fu_677_stream_passThrough_TLAST;
wire   [0:0] grp_Mat2AXIvideo_fu_677_stream_passThrough_TID;
wire   [0:0] grp_Mat2AXIvideo_fu_677_stream_passThrough_TDEST;
reg   [10:0] t_V_reg_571;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
reg   [10:0] i_i_reg_593;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
reg    grp_Filter2D_fu_615_ap_start_reg;
wire    ap_CS_fsm_state9;
wire   [7:0] img2_data_stream_0_s_dout;
wire    img2_data_stream_0_s_empty_n;
reg    img2_data_stream_0_s_read;
wire   [7:0] img2_data_stream_1_s_dout;
wire    img2_data_stream_1_s_empty_n;
reg    img2_data_stream_1_s_read;
wire   [7:0] img2_data_stream_2_s_dout;
wire    img2_data_stream_2_s_empty_n;
reg    img2_data_stream_2_s_read;
wire    img3_data_stream_0_s_full_n;
reg    img3_data_stream_0_s_write;
wire    img3_data_stream_1_s_full_n;
reg    img3_data_stream_1_s_write;
wire    img3_data_stream_2_s_full_n;
reg    img3_data_stream_2_s_write;
reg    grp_AXIvideo2Mat_fu_625_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    img0_data_stream_0_s_full_n;
reg    img0_data_stream_0_s_write;
wire    img0_data_stream_1_s_full_n;
reg    img0_data_stream_1_s_write;
wire    img0_data_stream_2_s_full_n;
reg    img0_data_stream_2_s_write;
reg    grp_CvtColor_fu_646_ap_start_reg;
wire   [7:0] img1_data_stream_0_s_dout;
wire    img1_data_stream_0_s_empty_n;
reg    img1_data_stream_0_s_read;
wire    ap_CS_fsm_state8;
wire   [7:0] img1_data_stream_1_s_dout;
wire    img1_data_stream_1_s_empty_n;
reg    img1_data_stream_1_s_read;
wire   [7:0] img1_data_stream_2_s_dout;
wire    img1_data_stream_2_s_empty_n;
reg    img1_data_stream_2_s_read;
wire    img2_data_stream_0_s_full_n;
reg    img2_data_stream_0_s_write;
wire    img2_data_stream_1_s_full_n;
reg    img2_data_stream_1_s_write;
wire    img2_data_stream_2_s_full_n;
reg    img2_data_stream_2_s_write;
reg    grp_Mat2AXIvideo_fu_656_ap_start_reg;
wire   [7:0] img4_data_stream_0_s_dout;
wire    img4_data_stream_0_s_empty_n;
reg    img4_data_stream_0_s_read;
wire    ap_CS_fsm_state15;
wire   [7:0] img4_data_stream_1_s_dout;
wire    img4_data_stream_1_s_empty_n;
reg    img4_data_stream_1_s_read;
wire   [7:0] img4_data_stream_2_s_dout;
wire    img4_data_stream_2_s_empty_n;
reg    img4_data_stream_2_s_read;
reg    grp_Mat2AXIvideo_fu_677_ap_start_reg;
wire   [7:0] imgDuplicate_data_st_dout;
wire    imgDuplicate_data_st_empty_n;
reg    imgDuplicate_data_st_read;
wire   [7:0] imgDuplicate_data_st_1_dout;
wire    imgDuplicate_data_st_1_empty_n;
reg    imgDuplicate_data_st_1_read;
wire   [7:0] imgDuplicate_data_st_2_dout;
wire    imgDuplicate_data_st_2_empty_n;
reg    imgDuplicate_data_st_2_read;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire    ap_block_pp0_stage0;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_state16;
reg    ap_block_state16;
reg   [13:0] ap_NS_fsm;
reg    ap_block_state15_on_subcall_done;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 stream_in_V_data_V_0_sel_rd = 1'b0;
#0 stream_in_V_data_V_0_sel_wr = 1'b0;
#0 stream_in_V_data_V_0_state = 2'd0;
#0 stream_in_V_keep_V_0_sel_rd = 1'b0;
#0 stream_in_V_keep_V_0_sel_wr = 1'b0;
#0 stream_in_V_keep_V_0_state = 2'd0;
#0 stream_in_V_strb_V_0_sel_rd = 1'b0;
#0 stream_in_V_strb_V_0_sel_wr = 1'b0;
#0 stream_in_V_strb_V_0_state = 2'd0;
#0 stream_in_V_user_V_0_sel_rd = 1'b0;
#0 stream_in_V_user_V_0_sel_wr = 1'b0;
#0 stream_in_V_user_V_0_state = 2'd0;
#0 stream_in_V_last_V_0_sel_rd = 1'b0;
#0 stream_in_V_last_V_0_sel_wr = 1'b0;
#0 stream_in_V_last_V_0_state = 2'd0;
#0 stream_in_V_id_V_0_sel_rd = 1'b0;
#0 stream_in_V_id_V_0_sel_wr = 1'b0;
#0 stream_in_V_id_V_0_state = 2'd0;
#0 stream_in_V_dest_V_0_sel_rd = 1'b0;
#0 stream_in_V_dest_V_0_sel_wr = 1'b0;
#0 stream_in_V_dest_V_0_state = 2'd0;
#0 stream_process_V_data_V_1_sel_rd = 1'b0;
#0 stream_process_V_data_V_1_sel_wr = 1'b0;
#0 stream_process_V_data_V_1_state = 2'd0;
#0 stream_process_V_keep_V_1_sel_rd = 1'b0;
#0 stream_process_V_keep_V_1_sel_wr = 1'b0;
#0 stream_process_V_keep_V_1_state = 2'd0;
#0 stream_process_V_strb_V_1_sel_rd = 1'b0;
#0 stream_process_V_strb_V_1_sel_wr = 1'b0;
#0 stream_process_V_strb_V_1_state = 2'd0;
#0 stream_process_V_user_V_1_sel_rd = 1'b0;
#0 stream_process_V_user_V_1_sel_wr = 1'b0;
#0 stream_process_V_user_V_1_state = 2'd0;
#0 stream_process_V_last_V_1_sel_rd = 1'b0;
#0 stream_process_V_last_V_1_sel_wr = 1'b0;
#0 stream_process_V_last_V_1_state = 2'd0;
#0 stream_process_V_id_V_1_sel_rd = 1'b0;
#0 stream_process_V_id_V_1_sel_wr = 1'b0;
#0 stream_process_V_id_V_1_state = 2'd0;
#0 stream_process_V_dest_V_1_sel_rd = 1'b0;
#0 stream_process_V_dest_V_1_sel_wr = 1'b0;
#0 stream_process_V_dest_V_1_state = 2'd0;
#0 stream_passThrough_V_data_V_1_sel_rd = 1'b0;
#0 stream_passThrough_V_data_V_1_sel_wr = 1'b0;
#0 stream_passThrough_V_data_V_1_state = 2'd0;
#0 stream_passThrough_V_keep_V_1_sel_rd = 1'b0;
#0 stream_passThrough_V_keep_V_1_sel_wr = 1'b0;
#0 stream_passThrough_V_keep_V_1_state = 2'd0;
#0 stream_passThrough_V_strb_V_1_sel_rd = 1'b0;
#0 stream_passThrough_V_strb_V_1_sel_wr = 1'b0;
#0 stream_passThrough_V_strb_V_1_state = 2'd0;
#0 stream_passThrough_V_user_V_1_sel_rd = 1'b0;
#0 stream_passThrough_V_user_V_1_sel_wr = 1'b0;
#0 stream_passThrough_V_user_V_1_state = 2'd0;
#0 stream_passThrough_V_last_V_1_sel_rd = 1'b0;
#0 stream_passThrough_V_last_V_1_sel_wr = 1'b0;
#0 stream_passThrough_V_last_V_1_state = 2'd0;
#0 stream_passThrough_V_id_V_1_sel_rd = 1'b0;
#0 stream_passThrough_V_id_V_1_sel_wr = 1'b0;
#0 stream_passThrough_V_id_V_1_state = 2'd0;
#0 stream_passThrough_V_dest_V_1_sel_rd = 1'b0;
#0 stream_passThrough_V_dest_V_1_sel_wr = 1'b0;
#0 stream_passThrough_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 grp_Filter2D_fu_615_ap_start_reg = 1'b0;
#0 grp_AXIvideo2Mat_fu_625_ap_start_reg = 1'b0;
#0 grp_CvtColor_fu_646_ap_start_reg = 1'b0;
#0 grp_Mat2AXIvideo_fu_656_ap_start_reg = 1'b0;
#0 grp_Mat2AXIvideo_fu_677_ap_start_reg = 1'b0;
end

Filter2D grp_Filter2D_fu_615(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Filter2D_fu_615_ap_start),
    .ap_done(grp_Filter2D_fu_615_ap_done),
    .ap_idle(grp_Filter2D_fu_615_ap_idle),
    .ap_ready(grp_Filter2D_fu_615_ap_ready),
    .p_src_data_stream_0_V_dout(img2_data_stream_0_s_dout),
    .p_src_data_stream_0_V_empty_n(img2_data_stream_0_s_empty_n),
    .p_src_data_stream_0_V_read(grp_Filter2D_fu_615_p_src_data_stream_0_V_read),
    .p_src_data_stream_1_V_dout(img2_data_stream_1_s_dout),
    .p_src_data_stream_1_V_empty_n(img2_data_stream_1_s_empty_n),
    .p_src_data_stream_1_V_read(grp_Filter2D_fu_615_p_src_data_stream_1_V_read),
    .p_src_data_stream_2_V_dout(img2_data_stream_2_s_dout),
    .p_src_data_stream_2_V_empty_n(img2_data_stream_2_s_empty_n),
    .p_src_data_stream_2_V_read(grp_Filter2D_fu_615_p_src_data_stream_2_V_read),
    .p_dst_data_stream_0_V_din(grp_Filter2D_fu_615_p_dst_data_stream_0_V_din),
    .p_dst_data_stream_0_V_full_n(img3_data_stream_0_s_full_n),
    .p_dst_data_stream_0_V_write(grp_Filter2D_fu_615_p_dst_data_stream_0_V_write),
    .p_dst_data_stream_1_V_din(grp_Filter2D_fu_615_p_dst_data_stream_1_V_din),
    .p_dst_data_stream_1_V_full_n(img3_data_stream_1_s_full_n),
    .p_dst_data_stream_1_V_write(grp_Filter2D_fu_615_p_dst_data_stream_1_V_write),
    .p_dst_data_stream_2_V_din(grp_Filter2D_fu_615_p_dst_data_stream_2_V_din),
    .p_dst_data_stream_2_V_full_n(img3_data_stream_2_s_full_n),
    .p_dst_data_stream_2_V_write(grp_Filter2D_fu_615_p_dst_data_stream_2_V_write)
);

AXIvideo2Mat grp_AXIvideo2Mat_fu_625(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AXIvideo2Mat_fu_625_ap_start),
    .ap_done(grp_AXIvideo2Mat_fu_625_ap_done),
    .ap_idle(grp_AXIvideo2Mat_fu_625_ap_idle),
    .ap_ready(grp_AXIvideo2Mat_fu_625_ap_ready),
    .stream_in_TDATA(stream_in_V_data_V_0_data_out),
    .stream_in_TVALID(grp_AXIvideo2Mat_fu_625_stream_in_TVALID),
    .stream_in_TREADY(grp_AXIvideo2Mat_fu_625_stream_in_TREADY),
    .stream_in_TKEEP(stream_in_V_keep_V_0_data_out),
    .stream_in_TSTRB(stream_in_V_strb_V_0_data_out),
    .stream_in_TUSER(stream_in_V_user_V_0_data_out),
    .stream_in_TLAST(stream_in_V_last_V_0_data_out),
    .stream_in_TID(stream_in_V_id_V_0_data_out),
    .stream_in_TDEST(stream_in_V_dest_V_0_data_out),
    .img_data_stream_0_V_din(grp_AXIvideo2Mat_fu_625_img_data_stream_0_V_din),
    .img_data_stream_0_V_full_n(img0_data_stream_0_s_full_n),
    .img_data_stream_0_V_write(grp_AXIvideo2Mat_fu_625_img_data_stream_0_V_write),
    .img_data_stream_1_V_din(grp_AXIvideo2Mat_fu_625_img_data_stream_1_V_din),
    .img_data_stream_1_V_full_n(img0_data_stream_1_s_full_n),
    .img_data_stream_1_V_write(grp_AXIvideo2Mat_fu_625_img_data_stream_1_V_write),
    .img_data_stream_2_V_din(grp_AXIvideo2Mat_fu_625_img_data_stream_2_V_din),
    .img_data_stream_2_V_full_n(img0_data_stream_2_s_full_n),
    .img_data_stream_2_V_write(grp_AXIvideo2Mat_fu_625_img_data_stream_2_V_write)
);

CvtColor grp_CvtColor_fu_646(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_CvtColor_fu_646_ap_start),
    .ap_done(grp_CvtColor_fu_646_ap_done),
    .ap_idle(grp_CvtColor_fu_646_ap_idle),
    .ap_ready(grp_CvtColor_fu_646_ap_ready),
    .p_src_data_stream_0_V_dout(img1_data_stream_0_s_dout),
    .p_src_data_stream_0_V_empty_n(img1_data_stream_0_s_empty_n),
    .p_src_data_stream_0_V_read(grp_CvtColor_fu_646_p_src_data_stream_0_V_read),
    .p_src_data_stream_1_V_dout(img1_data_stream_1_s_dout),
    .p_src_data_stream_1_V_empty_n(img1_data_stream_1_s_empty_n),
    .p_src_data_stream_1_V_read(grp_CvtColor_fu_646_p_src_data_stream_1_V_read),
    .p_src_data_stream_2_V_dout(img1_data_stream_2_s_dout),
    .p_src_data_stream_2_V_empty_n(img1_data_stream_2_s_empty_n),
    .p_src_data_stream_2_V_read(grp_CvtColor_fu_646_p_src_data_stream_2_V_read),
    .p_dst_data_stream_0_V_din(grp_CvtColor_fu_646_p_dst_data_stream_0_V_din),
    .p_dst_data_stream_0_V_full_n(img2_data_stream_0_s_full_n),
    .p_dst_data_stream_0_V_write(grp_CvtColor_fu_646_p_dst_data_stream_0_V_write),
    .p_dst_data_stream_1_V_din(grp_CvtColor_fu_646_p_dst_data_stream_1_V_din),
    .p_dst_data_stream_1_V_full_n(img2_data_stream_1_s_full_n),
    .p_dst_data_stream_1_V_write(grp_CvtColor_fu_646_p_dst_data_stream_1_V_write),
    .p_dst_data_stream_2_V_din(grp_CvtColor_fu_646_p_dst_data_stream_2_V_din),
    .p_dst_data_stream_2_V_full_n(img2_data_stream_2_s_full_n),
    .p_dst_data_stream_2_V_write(grp_CvtColor_fu_646_p_dst_data_stream_2_V_write)
);

Mat2AXIvideo grp_Mat2AXIvideo_fu_656(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Mat2AXIvideo_fu_656_ap_start),
    .ap_done(grp_Mat2AXIvideo_fu_656_ap_done),
    .ap_idle(grp_Mat2AXIvideo_fu_656_ap_idle),
    .ap_ready(grp_Mat2AXIvideo_fu_656_ap_ready),
    .img_data_stream_0_V_dout(img4_data_stream_0_s_dout),
    .img_data_stream_0_V_empty_n(img4_data_stream_0_s_empty_n),
    .img_data_stream_0_V_read(grp_Mat2AXIvideo_fu_656_img_data_stream_0_V_read),
    .img_data_stream_1_V_dout(img4_data_stream_1_s_dout),
    .img_data_stream_1_V_empty_n(img4_data_stream_1_s_empty_n),
    .img_data_stream_1_V_read(grp_Mat2AXIvideo_fu_656_img_data_stream_1_V_read),
    .img_data_stream_2_V_dout(img4_data_stream_2_s_dout),
    .img_data_stream_2_V_empty_n(img4_data_stream_2_s_empty_n),
    .img_data_stream_2_V_read(grp_Mat2AXIvideo_fu_656_img_data_stream_2_V_read),
    .stream_passThrough_TDATA(grp_Mat2AXIvideo_fu_656_stream_passThrough_TDATA),
    .stream_passThrough_TVALID(grp_Mat2AXIvideo_fu_656_stream_passThrough_TVALID),
    .stream_passThrough_TREADY(grp_Mat2AXIvideo_fu_656_stream_passThrough_TREADY),
    .stream_passThrough_TKEEP(grp_Mat2AXIvideo_fu_656_stream_passThrough_TKEEP),
    .stream_passThrough_TSTRB(grp_Mat2AXIvideo_fu_656_stream_passThrough_TSTRB),
    .stream_passThrough_TUSER(grp_Mat2AXIvideo_fu_656_stream_passThrough_TUSER),
    .stream_passThrough_TLAST(grp_Mat2AXIvideo_fu_656_stream_passThrough_TLAST),
    .stream_passThrough_TID(grp_Mat2AXIvideo_fu_656_stream_passThrough_TID),
    .stream_passThrough_TDEST(grp_Mat2AXIvideo_fu_656_stream_passThrough_TDEST)
);

Mat2AXIvideo grp_Mat2AXIvideo_fu_677(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Mat2AXIvideo_fu_677_ap_start),
    .ap_done(grp_Mat2AXIvideo_fu_677_ap_done),
    .ap_idle(grp_Mat2AXIvideo_fu_677_ap_idle),
    .ap_ready(grp_Mat2AXIvideo_fu_677_ap_ready),
    .img_data_stream_0_V_dout(imgDuplicate_data_st_dout),
    .img_data_stream_0_V_empty_n(imgDuplicate_data_st_empty_n),
    .img_data_stream_0_V_read(grp_Mat2AXIvideo_fu_677_img_data_stream_0_V_read),
    .img_data_stream_1_V_dout(imgDuplicate_data_st_1_dout),
    .img_data_stream_1_V_empty_n(imgDuplicate_data_st_1_empty_n),
    .img_data_stream_1_V_read(grp_Mat2AXIvideo_fu_677_img_data_stream_1_V_read),
    .img_data_stream_2_V_dout(imgDuplicate_data_st_2_dout),
    .img_data_stream_2_V_empty_n(imgDuplicate_data_st_2_empty_n),
    .img_data_stream_2_V_read(grp_Mat2AXIvideo_fu_677_img_data_stream_2_V_read),
    .stream_passThrough_TDATA(grp_Mat2AXIvideo_fu_677_stream_passThrough_TDATA),
    .stream_passThrough_TVALID(grp_Mat2AXIvideo_fu_677_stream_passThrough_TVALID),
    .stream_passThrough_TREADY(grp_Mat2AXIvideo_fu_677_stream_passThrough_TREADY),
    .stream_passThrough_TKEEP(grp_Mat2AXIvideo_fu_677_stream_passThrough_TKEEP),
    .stream_passThrough_TSTRB(grp_Mat2AXIvideo_fu_677_stream_passThrough_TSTRB),
    .stream_passThrough_TUSER(grp_Mat2AXIvideo_fu_677_stream_passThrough_TUSER),
    .stream_passThrough_TLAST(grp_Mat2AXIvideo_fu_677_stream_passThrough_TLAST),
    .stream_passThrough_TID(grp_Mat2AXIvideo_fu_677_stream_passThrough_TID),
    .stream_passThrough_TDEST(grp_Mat2AXIvideo_fu_677_stream_passThrough_TDEST)
);

fifo_w8_d1_A img0_data_stream_0_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_AXIvideo2Mat_fu_625_img_data_stream_0_V_din),
    .if_full_n(img0_data_stream_0_s_full_n),
    .if_write(img0_data_stream_0_s_write),
    .if_dout(img0_data_stream_0_s_dout),
    .if_empty_n(img0_data_stream_0_s_empty_n),
    .if_read(img0_data_stream_0_s_read)
);

fifo_w8_d1_A img0_data_stream_1_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_AXIvideo2Mat_fu_625_img_data_stream_1_V_din),
    .if_full_n(img0_data_stream_1_s_full_n),
    .if_write(img0_data_stream_1_s_write),
    .if_dout(img0_data_stream_1_s_dout),
    .if_empty_n(img0_data_stream_1_s_empty_n),
    .if_read(img0_data_stream_1_s_read)
);

fifo_w8_d1_A img0_data_stream_2_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_AXIvideo2Mat_fu_625_img_data_stream_2_V_din),
    .if_full_n(img0_data_stream_2_s_full_n),
    .if_write(img0_data_stream_2_s_write),
    .if_dout(img0_data_stream_2_s_dout),
    .if_empty_n(img0_data_stream_2_s_empty_n),
    .if_read(img0_data_stream_2_s_read)
);

fifo_w8_d1_A img1_data_stream_0_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(img0_data_stream_0_s_dout),
    .if_full_n(img1_data_stream_0_s_full_n),
    .if_write(img1_data_stream_0_s_write),
    .if_dout(img1_data_stream_0_s_dout),
    .if_empty_n(img1_data_stream_0_s_empty_n),
    .if_read(img1_data_stream_0_s_read)
);

fifo_w8_d1_A img1_data_stream_1_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(img0_data_stream_1_s_dout),
    .if_full_n(img1_data_stream_1_s_full_n),
    .if_write(img1_data_stream_1_s_write),
    .if_dout(img1_data_stream_1_s_dout),
    .if_empty_n(img1_data_stream_1_s_empty_n),
    .if_read(img1_data_stream_1_s_read)
);

fifo_w8_d1_A img1_data_stream_2_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(img0_data_stream_2_s_dout),
    .if_full_n(img1_data_stream_2_s_full_n),
    .if_write(img1_data_stream_2_s_write),
    .if_dout(img1_data_stream_2_s_dout),
    .if_empty_n(img1_data_stream_2_s_empty_n),
    .if_read(img1_data_stream_2_s_read)
);

fifo_w8_d1_A img2_data_stream_0_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_CvtColor_fu_646_p_dst_data_stream_0_V_din),
    .if_full_n(img2_data_stream_0_s_full_n),
    .if_write(img2_data_stream_0_s_write),
    .if_dout(img2_data_stream_0_s_dout),
    .if_empty_n(img2_data_stream_0_s_empty_n),
    .if_read(img2_data_stream_0_s_read)
);

fifo_w8_d1_A img2_data_stream_1_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_CvtColor_fu_646_p_dst_data_stream_1_V_din),
    .if_full_n(img2_data_stream_1_s_full_n),
    .if_write(img2_data_stream_1_s_write),
    .if_dout(img2_data_stream_1_s_dout),
    .if_empty_n(img2_data_stream_1_s_empty_n),
    .if_read(img2_data_stream_1_s_read)
);

fifo_w8_d1_A img2_data_stream_2_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_CvtColor_fu_646_p_dst_data_stream_2_V_din),
    .if_full_n(img2_data_stream_2_s_full_n),
    .if_write(img2_data_stream_2_s_write),
    .if_dout(img2_data_stream_2_s_dout),
    .if_empty_n(img2_data_stream_2_s_empty_n),
    .if_read(img2_data_stream_2_s_read)
);

fifo_w8_d1_A img3_data_stream_0_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Filter2D_fu_615_p_dst_data_stream_0_V_din),
    .if_full_n(img3_data_stream_0_s_full_n),
    .if_write(img3_data_stream_0_s_write),
    .if_dout(img3_data_stream_0_s_dout),
    .if_empty_n(img3_data_stream_0_s_empty_n),
    .if_read(img3_data_stream_0_s_read)
);

fifo_w8_d1_A img3_data_stream_1_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Filter2D_fu_615_p_dst_data_stream_1_V_din),
    .if_full_n(img3_data_stream_1_s_full_n),
    .if_write(img3_data_stream_1_s_write),
    .if_dout(img3_data_stream_1_s_dout),
    .if_empty_n(img3_data_stream_1_s_empty_n),
    .if_read(img3_data_stream_1_s_read)
);

fifo_w8_d1_A img3_data_stream_2_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Filter2D_fu_615_p_dst_data_stream_2_V_din),
    .if_full_n(img3_data_stream_2_s_full_n),
    .if_write(img3_data_stream_2_s_write),
    .if_dout(img3_data_stream_2_s_dout),
    .if_empty_n(img3_data_stream_2_s_empty_n),
    .if_read(img3_data_stream_2_s_read)
);

fifo_w8_d1_A img4_data_stream_0_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(img3_data_stream_0_s_dout),
    .if_full_n(img4_data_stream_0_s_full_n),
    .if_write(img4_data_stream_0_s_write),
    .if_dout(img4_data_stream_0_s_dout),
    .if_empty_n(img4_data_stream_0_s_empty_n),
    .if_read(img4_data_stream_0_s_read)
);

fifo_w8_d1_A img4_data_stream_1_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(img3_data_stream_0_s_dout),
    .if_full_n(img4_data_stream_1_s_full_n),
    .if_write(img4_data_stream_1_s_write),
    .if_dout(img4_data_stream_1_s_dout),
    .if_empty_n(img4_data_stream_1_s_empty_n),
    .if_read(img4_data_stream_1_s_read)
);

fifo_w8_d1_A img4_data_stream_2_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(img3_data_stream_0_s_dout),
    .if_full_n(img4_data_stream_2_s_full_n),
    .if_write(img4_data_stream_2_s_write),
    .if_dout(img4_data_stream_2_s_dout),
    .if_empty_n(img4_data_stream_2_s_empty_n),
    .if_read(img4_data_stream_2_s_read)
);

fifo_w8_d1_A imgDuplicate_data_st_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(img0_data_stream_0_s_dout),
    .if_full_n(imgDuplicate_data_st_full_n),
    .if_write(imgDuplicate_data_st_write),
    .if_dout(imgDuplicate_data_st_dout),
    .if_empty_n(imgDuplicate_data_st_empty_n),
    .if_read(imgDuplicate_data_st_read)
);

fifo_w8_d1_A imgDuplicate_data_st_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(img0_data_stream_1_s_dout),
    .if_full_n(imgDuplicate_data_st_1_full_n),
    .if_write(imgDuplicate_data_st_1_write),
    .if_dout(imgDuplicate_data_st_1_dout),
    .if_empty_n(imgDuplicate_data_st_1_empty_n),
    .if_read(imgDuplicate_data_st_1_read)
);

fifo_w8_d1_A imgDuplicate_data_st_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(img0_data_stream_2_s_dout),
    .if_full_n(imgDuplicate_data_st_2_full_n),
    .if_write(imgDuplicate_data_st_2_write),
    .if_dout(imgDuplicate_data_st_2_dout),
    .if_empty_n(imgDuplicate_data_st_2_empty_n),
    .if_read(imgDuplicate_data_st_2_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond5_i_fu_698_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond5_i_fu_698_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((exitcond1_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state12) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state12);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((exitcond1_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AXIvideo2Mat_fu_625_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_AXIvideo2Mat_fu_625_ap_start_reg <= 1'b1;
        end else if ((grp_AXIvideo2Mat_fu_625_ap_ready == 1'b1)) begin
            grp_AXIvideo2Mat_fu_625_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_CvtColor_fu_646_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond5_i_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_CvtColor_fu_646_ap_start_reg <= 1'b1;
        end else if ((grp_CvtColor_fu_646_ap_ready == 1'b1)) begin
            grp_CvtColor_fu_646_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Filter2D_fu_615_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_Filter2D_fu_615_ap_start_reg <= 1'b1;
        end else if ((grp_Filter2D_fu_615_ap_ready == 1'b1)) begin
            grp_Filter2D_fu_615_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Mat2AXIvideo_fu_656_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond1_fu_722_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
            grp_Mat2AXIvideo_fu_656_ap_start_reg <= 1'b1;
        end else if ((grp_Mat2AXIvideo_fu_656_ap_ready == 1'b1)) begin
            grp_Mat2AXIvideo_fu_656_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Mat2AXIvideo_fu_677_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond1_fu_722_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
            grp_Mat2AXIvideo_fu_677_ap_start_reg <= 1'b1;
        end else if ((grp_Mat2AXIvideo_fu_677_ap_ready == 1'b1)) begin
            grp_Mat2AXIvideo_fu_677_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_out == 1'b1) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
            stream_in_V_data_V_0_sel_rd <= ~stream_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_in == 1'b1) & (stream_in_V_data_V_0_vld_in == 1'b1))) begin
            stream_in_V_data_V_0_sel_wr <= ~stream_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_data_V_0_state == 2'd2) & (stream_in_V_data_V_0_vld_in == 1'b0)) | ((stream_in_V_data_V_0_state == 2'd3) & (stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd2;
        end else if ((((stream_in_V_data_V_0_state == 2'd1) & (stream_in_V_data_V_0_ack_out == 1'b0)) | ((stream_in_V_data_V_0_state == 2'd3) & (stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)) & ~((stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)) & (stream_in_V_data_V_0_state == 2'd3)) | ((stream_in_V_data_V_0_state == 2'd1) & (stream_in_V_data_V_0_ack_out == 1'b1)) | ((stream_in_V_data_V_0_state == 2'd2) & (stream_in_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd3;
        end else begin
            stream_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_dest_V_0_ack_out == 1'b1) & (stream_in_V_dest_V_0_vld_out == 1'b1))) begin
            stream_in_V_dest_V_0_sel_rd <= ~stream_in_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_dest_V_0_ack_in == 1'b1) & (stream_in_V_dest_V_0_vld_in == 1'b1))) begin
            stream_in_V_dest_V_0_sel_wr <= ~stream_in_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_dest_V_0_state == 2'd2) & (stream_in_V_dest_V_0_vld_in == 1'b0)) | ((stream_in_V_dest_V_0_state == 2'd3) & (stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_ack_out == 1'b1)))) begin
            stream_in_V_dest_V_0_state <= 2'd2;
        end else if ((((stream_in_V_dest_V_0_state == 2'd1) & (stream_in_V_dest_V_0_ack_out == 1'b0)) | ((stream_in_V_dest_V_0_state == 2'd3) & (stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_vld_in == 1'b1)))) begin
            stream_in_V_dest_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_ack_out == 1'b1)) & ~((stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_vld_in == 1'b1)) & (stream_in_V_dest_V_0_state == 2'd3)) | ((stream_in_V_dest_V_0_state == 2'd1) & (stream_in_V_dest_V_0_ack_out == 1'b1)) | ((stream_in_V_dest_V_0_state == 2'd2) & (stream_in_V_dest_V_0_vld_in == 1'b1)))) begin
            stream_in_V_dest_V_0_state <= 2'd3;
        end else begin
            stream_in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_id_V_0_ack_out == 1'b1) & (stream_in_V_id_V_0_vld_out == 1'b1))) begin
            stream_in_V_id_V_0_sel_rd <= ~stream_in_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_id_V_0_ack_in == 1'b1) & (stream_in_V_id_V_0_vld_in == 1'b1))) begin
            stream_in_V_id_V_0_sel_wr <= ~stream_in_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_id_V_0_state == 2'd2) & (stream_in_V_id_V_0_vld_in == 1'b0)) | ((stream_in_V_id_V_0_state == 2'd3) & (stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_ack_out == 1'b1)))) begin
            stream_in_V_id_V_0_state <= 2'd2;
        end else if ((((stream_in_V_id_V_0_state == 2'd1) & (stream_in_V_id_V_0_ack_out == 1'b0)) | ((stream_in_V_id_V_0_state == 2'd3) & (stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_vld_in == 1'b1)))) begin
            stream_in_V_id_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_ack_out == 1'b1)) & ~((stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_vld_in == 1'b1)) & (stream_in_V_id_V_0_state == 2'd3)) | ((stream_in_V_id_V_0_state == 2'd1) & (stream_in_V_id_V_0_ack_out == 1'b1)) | ((stream_in_V_id_V_0_state == 2'd2) & (stream_in_V_id_V_0_vld_in == 1'b1)))) begin
            stream_in_V_id_V_0_state <= 2'd3;
        end else begin
            stream_in_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_keep_V_0_ack_out == 1'b1) & (stream_in_V_keep_V_0_vld_out == 1'b1))) begin
            stream_in_V_keep_V_0_sel_rd <= ~stream_in_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_keep_V_0_ack_in == 1'b1) & (stream_in_V_keep_V_0_vld_in == 1'b1))) begin
            stream_in_V_keep_V_0_sel_wr <= ~stream_in_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_keep_V_0_state == 2'd2) & (stream_in_V_keep_V_0_vld_in == 1'b0)) | ((stream_in_V_keep_V_0_state == 2'd3) & (stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_ack_out == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end else if ((((stream_in_V_keep_V_0_state == 2'd1) & (stream_in_V_keep_V_0_ack_out == 1'b0)) | ((stream_in_V_keep_V_0_state == 2'd3) & (stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_ack_out == 1'b1)) & ~((stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_vld_in == 1'b1)) & (stream_in_V_keep_V_0_state == 2'd3)) | ((stream_in_V_keep_V_0_state == 2'd1) & (stream_in_V_keep_V_0_ack_out == 1'b1)) | ((stream_in_V_keep_V_0_state == 2'd2) & (stream_in_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd3;
        end else begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_last_V_0_ack_out == 1'b1) & (stream_in_V_last_V_0_vld_out == 1'b1))) begin
            stream_in_V_last_V_0_sel_rd <= ~stream_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_last_V_0_ack_in == 1'b1) & (stream_in_V_last_V_0_vld_in == 1'b1))) begin
            stream_in_V_last_V_0_sel_wr <= ~stream_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_last_V_0_state == 2'd2) & (stream_in_V_last_V_0_vld_in == 1'b0)) | ((stream_in_V_last_V_0_state == 2'd3) & (stream_in_V_last_V_0_vld_in == 1'b0) & (stream_in_V_last_V_0_ack_out == 1'b1)))) begin
            stream_in_V_last_V_0_state <= 2'd2;
        end else if ((((stream_in_V_last_V_0_state == 2'd1) & (stream_in_V_last_V_0_ack_out == 1'b0)) | ((stream_in_V_last_V_0_state == 2'd3) & (stream_in_V_last_V_0_ack_out == 1'b0) & (stream_in_V_last_V_0_vld_in == 1'b1)))) begin
            stream_in_V_last_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_last_V_0_vld_in == 1'b0) & (stream_in_V_last_V_0_ack_out == 1'b1)) & ~((stream_in_V_last_V_0_ack_out == 1'b0) & (stream_in_V_last_V_0_vld_in == 1'b1)) & (stream_in_V_last_V_0_state == 2'd3)) | ((stream_in_V_last_V_0_state == 2'd1) & (stream_in_V_last_V_0_ack_out == 1'b1)) | ((stream_in_V_last_V_0_state == 2'd2) & (stream_in_V_last_V_0_vld_in == 1'b1)))) begin
            stream_in_V_last_V_0_state <= 2'd3;
        end else begin
            stream_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_strb_V_0_ack_out == 1'b1) & (stream_in_V_strb_V_0_vld_out == 1'b1))) begin
            stream_in_V_strb_V_0_sel_rd <= ~stream_in_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_strb_V_0_ack_in == 1'b1) & (stream_in_V_strb_V_0_vld_in == 1'b1))) begin
            stream_in_V_strb_V_0_sel_wr <= ~stream_in_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_strb_V_0_state == 2'd2) & (stream_in_V_strb_V_0_vld_in == 1'b0)) | ((stream_in_V_strb_V_0_state == 2'd3) & (stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_ack_out == 1'b1)))) begin
            stream_in_V_strb_V_0_state <= 2'd2;
        end else if ((((stream_in_V_strb_V_0_state == 2'd1) & (stream_in_V_strb_V_0_ack_out == 1'b0)) | ((stream_in_V_strb_V_0_state == 2'd3) & (stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_vld_in == 1'b1)))) begin
            stream_in_V_strb_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_ack_out == 1'b1)) & ~((stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_vld_in == 1'b1)) & (stream_in_V_strb_V_0_state == 2'd3)) | ((stream_in_V_strb_V_0_state == 2'd1) & (stream_in_V_strb_V_0_ack_out == 1'b1)) | ((stream_in_V_strb_V_0_state == 2'd2) & (stream_in_V_strb_V_0_vld_in == 1'b1)))) begin
            stream_in_V_strb_V_0_state <= 2'd3;
        end else begin
            stream_in_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_user_V_0_ack_out == 1'b1) & (stream_in_V_user_V_0_vld_out == 1'b1))) begin
            stream_in_V_user_V_0_sel_rd <= ~stream_in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_user_V_0_ack_in == 1'b1) & (stream_in_V_user_V_0_vld_in == 1'b1))) begin
            stream_in_V_user_V_0_sel_wr <= ~stream_in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_user_V_0_state == 2'd2) & (stream_in_V_user_V_0_vld_in == 1'b0)) | ((stream_in_V_user_V_0_state == 2'd3) & (stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_ack_out == 1'b1)))) begin
            stream_in_V_user_V_0_state <= 2'd2;
        end else if ((((stream_in_V_user_V_0_state == 2'd1) & (stream_in_V_user_V_0_ack_out == 1'b0)) | ((stream_in_V_user_V_0_state == 2'd3) & (stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_vld_in == 1'b1)))) begin
            stream_in_V_user_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_ack_out == 1'b1)) & ~((stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_vld_in == 1'b1)) & (stream_in_V_user_V_0_state == 2'd3)) | ((stream_in_V_user_V_0_state == 2'd1) & (stream_in_V_user_V_0_ack_out == 1'b1)) | ((stream_in_V_user_V_0_state == 2'd2) & (stream_in_V_user_V_0_vld_in == 1'b1)))) begin
            stream_in_V_user_V_0_state <= 2'd3;
        end else begin
            stream_in_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_passThrough_V_data_V_1_ack_out == 1'b1) & (stream_passThrough_V_data_V_1_vld_out == 1'b1))) begin
            stream_passThrough_V_data_V_1_sel_rd <= ~stream_passThrough_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_passThrough_V_data_V_1_ack_in == 1'b1) & (stream_passThrough_V_data_V_1_vld_in == 1'b1))) begin
            stream_passThrough_V_data_V_1_sel_wr <= ~stream_passThrough_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_passThrough_V_data_V_1_state == 2'd2) & (stream_passThrough_V_data_V_1_vld_in == 1'b0)) | ((stream_passThrough_V_data_V_1_state == 2'd3) & (stream_passThrough_V_data_V_1_vld_in == 1'b0) & (stream_passThrough_V_data_V_1_ack_out == 1'b1)))) begin
            stream_passThrough_V_data_V_1_state <= 2'd2;
        end else if ((((stream_passThrough_V_data_V_1_state == 2'd1) & (stream_passThrough_V_data_V_1_ack_out == 1'b0)) | ((stream_passThrough_V_data_V_1_state == 2'd3) & (stream_passThrough_V_data_V_1_ack_out == 1'b0) & (stream_passThrough_V_data_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_passThrough_V_data_V_1_vld_in == 1'b0) & (stream_passThrough_V_data_V_1_ack_out == 1'b1)) & ~((stream_passThrough_V_data_V_1_ack_out == 1'b0) & (stream_passThrough_V_data_V_1_vld_in == 1'b1)) & (stream_passThrough_V_data_V_1_state == 2'd3)) | ((stream_passThrough_V_data_V_1_state == 2'd1) & (stream_passThrough_V_data_V_1_ack_out == 1'b1)) | ((stream_passThrough_V_data_V_1_state == 2'd2) & (stream_passThrough_V_data_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_data_V_1_state <= 2'd3;
        end else begin
            stream_passThrough_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_passThrough_V_dest_V_1_ack_out == 1'b1) & (stream_passThrough_V_dest_V_1_vld_out == 1'b1))) begin
            stream_passThrough_V_dest_V_1_sel_rd <= ~stream_passThrough_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_passThrough_V_dest_V_1_ack_in == 1'b1) & (stream_passThrough_V_dest_V_1_vld_in == 1'b1))) begin
            stream_passThrough_V_dest_V_1_sel_wr <= ~stream_passThrough_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_passThrough_V_dest_V_1_state == 2'd2) & (stream_passThrough_V_dest_V_1_vld_in == 1'b0)) | ((stream_passThrough_V_dest_V_1_state == 2'd3) & (stream_passThrough_V_dest_V_1_vld_in == 1'b0) & (stream_passThrough_V_dest_V_1_ack_out == 1'b1)))) begin
            stream_passThrough_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_passThrough_V_dest_V_1_state == 2'd1) & (stream_passThrough_V_dest_V_1_ack_out == 1'b0)) | ((stream_passThrough_V_dest_V_1_state == 2'd3) & (stream_passThrough_V_dest_V_1_ack_out == 1'b0) & (stream_passThrough_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_passThrough_V_dest_V_1_vld_in == 1'b0) & (stream_passThrough_V_dest_V_1_ack_out == 1'b1)) & ~((stream_passThrough_V_dest_V_1_ack_out == 1'b0) & (stream_passThrough_V_dest_V_1_vld_in == 1'b1)) & (stream_passThrough_V_dest_V_1_state == 2'd3)) | ((stream_passThrough_V_dest_V_1_state == 2'd1) & (stream_passThrough_V_dest_V_1_ack_out == 1'b1)) | ((stream_passThrough_V_dest_V_1_state == 2'd2) & (stream_passThrough_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_passThrough_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_passThrough_V_id_V_1_ack_out == 1'b1) & (stream_passThrough_V_id_V_1_vld_out == 1'b1))) begin
            stream_passThrough_V_id_V_1_sel_rd <= ~stream_passThrough_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_passThrough_V_id_V_1_ack_in == 1'b1) & (stream_passThrough_V_id_V_1_vld_in == 1'b1))) begin
            stream_passThrough_V_id_V_1_sel_wr <= ~stream_passThrough_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((stream_passThrough_V_id_V_1_state == 2'd2) & (stream_passThrough_V_id_V_1_vld_in == 1'b0)) | ((stream_passThrough_V_id_V_1_state == 2'd3) & (stream_passThrough_V_id_V_1_vld_in == 1'b0) & (stream_passThrough_V_id_V_1_ack_out == 1'b1)))) begin
            stream_passThrough_V_id_V_1_state <= 2'd2;
        end else if ((((stream_passThrough_V_id_V_1_state == 2'd1) & (stream_passThrough_V_id_V_1_ack_out == 1'b0)) | ((stream_passThrough_V_id_V_1_state == 2'd3) & (stream_passThrough_V_id_V_1_ack_out == 1'b0) & (stream_passThrough_V_id_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_id_V_1_state <= 2'd1;
        end else if (((~((stream_passThrough_V_id_V_1_vld_in == 1'b0) & (stream_passThrough_V_id_V_1_ack_out == 1'b1)) & ~((stream_passThrough_V_id_V_1_ack_out == 1'b0) & (stream_passThrough_V_id_V_1_vld_in == 1'b1)) & (stream_passThrough_V_id_V_1_state == 2'd3)) | ((stream_passThrough_V_id_V_1_state == 2'd1) & (stream_passThrough_V_id_V_1_ack_out == 1'b1)) | ((stream_passThrough_V_id_V_1_state == 2'd2) & (stream_passThrough_V_id_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_id_V_1_state <= 2'd3;
        end else begin
            stream_passThrough_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_passThrough_V_keep_V_1_ack_out == 1'b1) & (stream_passThrough_V_keep_V_1_vld_out == 1'b1))) begin
            stream_passThrough_V_keep_V_1_sel_rd <= ~stream_passThrough_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_passThrough_V_keep_V_1_ack_in == 1'b1) & (stream_passThrough_V_keep_V_1_vld_in == 1'b1))) begin
            stream_passThrough_V_keep_V_1_sel_wr <= ~stream_passThrough_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_passThrough_V_keep_V_1_state == 2'd2) & (stream_passThrough_V_keep_V_1_vld_in == 1'b0)) | ((stream_passThrough_V_keep_V_1_state == 2'd3) & (stream_passThrough_V_keep_V_1_vld_in == 1'b0) & (stream_passThrough_V_keep_V_1_ack_out == 1'b1)))) begin
            stream_passThrough_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_passThrough_V_keep_V_1_state == 2'd1) & (stream_passThrough_V_keep_V_1_ack_out == 1'b0)) | ((stream_passThrough_V_keep_V_1_state == 2'd3) & (stream_passThrough_V_keep_V_1_ack_out == 1'b0) & (stream_passThrough_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_passThrough_V_keep_V_1_vld_in == 1'b0) & (stream_passThrough_V_keep_V_1_ack_out == 1'b1)) & ~((stream_passThrough_V_keep_V_1_ack_out == 1'b0) & (stream_passThrough_V_keep_V_1_vld_in == 1'b1)) & (stream_passThrough_V_keep_V_1_state == 2'd3)) | ((stream_passThrough_V_keep_V_1_state == 2'd1) & (stream_passThrough_V_keep_V_1_ack_out == 1'b1)) | ((stream_passThrough_V_keep_V_1_state == 2'd2) & (stream_passThrough_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_passThrough_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_passThrough_V_last_V_1_ack_out == 1'b1) & (stream_passThrough_V_last_V_1_vld_out == 1'b1))) begin
            stream_passThrough_V_last_V_1_sel_rd <= ~stream_passThrough_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_passThrough_V_last_V_1_ack_in == 1'b1) & (stream_passThrough_V_last_V_1_vld_in == 1'b1))) begin
            stream_passThrough_V_last_V_1_sel_wr <= ~stream_passThrough_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_passThrough_V_last_V_1_state == 2'd2) & (stream_passThrough_V_last_V_1_vld_in == 1'b0)) | ((stream_passThrough_V_last_V_1_state == 2'd3) & (stream_passThrough_V_last_V_1_vld_in == 1'b0) & (stream_passThrough_V_last_V_1_ack_out == 1'b1)))) begin
            stream_passThrough_V_last_V_1_state <= 2'd2;
        end else if ((((stream_passThrough_V_last_V_1_state == 2'd1) & (stream_passThrough_V_last_V_1_ack_out == 1'b0)) | ((stream_passThrough_V_last_V_1_state == 2'd3) & (stream_passThrough_V_last_V_1_ack_out == 1'b0) & (stream_passThrough_V_last_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_passThrough_V_last_V_1_vld_in == 1'b0) & (stream_passThrough_V_last_V_1_ack_out == 1'b1)) & ~((stream_passThrough_V_last_V_1_ack_out == 1'b0) & (stream_passThrough_V_last_V_1_vld_in == 1'b1)) & (stream_passThrough_V_last_V_1_state == 2'd3)) | ((stream_passThrough_V_last_V_1_state == 2'd1) & (stream_passThrough_V_last_V_1_ack_out == 1'b1)) | ((stream_passThrough_V_last_V_1_state == 2'd2) & (stream_passThrough_V_last_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_last_V_1_state <= 2'd3;
        end else begin
            stream_passThrough_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_passThrough_V_strb_V_1_ack_out == 1'b1) & (stream_passThrough_V_strb_V_1_vld_out == 1'b1))) begin
            stream_passThrough_V_strb_V_1_sel_rd <= ~stream_passThrough_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_passThrough_V_strb_V_1_ack_in == 1'b1) & (stream_passThrough_V_strb_V_1_vld_in == 1'b1))) begin
            stream_passThrough_V_strb_V_1_sel_wr <= ~stream_passThrough_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((stream_passThrough_V_strb_V_1_state == 2'd2) & (stream_passThrough_V_strb_V_1_vld_in == 1'b0)) | ((stream_passThrough_V_strb_V_1_state == 2'd3) & (stream_passThrough_V_strb_V_1_vld_in == 1'b0) & (stream_passThrough_V_strb_V_1_ack_out == 1'b1)))) begin
            stream_passThrough_V_strb_V_1_state <= 2'd2;
        end else if ((((stream_passThrough_V_strb_V_1_state == 2'd1) & (stream_passThrough_V_strb_V_1_ack_out == 1'b0)) | ((stream_passThrough_V_strb_V_1_state == 2'd3) & (stream_passThrough_V_strb_V_1_ack_out == 1'b0) & (stream_passThrough_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_strb_V_1_state <= 2'd1;
        end else if (((~((stream_passThrough_V_strb_V_1_vld_in == 1'b0) & (stream_passThrough_V_strb_V_1_ack_out == 1'b1)) & ~((stream_passThrough_V_strb_V_1_ack_out == 1'b0) & (stream_passThrough_V_strb_V_1_vld_in == 1'b1)) & (stream_passThrough_V_strb_V_1_state == 2'd3)) | ((stream_passThrough_V_strb_V_1_state == 2'd1) & (stream_passThrough_V_strb_V_1_ack_out == 1'b1)) | ((stream_passThrough_V_strb_V_1_state == 2'd2) & (stream_passThrough_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_strb_V_1_state <= 2'd3;
        end else begin
            stream_passThrough_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_passThrough_V_user_V_1_ack_out == 1'b1) & (stream_passThrough_V_user_V_1_vld_out == 1'b1))) begin
            stream_passThrough_V_user_V_1_sel_rd <= ~stream_passThrough_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_passThrough_V_user_V_1_ack_in == 1'b1) & (stream_passThrough_V_user_V_1_vld_in == 1'b1))) begin
            stream_passThrough_V_user_V_1_sel_wr <= ~stream_passThrough_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_passThrough_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_passThrough_V_user_V_1_state == 2'd2) & (stream_passThrough_V_user_V_1_vld_in == 1'b0)) | ((stream_passThrough_V_user_V_1_state == 2'd3) & (stream_passThrough_V_user_V_1_vld_in == 1'b0) & (stream_passThrough_V_user_V_1_ack_out == 1'b1)))) begin
            stream_passThrough_V_user_V_1_state <= 2'd2;
        end else if ((((stream_passThrough_V_user_V_1_state == 2'd1) & (stream_passThrough_V_user_V_1_ack_out == 1'b0)) | ((stream_passThrough_V_user_V_1_state == 2'd3) & (stream_passThrough_V_user_V_1_ack_out == 1'b0) & (stream_passThrough_V_user_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_user_V_1_state <= 2'd1;
        end else if (((~((stream_passThrough_V_user_V_1_vld_in == 1'b0) & (stream_passThrough_V_user_V_1_ack_out == 1'b1)) & ~((stream_passThrough_V_user_V_1_ack_out == 1'b0) & (stream_passThrough_V_user_V_1_vld_in == 1'b1)) & (stream_passThrough_V_user_V_1_state == 2'd3)) | ((stream_passThrough_V_user_V_1_state == 2'd1) & (stream_passThrough_V_user_V_1_ack_out == 1'b1)) | ((stream_passThrough_V_user_V_1_state == 2'd2) & (stream_passThrough_V_user_V_1_vld_in == 1'b1)))) begin
            stream_passThrough_V_user_V_1_state <= 2'd3;
        end else begin
            stream_passThrough_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_process_V_data_V_1_ack_out == 1'b1) & (stream_process_V_data_V_1_vld_out == 1'b1))) begin
            stream_process_V_data_V_1_sel_rd <= ~stream_process_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_process_V_data_V_1_ack_in == 1'b1) & (stream_process_V_data_V_1_vld_in == 1'b1))) begin
            stream_process_V_data_V_1_sel_wr <= ~stream_process_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_process_V_data_V_1_state == 2'd2) & (stream_process_V_data_V_1_vld_in == 1'b0)) | ((stream_process_V_data_V_1_state == 2'd3) & (stream_process_V_data_V_1_vld_in == 1'b0) & (stream_process_V_data_V_1_ack_out == 1'b1)))) begin
            stream_process_V_data_V_1_state <= 2'd2;
        end else if ((((stream_process_V_data_V_1_state == 2'd1) & (stream_process_V_data_V_1_ack_out == 1'b0)) | ((stream_process_V_data_V_1_state == 2'd3) & (stream_process_V_data_V_1_ack_out == 1'b0) & (stream_process_V_data_V_1_vld_in == 1'b1)))) begin
            stream_process_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_process_V_data_V_1_vld_in == 1'b0) & (stream_process_V_data_V_1_ack_out == 1'b1)) & ~((stream_process_V_data_V_1_ack_out == 1'b0) & (stream_process_V_data_V_1_vld_in == 1'b1)) & (stream_process_V_data_V_1_state == 2'd3)) | ((stream_process_V_data_V_1_state == 2'd1) & (stream_process_V_data_V_1_ack_out == 1'b1)) | ((stream_process_V_data_V_1_state == 2'd2) & (stream_process_V_data_V_1_vld_in == 1'b1)))) begin
            stream_process_V_data_V_1_state <= 2'd3;
        end else begin
            stream_process_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_process_V_dest_V_1_ack_out == 1'b1) & (stream_process_V_dest_V_1_vld_out == 1'b1))) begin
            stream_process_V_dest_V_1_sel_rd <= ~stream_process_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_process_V_dest_V_1_ack_in == 1'b1) & (stream_process_V_dest_V_1_vld_in == 1'b1))) begin
            stream_process_V_dest_V_1_sel_wr <= ~stream_process_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_process_V_dest_V_1_state == 2'd2) & (stream_process_V_dest_V_1_vld_in == 1'b0)) | ((stream_process_V_dest_V_1_state == 2'd3) & (stream_process_V_dest_V_1_vld_in == 1'b0) & (stream_process_V_dest_V_1_ack_out == 1'b1)))) begin
            stream_process_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_process_V_dest_V_1_state == 2'd1) & (stream_process_V_dest_V_1_ack_out == 1'b0)) | ((stream_process_V_dest_V_1_state == 2'd3) & (stream_process_V_dest_V_1_ack_out == 1'b0) & (stream_process_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_process_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_process_V_dest_V_1_vld_in == 1'b0) & (stream_process_V_dest_V_1_ack_out == 1'b1)) & ~((stream_process_V_dest_V_1_ack_out == 1'b0) & (stream_process_V_dest_V_1_vld_in == 1'b1)) & (stream_process_V_dest_V_1_state == 2'd3)) | ((stream_process_V_dest_V_1_state == 2'd1) & (stream_process_V_dest_V_1_ack_out == 1'b1)) | ((stream_process_V_dest_V_1_state == 2'd2) & (stream_process_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_process_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_process_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_process_V_id_V_1_ack_out == 1'b1) & (stream_process_V_id_V_1_vld_out == 1'b1))) begin
            stream_process_V_id_V_1_sel_rd <= ~stream_process_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_process_V_id_V_1_ack_in == 1'b1) & (stream_process_V_id_V_1_vld_in == 1'b1))) begin
            stream_process_V_id_V_1_sel_wr <= ~stream_process_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((stream_process_V_id_V_1_state == 2'd2) & (stream_process_V_id_V_1_vld_in == 1'b0)) | ((stream_process_V_id_V_1_state == 2'd3) & (stream_process_V_id_V_1_vld_in == 1'b0) & (stream_process_V_id_V_1_ack_out == 1'b1)))) begin
            stream_process_V_id_V_1_state <= 2'd2;
        end else if ((((stream_process_V_id_V_1_state == 2'd1) & (stream_process_V_id_V_1_ack_out == 1'b0)) | ((stream_process_V_id_V_1_state == 2'd3) & (stream_process_V_id_V_1_ack_out == 1'b0) & (stream_process_V_id_V_1_vld_in == 1'b1)))) begin
            stream_process_V_id_V_1_state <= 2'd1;
        end else if (((~((stream_process_V_id_V_1_vld_in == 1'b0) & (stream_process_V_id_V_1_ack_out == 1'b1)) & ~((stream_process_V_id_V_1_ack_out == 1'b0) & (stream_process_V_id_V_1_vld_in == 1'b1)) & (stream_process_V_id_V_1_state == 2'd3)) | ((stream_process_V_id_V_1_state == 2'd1) & (stream_process_V_id_V_1_ack_out == 1'b1)) | ((stream_process_V_id_V_1_state == 2'd2) & (stream_process_V_id_V_1_vld_in == 1'b1)))) begin
            stream_process_V_id_V_1_state <= 2'd3;
        end else begin
            stream_process_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_process_V_keep_V_1_ack_out == 1'b1) & (stream_process_V_keep_V_1_vld_out == 1'b1))) begin
            stream_process_V_keep_V_1_sel_rd <= ~stream_process_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_process_V_keep_V_1_ack_in == 1'b1) & (stream_process_V_keep_V_1_vld_in == 1'b1))) begin
            stream_process_V_keep_V_1_sel_wr <= ~stream_process_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_process_V_keep_V_1_state == 2'd2) & (stream_process_V_keep_V_1_vld_in == 1'b0)) | ((stream_process_V_keep_V_1_state == 2'd3) & (stream_process_V_keep_V_1_vld_in == 1'b0) & (stream_process_V_keep_V_1_ack_out == 1'b1)))) begin
            stream_process_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_process_V_keep_V_1_state == 2'd1) & (stream_process_V_keep_V_1_ack_out == 1'b0)) | ((stream_process_V_keep_V_1_state == 2'd3) & (stream_process_V_keep_V_1_ack_out == 1'b0) & (stream_process_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_process_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_process_V_keep_V_1_vld_in == 1'b0) & (stream_process_V_keep_V_1_ack_out == 1'b1)) & ~((stream_process_V_keep_V_1_ack_out == 1'b0) & (stream_process_V_keep_V_1_vld_in == 1'b1)) & (stream_process_V_keep_V_1_state == 2'd3)) | ((stream_process_V_keep_V_1_state == 2'd1) & (stream_process_V_keep_V_1_ack_out == 1'b1)) | ((stream_process_V_keep_V_1_state == 2'd2) & (stream_process_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_process_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_process_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_process_V_last_V_1_ack_out == 1'b1) & (stream_process_V_last_V_1_vld_out == 1'b1))) begin
            stream_process_V_last_V_1_sel_rd <= ~stream_process_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_process_V_last_V_1_ack_in == 1'b1) & (stream_process_V_last_V_1_vld_in == 1'b1))) begin
            stream_process_V_last_V_1_sel_wr <= ~stream_process_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_process_V_last_V_1_state == 2'd2) & (stream_process_V_last_V_1_vld_in == 1'b0)) | ((stream_process_V_last_V_1_state == 2'd3) & (stream_process_V_last_V_1_vld_in == 1'b0) & (stream_process_V_last_V_1_ack_out == 1'b1)))) begin
            stream_process_V_last_V_1_state <= 2'd2;
        end else if ((((stream_process_V_last_V_1_state == 2'd1) & (stream_process_V_last_V_1_ack_out == 1'b0)) | ((stream_process_V_last_V_1_state == 2'd3) & (stream_process_V_last_V_1_ack_out == 1'b0) & (stream_process_V_last_V_1_vld_in == 1'b1)))) begin
            stream_process_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_process_V_last_V_1_vld_in == 1'b0) & (stream_process_V_last_V_1_ack_out == 1'b1)) & ~((stream_process_V_last_V_1_ack_out == 1'b0) & (stream_process_V_last_V_1_vld_in == 1'b1)) & (stream_process_V_last_V_1_state == 2'd3)) | ((stream_process_V_last_V_1_state == 2'd1) & (stream_process_V_last_V_1_ack_out == 1'b1)) | ((stream_process_V_last_V_1_state == 2'd2) & (stream_process_V_last_V_1_vld_in == 1'b1)))) begin
            stream_process_V_last_V_1_state <= 2'd3;
        end else begin
            stream_process_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_process_V_strb_V_1_ack_out == 1'b1) & (stream_process_V_strb_V_1_vld_out == 1'b1))) begin
            stream_process_V_strb_V_1_sel_rd <= ~stream_process_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_process_V_strb_V_1_ack_in == 1'b1) & (stream_process_V_strb_V_1_vld_in == 1'b1))) begin
            stream_process_V_strb_V_1_sel_wr <= ~stream_process_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((stream_process_V_strb_V_1_state == 2'd2) & (stream_process_V_strb_V_1_vld_in == 1'b0)) | ((stream_process_V_strb_V_1_state == 2'd3) & (stream_process_V_strb_V_1_vld_in == 1'b0) & (stream_process_V_strb_V_1_ack_out == 1'b1)))) begin
            stream_process_V_strb_V_1_state <= 2'd2;
        end else if ((((stream_process_V_strb_V_1_state == 2'd1) & (stream_process_V_strb_V_1_ack_out == 1'b0)) | ((stream_process_V_strb_V_1_state == 2'd3) & (stream_process_V_strb_V_1_ack_out == 1'b0) & (stream_process_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_process_V_strb_V_1_state <= 2'd1;
        end else if (((~((stream_process_V_strb_V_1_vld_in == 1'b0) & (stream_process_V_strb_V_1_ack_out == 1'b1)) & ~((stream_process_V_strb_V_1_ack_out == 1'b0) & (stream_process_V_strb_V_1_vld_in == 1'b1)) & (stream_process_V_strb_V_1_state == 2'd3)) | ((stream_process_V_strb_V_1_state == 2'd1) & (stream_process_V_strb_V_1_ack_out == 1'b1)) | ((stream_process_V_strb_V_1_state == 2'd2) & (stream_process_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_process_V_strb_V_1_state <= 2'd3;
        end else begin
            stream_process_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_process_V_user_V_1_ack_out == 1'b1) & (stream_process_V_user_V_1_vld_out == 1'b1))) begin
            stream_process_V_user_V_1_sel_rd <= ~stream_process_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_process_V_user_V_1_ack_in == 1'b1) & (stream_process_V_user_V_1_vld_in == 1'b1))) begin
            stream_process_V_user_V_1_sel_wr <= ~stream_process_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_process_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_process_V_user_V_1_state == 2'd2) & (stream_process_V_user_V_1_vld_in == 1'b0)) | ((stream_process_V_user_V_1_state == 2'd3) & (stream_process_V_user_V_1_vld_in == 1'b0) & (stream_process_V_user_V_1_ack_out == 1'b1)))) begin
            stream_process_V_user_V_1_state <= 2'd2;
        end else if ((((stream_process_V_user_V_1_state == 2'd1) & (stream_process_V_user_V_1_ack_out == 1'b0)) | ((stream_process_V_user_V_1_state == 2'd3) & (stream_process_V_user_V_1_ack_out == 1'b0) & (stream_process_V_user_V_1_vld_in == 1'b1)))) begin
            stream_process_V_user_V_1_state <= 2'd1;
        end else if (((~((stream_process_V_user_V_1_vld_in == 1'b0) & (stream_process_V_user_V_1_ack_out == 1'b1)) & ~((stream_process_V_user_V_1_ack_out == 1'b0) & (stream_process_V_user_V_1_vld_in == 1'b1)) & (stream_process_V_user_V_1_state == 2'd3)) | ((stream_process_V_user_V_1_state == 2'd1) & (stream_process_V_user_V_1_ack_out == 1'b1)) | ((stream_process_V_user_V_1_state == 2'd2) & (stream_process_V_user_V_1_vld_in == 1'b1)))) begin
            stream_process_V_user_V_1_state <= 2'd3;
        end else begin
            stream_process_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_i_reg_593 <= i_reg_876;
    end else if (((1'b1 == ap_CS_fsm_state10) & (grp_Filter2D_fu_615_ap_done == 1'b1))) begin
        i_i_reg_593 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_734_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_i_reg_604 <= j_fu_740_p2;
    end else if (((exitcond1_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        j_i_reg_604 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_710_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_1_reg_582 <= j_V_fu_716_p2;
    end else if (((exitcond5_i_fu_698_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_1_reg_582 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_reg_571 <= i_V_reg_858;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_AXIvideo2Mat_fu_625_ap_done == 1'b1))) begin
        t_V_reg_571 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_i_reg_863 <= exitcond_i_fu_710_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond_reg_881 <= exitcond_fu_734_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_V_reg_858 <= i_V_fu_704_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_876 <= i_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_A == 1'b1)) begin
        stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_B == 1'b1)) begin
        stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_dest_V_0_load_A == 1'b1)) begin
        stream_in_V_dest_V_0_payload_A <= stream_in_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_dest_V_0_load_B == 1'b1)) begin
        stream_in_V_dest_V_0_payload_B <= stream_in_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_id_V_0_load_A == 1'b1)) begin
        stream_in_V_id_V_0_payload_A <= stream_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_id_V_0_load_B == 1'b1)) begin
        stream_in_V_id_V_0_payload_B <= stream_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_keep_V_0_load_A == 1'b1)) begin
        stream_in_V_keep_V_0_payload_A <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_keep_V_0_load_B == 1'b1)) begin
        stream_in_V_keep_V_0_payload_B <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_last_V_0_load_A == 1'b1)) begin
        stream_in_V_last_V_0_payload_A <= stream_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_last_V_0_load_B == 1'b1)) begin
        stream_in_V_last_V_0_payload_B <= stream_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_strb_V_0_load_A == 1'b1)) begin
        stream_in_V_strb_V_0_payload_A <= stream_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_strb_V_0_load_B == 1'b1)) begin
        stream_in_V_strb_V_0_payload_B <= stream_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_user_V_0_load_A == 1'b1)) begin
        stream_in_V_user_V_0_payload_A <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_user_V_0_load_B == 1'b1)) begin
        stream_in_V_user_V_0_payload_B <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_data_V_1_load_A == 1'b1)) begin
        stream_passThrough_V_data_V_1_payload_A <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_data_V_1_load_B == 1'b1)) begin
        stream_passThrough_V_data_V_1_payload_B <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_dest_V_1_load_A == 1'b1)) begin
        stream_passThrough_V_dest_V_1_payload_A <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_dest_V_1_load_B == 1'b1)) begin
        stream_passThrough_V_dest_V_1_payload_B <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_id_V_1_load_A == 1'b1)) begin
        stream_passThrough_V_id_V_1_payload_A <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_id_V_1_load_B == 1'b1)) begin
        stream_passThrough_V_id_V_1_payload_B <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_keep_V_1_load_A == 1'b1)) begin
        stream_passThrough_V_keep_V_1_payload_A <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_keep_V_1_load_B == 1'b1)) begin
        stream_passThrough_V_keep_V_1_payload_B <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_last_V_1_load_A == 1'b1)) begin
        stream_passThrough_V_last_V_1_payload_A <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_last_V_1_load_B == 1'b1)) begin
        stream_passThrough_V_last_V_1_payload_B <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_strb_V_1_load_A == 1'b1)) begin
        stream_passThrough_V_strb_V_1_payload_A <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_strb_V_1_load_B == 1'b1)) begin
        stream_passThrough_V_strb_V_1_payload_B <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_user_V_1_load_A == 1'b1)) begin
        stream_passThrough_V_user_V_1_payload_A <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_passThrough_V_user_V_1_load_B == 1'b1)) begin
        stream_passThrough_V_user_V_1_payload_B <= grp_Mat2AXIvideo_fu_677_stream_passThrough_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_data_V_1_load_A == 1'b1)) begin
        stream_process_V_data_V_1_payload_A <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_data_V_1_load_B == 1'b1)) begin
        stream_process_V_data_V_1_payload_B <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_dest_V_1_load_A == 1'b1)) begin
        stream_process_V_dest_V_1_payload_A <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_dest_V_1_load_B == 1'b1)) begin
        stream_process_V_dest_V_1_payload_B <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_id_V_1_load_A == 1'b1)) begin
        stream_process_V_id_V_1_payload_A <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_id_V_1_load_B == 1'b1)) begin
        stream_process_V_id_V_1_payload_B <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_keep_V_1_load_A == 1'b1)) begin
        stream_process_V_keep_V_1_payload_A <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_keep_V_1_load_B == 1'b1)) begin
        stream_process_V_keep_V_1_payload_B <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_last_V_1_load_A == 1'b1)) begin
        stream_process_V_last_V_1_payload_A <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_last_V_1_load_B == 1'b1)) begin
        stream_process_V_last_V_1_payload_B <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_strb_V_1_load_A == 1'b1)) begin
        stream_process_V_strb_V_1_payload_A <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_strb_V_1_load_B == 1'b1)) begin
        stream_process_V_strb_V_1_payload_B <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_user_V_1_load_A == 1'b1)) begin
        stream_process_V_user_V_1_payload_A <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_process_V_user_V_1_load_B == 1'b1)) begin
        stream_process_V_user_V_1_payload_B <= grp_Mat2AXIvideo_fu_656_stream_passThrough_TUSER;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_710_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_734_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_passThrough_V_strb_V_1_ack_in == 1'b0) | (stream_passThrough_V_keep_V_1_ack_in == 1'b0) | (stream_passThrough_V_data_V_1_ack_in == 1'b0) | (stream_process_V_dest_V_1_ack_in == 1'b0) | (stream_process_V_id_V_1_ack_in == 1'b0) | (stream_process_V_last_V_1_ack_in == 1'b0) | (stream_process_V_user_V_1_ack_in == 1'b0) | (stream_process_V_strb_V_1_ack_in == 1'b0) | (stream_process_V_keep_V_1_ack_in == 1'b0) | (stream_process_V_data_V_1_ack_in == 1'b0) | (stream_passThrough_V_dest_V_1_ack_in == 1'b0) | (stream_passThrough_V_id_V_1_ack_in == 1'b0) | (stream_passThrough_V_last_V_1_ack_in == 1'b0) | (stream_passThrough_V_user_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_passThrough_V_strb_V_1_ack_in == 1'b0) | (stream_passThrough_V_keep_V_1_ack_in == 1'b0) | (stream_passThrough_V_data_V_1_ack_in == 1'b0) | (stream_process_V_dest_V_1_ack_in == 1'b0) | (stream_process_V_id_V_1_ack_in == 1'b0) | (stream_process_V_last_V_1_ack_in == 1'b0) | (stream_process_V_user_V_1_ack_in == 1'b0) | (stream_process_V_strb_V_1_ack_in == 1'b0) | (stream_process_V_keep_V_1_ack_in == 1'b0) | (stream_process_V_data_V_1_ack_in == 1'b0) | (stream_passThrough_V_dest_V_1_ack_in == 1'b0) | (stream_passThrough_V_id_V_1_ack_in == 1'b0) | (stream_passThrough_V_last_V_1_ack_in == 1'b0) | (stream_passThrough_V_user_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_863 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img0_data_stream_0_s_read = 1'b1;
    end else begin
        img0_data_stream_0_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img0_data_stream_0_s_write = grp_AXIvideo2Mat_fu_625_img_data_stream_0_V_write;
    end else begin
        img0_data_stream_0_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_863 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img0_data_stream_1_s_read = 1'b1;
    end else begin
        img0_data_stream_1_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img0_data_stream_1_s_write = grp_AXIvideo2Mat_fu_625_img_data_stream_1_V_write;
    end else begin
        img0_data_stream_1_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_863 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img0_data_stream_2_s_read = 1'b1;
    end else begin
        img0_data_stream_2_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img0_data_stream_2_s_write = grp_AXIvideo2Mat_fu_625_img_data_stream_2_V_write;
    end else begin
        img0_data_stream_2_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img1_data_stream_0_s_read = grp_CvtColor_fu_646_p_src_data_stream_0_V_read;
    end else begin
        img1_data_stream_0_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_863 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img1_data_stream_0_s_write = 1'b1;
    end else begin
        img1_data_stream_0_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img1_data_stream_1_s_read = grp_CvtColor_fu_646_p_src_data_stream_1_V_read;
    end else begin
        img1_data_stream_1_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_863 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img1_data_stream_1_s_write = 1'b1;
    end else begin
        img1_data_stream_1_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img1_data_stream_2_s_read = grp_CvtColor_fu_646_p_src_data_stream_2_V_read;
    end else begin
        img1_data_stream_2_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_863 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img1_data_stream_2_s_write = 1'b1;
    end else begin
        img1_data_stream_2_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img2_data_stream_0_s_read = grp_Filter2D_fu_615_p_src_data_stream_0_V_read;
    end else begin
        img2_data_stream_0_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img2_data_stream_0_s_write = grp_CvtColor_fu_646_p_dst_data_stream_0_V_write;
    end else begin
        img2_data_stream_0_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img2_data_stream_1_s_read = grp_Filter2D_fu_615_p_src_data_stream_1_V_read;
    end else begin
        img2_data_stream_1_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img2_data_stream_1_s_write = grp_CvtColor_fu_646_p_dst_data_stream_1_V_write;
    end else begin
        img2_data_stream_1_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img2_data_stream_2_s_read = grp_Filter2D_fu_615_p_src_data_stream_2_V_read;
    end else begin
        img2_data_stream_2_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img2_data_stream_2_s_write = grp_CvtColor_fu_646_p_dst_data_stream_2_V_write;
    end else begin
        img2_data_stream_2_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_881 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img3_data_stream_0_s_read = 1'b1;
    end else begin
        img3_data_stream_0_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img3_data_stream_0_s_write = grp_Filter2D_fu_615_p_dst_data_stream_0_V_write;
    end else begin
        img3_data_stream_0_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_881 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img3_data_stream_1_s_read = 1'b1;
    end else begin
        img3_data_stream_1_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img3_data_stream_1_s_write = grp_Filter2D_fu_615_p_dst_data_stream_1_V_write;
    end else begin
        img3_data_stream_1_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_881 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img3_data_stream_2_s_read = 1'b1;
    end else begin
        img3_data_stream_2_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img3_data_stream_2_s_write = grp_Filter2D_fu_615_p_dst_data_stream_2_V_write;
    end else begin
        img3_data_stream_2_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        img4_data_stream_0_s_read = grp_Mat2AXIvideo_fu_656_img_data_stream_0_V_read;
    end else begin
        img4_data_stream_0_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_881 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img4_data_stream_0_s_write = 1'b1;
    end else begin
        img4_data_stream_0_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        img4_data_stream_1_s_read = grp_Mat2AXIvideo_fu_656_img_data_stream_1_V_read;
    end else begin
        img4_data_stream_1_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_881 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img4_data_stream_1_s_write = 1'b1;
    end else begin
        img4_data_stream_1_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        img4_data_stream_2_s_read = grp_Mat2AXIvideo_fu_656_img_data_stream_2_V_read;
    end else begin
        img4_data_stream_2_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_881 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img4_data_stream_2_s_write = 1'b1;
    end else begin
        img4_data_stream_2_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        imgDuplicate_data_st_1_read = grp_Mat2AXIvideo_fu_677_img_data_stream_1_V_read;
    end else begin
        imgDuplicate_data_st_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_863 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imgDuplicate_data_st_1_write = 1'b1;
    end else begin
        imgDuplicate_data_st_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        imgDuplicate_data_st_2_read = grp_Mat2AXIvideo_fu_677_img_data_stream_2_V_read;
    end else begin
        imgDuplicate_data_st_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_863 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imgDuplicate_data_st_2_write = 1'b1;
    end else begin
        imgDuplicate_data_st_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        imgDuplicate_data_st_read = grp_Mat2AXIvideo_fu_677_img_data_stream_0_V_read;
    end else begin
        imgDuplicate_data_st_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_863 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imgDuplicate_data_st_write = 1'b1;
    end else begin
        imgDuplicate_data_st_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_in_V_data_V_0_ack_out = grp_AXIvideo2Mat_fu_625_stream_in_TREADY;
    end else begin
        stream_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_data_V_0_sel == 1'b1)) begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_B;
    end else begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_in_V_dest_V_0_ack_out = grp_AXIvideo2Mat_fu_625_stream_in_TREADY;
    end else begin
        stream_in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_dest_V_0_sel == 1'b1)) begin
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_B;
    end else begin
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_in_V_id_V_0_ack_out = grp_AXIvideo2Mat_fu_625_stream_in_TREADY;
    end else begin
        stream_in_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_id_V_0_sel == 1'b1)) begin
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_B;
    end else begin
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_in_V_keep_V_0_ack_out = grp_AXIvideo2Mat_fu_625_stream_in_TREADY;
    end else begin
        stream_in_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_keep_V_0_sel == 1'b1)) begin
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_B;
    end else begin
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_in_V_last_V_0_ack_out = grp_AXIvideo2Mat_fu_625_stream_in_TREADY;
    end else begin
        stream_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_last_V_0_sel == 1'b1)) begin
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_B;
    end else begin
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_in_V_strb_V_0_ack_out = grp_AXIvideo2Mat_fu_625_stream_in_TREADY;
    end else begin
        stream_in_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_strb_V_0_sel == 1'b1)) begin
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_B;
    end else begin
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_in_V_user_V_0_ack_out = grp_AXIvideo2Mat_fu_625_stream_in_TREADY;
    end else begin
        stream_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_user_V_0_sel == 1'b1)) begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_B;
    end else begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((stream_passThrough_V_data_V_1_sel == 1'b1)) begin
        stream_passThrough_V_data_V_1_data_out = stream_passThrough_V_data_V_1_payload_B;
    end else begin
        stream_passThrough_V_data_V_1_data_out = stream_passThrough_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_passThrough_V_dest_V_1_sel == 1'b1)) begin
        stream_passThrough_V_dest_V_1_data_out = stream_passThrough_V_dest_V_1_payload_B;
    end else begin
        stream_passThrough_V_dest_V_1_data_out = stream_passThrough_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_passThrough_V_id_V_1_sel == 1'b1)) begin
        stream_passThrough_V_id_V_1_data_out = stream_passThrough_V_id_V_1_payload_B;
    end else begin
        stream_passThrough_V_id_V_1_data_out = stream_passThrough_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_passThrough_V_keep_V_1_sel == 1'b1)) begin
        stream_passThrough_V_keep_V_1_data_out = stream_passThrough_V_keep_V_1_payload_B;
    end else begin
        stream_passThrough_V_keep_V_1_data_out = stream_passThrough_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_passThrough_V_last_V_1_sel == 1'b1)) begin
        stream_passThrough_V_last_V_1_data_out = stream_passThrough_V_last_V_1_payload_B;
    end else begin
        stream_passThrough_V_last_V_1_data_out = stream_passThrough_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_passThrough_V_strb_V_1_sel == 1'b1)) begin
        stream_passThrough_V_strb_V_1_data_out = stream_passThrough_V_strb_V_1_payload_B;
    end else begin
        stream_passThrough_V_strb_V_1_data_out = stream_passThrough_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_passThrough_V_user_V_1_sel == 1'b1)) begin
        stream_passThrough_V_user_V_1_data_out = stream_passThrough_V_user_V_1_payload_B;
    end else begin
        stream_passThrough_V_user_V_1_data_out = stream_passThrough_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_process_V_data_V_1_sel == 1'b1)) begin
        stream_process_V_data_V_1_data_out = stream_process_V_data_V_1_payload_B;
    end else begin
        stream_process_V_data_V_1_data_out = stream_process_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_process_V_dest_V_1_sel == 1'b1)) begin
        stream_process_V_dest_V_1_data_out = stream_process_V_dest_V_1_payload_B;
    end else begin
        stream_process_V_dest_V_1_data_out = stream_process_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_process_V_id_V_1_sel == 1'b1)) begin
        stream_process_V_id_V_1_data_out = stream_process_V_id_V_1_payload_B;
    end else begin
        stream_process_V_id_V_1_data_out = stream_process_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_process_V_keep_V_1_sel == 1'b1)) begin
        stream_process_V_keep_V_1_data_out = stream_process_V_keep_V_1_payload_B;
    end else begin
        stream_process_V_keep_V_1_data_out = stream_process_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_process_V_last_V_1_sel == 1'b1)) begin
        stream_process_V_last_V_1_data_out = stream_process_V_last_V_1_payload_B;
    end else begin
        stream_process_V_last_V_1_data_out = stream_process_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_process_V_strb_V_1_sel == 1'b1)) begin
        stream_process_V_strb_V_1_data_out = stream_process_V_strb_V_1_payload_B;
    end else begin
        stream_process_V_strb_V_1_data_out = stream_process_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_process_V_user_V_1_sel == 1'b1)) begin
        stream_process_V_user_V_1_data_out = stream_process_V_user_V_1_payload_B;
    end else begin
        stream_process_V_user_V_1_data_out = stream_process_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_AXIvideo2Mat_fu_625_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond5_i_fu_698_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_i_fu_710_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_i_fu_710_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_CvtColor_fu_646_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_Filter2D_fu_615_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((exitcond1_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((exitcond_fu_734_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((exitcond_fu_734_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((stream_passThrough_V_strb_V_1_ack_in == 1'b0) | (stream_passThrough_V_keep_V_1_ack_in == 1'b0) | (stream_passThrough_V_data_V_1_ack_in == 1'b0) | (stream_process_V_dest_V_1_ack_in == 1'b0) | (stream_process_V_id_V_1_ack_in == 1'b0) | (stream_process_V_last_V_1_ack_in == 1'b0) | (stream_process_V_user_V_1_ack_in == 1'b0) | (stream_process_V_strb_V_1_ack_in == 1'b0) | (stream_process_V_keep_V_1_ack_in == 1'b0) | (stream_process_V_data_V_1_ack_in == 1'b0) | (stream_passThrough_V_dest_V_1_ack_in == 1'b0) | (stream_passThrough_V_id_V_1_ack_in == 1'b0) | (stream_passThrough_V_last_V_1_ack_in == 1'b0) | (stream_passThrough_V_user_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_2_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_1_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_2_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_1_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_0_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_2_s_empty_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_1_s_empty_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_0_s_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_2_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_1_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_2_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_1_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_0_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_2_s_empty_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_1_s_empty_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_0_s_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_2_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_1_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_2_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_1_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_0_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_2_s_empty_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_1_s_empty_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_0_s_empty_n == 1'b0))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((exitcond_reg_881 == 1'd0) & (img4_data_stream_2_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img4_data_stream_1_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img4_data_stream_0_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_2_s_empty_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_1_s_empty_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_0_s_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((exitcond_reg_881 == 1'd0) & (img4_data_stream_2_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img4_data_stream_1_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img4_data_stream_0_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_2_s_empty_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_1_s_empty_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_0_s_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((exitcond_reg_881 == 1'd0) & (img4_data_stream_2_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img4_data_stream_1_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img4_data_stream_0_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_2_s_empty_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_1_s_empty_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_0_s_empty_n == 1'b0))));
end

assign ap_block_state12_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp1_stage0_iter1 = (((exitcond_reg_881 == 1'd0) & (img4_data_stream_2_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img4_data_stream_1_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img4_data_stream_0_s_full_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_2_s_empty_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_1_s_empty_n == 1'b0)) | ((exitcond_reg_881 == 1'd0) & (img3_data_stream_0_s_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state15_on_subcall_done = ((grp_Mat2AXIvideo_fu_677_ap_done == 1'b0) | (grp_Mat2AXIvideo_fu_656_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state16 = ((stream_passThrough_V_strb_V_1_ack_in == 1'b0) | (stream_passThrough_V_keep_V_1_ack_in == 1'b0) | (stream_passThrough_V_data_V_1_ack_in == 1'b0) | (stream_process_V_dest_V_1_ack_in == 1'b0) | (stream_process_V_id_V_1_ack_in == 1'b0) | (stream_process_V_last_V_1_ack_in == 1'b0) | (stream_process_V_user_V_1_ack_in == 1'b0) | (stream_process_V_strb_V_1_ack_in == 1'b0) | (stream_process_V_keep_V_1_ack_in == 1'b0) | (stream_process_V_data_V_1_ack_in == 1'b0) | (stream_passThrough_V_dest_V_1_ack_in == 1'b0) | (stream_passThrough_V_id_V_1_ack_in == 1'b0) | (stream_passThrough_V_last_V_1_ack_in == 1'b0) | (stream_passThrough_V_user_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = (((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_2_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_1_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (imgDuplicate_data_st_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_2_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_1_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img1_data_stream_0_s_full_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_2_s_empty_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_1_s_empty_n == 1'b0)) | ((exitcond_i_reg_863 == 1'd0) & (img0_data_stream_0_s_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_722_p2 = ((i_i_reg_593 == 11'd1050) ? 1'b1 : 1'b0);

assign exitcond5_i_fu_698_p2 = ((t_V_reg_571 == 11'd1050) ? 1'b1 : 1'b0);

assign exitcond_fu_734_p2 = ((j_i_reg_604 == 11'd1680) ? 1'b1 : 1'b0);

assign exitcond_i_fu_710_p2 = ((t_V_1_reg_582 == 11'd1680) ? 1'b1 : 1'b0);

assign grp_AXIvideo2Mat_fu_625_ap_start = grp_AXIvideo2Mat_fu_625_ap_start_reg;

assign grp_AXIvideo2Mat_fu_625_stream_in_TVALID = stream_in_V_dest_V_0_state[1'd0];

assign grp_CvtColor_fu_646_ap_start = grp_CvtColor_fu_646_ap_start_reg;

assign grp_Filter2D_fu_615_ap_start = grp_Filter2D_fu_615_ap_start_reg;

assign grp_Mat2AXIvideo_fu_656_ap_start = grp_Mat2AXIvideo_fu_656_ap_start_reg;

assign grp_Mat2AXIvideo_fu_656_stream_passThrough_TREADY = stream_process_V_dest_V_1_state[1'd1];

assign grp_Mat2AXIvideo_fu_677_ap_start = grp_Mat2AXIvideo_fu_677_ap_start_reg;

assign grp_Mat2AXIvideo_fu_677_stream_passThrough_TREADY = stream_passThrough_V_dest_V_1_state[1'd1];

assign i_V_fu_704_p2 = (t_V_reg_571 + 11'd1);

assign i_fu_728_p2 = (i_i_reg_593 + 11'd1);

assign j_V_fu_716_p2 = (t_V_1_reg_582 + 11'd1);

assign j_fu_740_p2 = (j_i_reg_604 + 11'd1);

assign stream_in_TREADY = stream_in_V_dest_V_0_state[1'd1];

assign stream_in_V_data_V_0_ack_in = stream_in_V_data_V_0_state[1'd1];

assign stream_in_V_data_V_0_load_A = (stream_in_V_data_V_0_state_cmp_full & ~stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_load_B = (stream_in_V_data_V_0_state_cmp_full & stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_sel = stream_in_V_data_V_0_sel_rd;

assign stream_in_V_data_V_0_state_cmp_full = ((stream_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_data_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_data_V_0_vld_out = stream_in_V_data_V_0_state[1'd0];

assign stream_in_V_dest_V_0_ack_in = stream_in_V_dest_V_0_state[1'd1];

assign stream_in_V_dest_V_0_load_A = (stream_in_V_dest_V_0_state_cmp_full & ~stream_in_V_dest_V_0_sel_wr);

assign stream_in_V_dest_V_0_load_B = (stream_in_V_dest_V_0_state_cmp_full & stream_in_V_dest_V_0_sel_wr);

assign stream_in_V_dest_V_0_sel = stream_in_V_dest_V_0_sel_rd;

assign stream_in_V_dest_V_0_state_cmp_full = ((stream_in_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_dest_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_dest_V_0_vld_out = stream_in_V_dest_V_0_state[1'd0];

assign stream_in_V_id_V_0_ack_in = stream_in_V_id_V_0_state[1'd1];

assign stream_in_V_id_V_0_load_A = (stream_in_V_id_V_0_state_cmp_full & ~stream_in_V_id_V_0_sel_wr);

assign stream_in_V_id_V_0_load_B = (stream_in_V_id_V_0_state_cmp_full & stream_in_V_id_V_0_sel_wr);

assign stream_in_V_id_V_0_sel = stream_in_V_id_V_0_sel_rd;

assign stream_in_V_id_V_0_state_cmp_full = ((stream_in_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_id_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_id_V_0_vld_out = stream_in_V_id_V_0_state[1'd0];

assign stream_in_V_keep_V_0_ack_in = stream_in_V_keep_V_0_state[1'd1];

assign stream_in_V_keep_V_0_load_A = (stream_in_V_keep_V_0_state_cmp_full & ~stream_in_V_keep_V_0_sel_wr);

assign stream_in_V_keep_V_0_load_B = (stream_in_V_keep_V_0_state_cmp_full & stream_in_V_keep_V_0_sel_wr);

assign stream_in_V_keep_V_0_sel = stream_in_V_keep_V_0_sel_rd;

assign stream_in_V_keep_V_0_state_cmp_full = ((stream_in_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_keep_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_keep_V_0_vld_out = stream_in_V_keep_V_0_state[1'd0];

assign stream_in_V_last_V_0_ack_in = stream_in_V_last_V_0_state[1'd1];

assign stream_in_V_last_V_0_load_A = (stream_in_V_last_V_0_state_cmp_full & ~stream_in_V_last_V_0_sel_wr);

assign stream_in_V_last_V_0_load_B = (stream_in_V_last_V_0_state_cmp_full & stream_in_V_last_V_0_sel_wr);

assign stream_in_V_last_V_0_sel = stream_in_V_last_V_0_sel_rd;

assign stream_in_V_last_V_0_state_cmp_full = ((stream_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_last_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_last_V_0_vld_out = stream_in_V_last_V_0_state[1'd0];

assign stream_in_V_strb_V_0_ack_in = stream_in_V_strb_V_0_state[1'd1];

assign stream_in_V_strb_V_0_load_A = (stream_in_V_strb_V_0_state_cmp_full & ~stream_in_V_strb_V_0_sel_wr);

assign stream_in_V_strb_V_0_load_B = (stream_in_V_strb_V_0_state_cmp_full & stream_in_V_strb_V_0_sel_wr);

assign stream_in_V_strb_V_0_sel = stream_in_V_strb_V_0_sel_rd;

assign stream_in_V_strb_V_0_state_cmp_full = ((stream_in_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_strb_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_strb_V_0_vld_out = stream_in_V_strb_V_0_state[1'd0];

assign stream_in_V_user_V_0_ack_in = stream_in_V_user_V_0_state[1'd1];

assign stream_in_V_user_V_0_load_A = (stream_in_V_user_V_0_state_cmp_full & ~stream_in_V_user_V_0_sel_wr);

assign stream_in_V_user_V_0_load_B = (stream_in_V_user_V_0_state_cmp_full & stream_in_V_user_V_0_sel_wr);

assign stream_in_V_user_V_0_sel = stream_in_V_user_V_0_sel_rd;

assign stream_in_V_user_V_0_state_cmp_full = ((stream_in_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_user_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_user_V_0_vld_out = stream_in_V_user_V_0_state[1'd0];

assign stream_passThrough_TDATA = stream_passThrough_V_data_V_1_data_out;

assign stream_passThrough_TDEST = stream_passThrough_V_dest_V_1_data_out;

assign stream_passThrough_TID = stream_passThrough_V_id_V_1_data_out;

assign stream_passThrough_TKEEP = stream_passThrough_V_keep_V_1_data_out;

assign stream_passThrough_TLAST = stream_passThrough_V_last_V_1_data_out;

assign stream_passThrough_TSTRB = stream_passThrough_V_strb_V_1_data_out;

assign stream_passThrough_TUSER = stream_passThrough_V_user_V_1_data_out;

assign stream_passThrough_TVALID = stream_passThrough_V_dest_V_1_state[1'd0];

assign stream_passThrough_V_data_V_1_ack_in = stream_passThrough_V_data_V_1_state[1'd1];

assign stream_passThrough_V_data_V_1_ack_out = stream_passThrough_TREADY;

assign stream_passThrough_V_data_V_1_load_A = (stream_passThrough_V_data_V_1_state_cmp_full & ~stream_passThrough_V_data_V_1_sel_wr);

assign stream_passThrough_V_data_V_1_load_B = (stream_passThrough_V_data_V_1_state_cmp_full & stream_passThrough_V_data_V_1_sel_wr);

assign stream_passThrough_V_data_V_1_sel = stream_passThrough_V_data_V_1_sel_rd;

assign stream_passThrough_V_data_V_1_state_cmp_full = ((stream_passThrough_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_passThrough_V_data_V_1_vld_in = grp_Mat2AXIvideo_fu_677_stream_passThrough_TVALID;

assign stream_passThrough_V_data_V_1_vld_out = stream_passThrough_V_data_V_1_state[1'd0];

assign stream_passThrough_V_dest_V_1_ack_in = stream_passThrough_V_dest_V_1_state[1'd1];

assign stream_passThrough_V_dest_V_1_ack_out = stream_passThrough_TREADY;

assign stream_passThrough_V_dest_V_1_load_A = (stream_passThrough_V_dest_V_1_state_cmp_full & ~stream_passThrough_V_dest_V_1_sel_wr);

assign stream_passThrough_V_dest_V_1_load_B = (stream_passThrough_V_dest_V_1_state_cmp_full & stream_passThrough_V_dest_V_1_sel_wr);

assign stream_passThrough_V_dest_V_1_sel = stream_passThrough_V_dest_V_1_sel_rd;

assign stream_passThrough_V_dest_V_1_state_cmp_full = ((stream_passThrough_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_passThrough_V_dest_V_1_vld_in = grp_Mat2AXIvideo_fu_677_stream_passThrough_TVALID;

assign stream_passThrough_V_dest_V_1_vld_out = stream_passThrough_V_dest_V_1_state[1'd0];

assign stream_passThrough_V_id_V_1_ack_in = stream_passThrough_V_id_V_1_state[1'd1];

assign stream_passThrough_V_id_V_1_ack_out = stream_passThrough_TREADY;

assign stream_passThrough_V_id_V_1_load_A = (stream_passThrough_V_id_V_1_state_cmp_full & ~stream_passThrough_V_id_V_1_sel_wr);

assign stream_passThrough_V_id_V_1_load_B = (stream_passThrough_V_id_V_1_state_cmp_full & stream_passThrough_V_id_V_1_sel_wr);

assign stream_passThrough_V_id_V_1_sel = stream_passThrough_V_id_V_1_sel_rd;

assign stream_passThrough_V_id_V_1_state_cmp_full = ((stream_passThrough_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_passThrough_V_id_V_1_vld_in = grp_Mat2AXIvideo_fu_677_stream_passThrough_TVALID;

assign stream_passThrough_V_id_V_1_vld_out = stream_passThrough_V_id_V_1_state[1'd0];

assign stream_passThrough_V_keep_V_1_ack_in = stream_passThrough_V_keep_V_1_state[1'd1];

assign stream_passThrough_V_keep_V_1_ack_out = stream_passThrough_TREADY;

assign stream_passThrough_V_keep_V_1_load_A = (stream_passThrough_V_keep_V_1_state_cmp_full & ~stream_passThrough_V_keep_V_1_sel_wr);

assign stream_passThrough_V_keep_V_1_load_B = (stream_passThrough_V_keep_V_1_state_cmp_full & stream_passThrough_V_keep_V_1_sel_wr);

assign stream_passThrough_V_keep_V_1_sel = stream_passThrough_V_keep_V_1_sel_rd;

assign stream_passThrough_V_keep_V_1_state_cmp_full = ((stream_passThrough_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_passThrough_V_keep_V_1_vld_in = grp_Mat2AXIvideo_fu_677_stream_passThrough_TVALID;

assign stream_passThrough_V_keep_V_1_vld_out = stream_passThrough_V_keep_V_1_state[1'd0];

assign stream_passThrough_V_last_V_1_ack_in = stream_passThrough_V_last_V_1_state[1'd1];

assign stream_passThrough_V_last_V_1_ack_out = stream_passThrough_TREADY;

assign stream_passThrough_V_last_V_1_load_A = (stream_passThrough_V_last_V_1_state_cmp_full & ~stream_passThrough_V_last_V_1_sel_wr);

assign stream_passThrough_V_last_V_1_load_B = (stream_passThrough_V_last_V_1_state_cmp_full & stream_passThrough_V_last_V_1_sel_wr);

assign stream_passThrough_V_last_V_1_sel = stream_passThrough_V_last_V_1_sel_rd;

assign stream_passThrough_V_last_V_1_state_cmp_full = ((stream_passThrough_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_passThrough_V_last_V_1_vld_in = grp_Mat2AXIvideo_fu_677_stream_passThrough_TVALID;

assign stream_passThrough_V_last_V_1_vld_out = stream_passThrough_V_last_V_1_state[1'd0];

assign stream_passThrough_V_strb_V_1_ack_in = stream_passThrough_V_strb_V_1_state[1'd1];

assign stream_passThrough_V_strb_V_1_ack_out = stream_passThrough_TREADY;

assign stream_passThrough_V_strb_V_1_load_A = (stream_passThrough_V_strb_V_1_state_cmp_full & ~stream_passThrough_V_strb_V_1_sel_wr);

assign stream_passThrough_V_strb_V_1_load_B = (stream_passThrough_V_strb_V_1_state_cmp_full & stream_passThrough_V_strb_V_1_sel_wr);

assign stream_passThrough_V_strb_V_1_sel = stream_passThrough_V_strb_V_1_sel_rd;

assign stream_passThrough_V_strb_V_1_state_cmp_full = ((stream_passThrough_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_passThrough_V_strb_V_1_vld_in = grp_Mat2AXIvideo_fu_677_stream_passThrough_TVALID;

assign stream_passThrough_V_strb_V_1_vld_out = stream_passThrough_V_strb_V_1_state[1'd0];

assign stream_passThrough_V_user_V_1_ack_in = stream_passThrough_V_user_V_1_state[1'd1];

assign stream_passThrough_V_user_V_1_ack_out = stream_passThrough_TREADY;

assign stream_passThrough_V_user_V_1_load_A = (stream_passThrough_V_user_V_1_state_cmp_full & ~stream_passThrough_V_user_V_1_sel_wr);

assign stream_passThrough_V_user_V_1_load_B = (stream_passThrough_V_user_V_1_state_cmp_full & stream_passThrough_V_user_V_1_sel_wr);

assign stream_passThrough_V_user_V_1_sel = stream_passThrough_V_user_V_1_sel_rd;

assign stream_passThrough_V_user_V_1_state_cmp_full = ((stream_passThrough_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_passThrough_V_user_V_1_vld_in = grp_Mat2AXIvideo_fu_677_stream_passThrough_TVALID;

assign stream_passThrough_V_user_V_1_vld_out = stream_passThrough_V_user_V_1_state[1'd0];

assign stream_process_TDATA = stream_process_V_data_V_1_data_out;

assign stream_process_TDEST = stream_process_V_dest_V_1_data_out;

assign stream_process_TID = stream_process_V_id_V_1_data_out;

assign stream_process_TKEEP = stream_process_V_keep_V_1_data_out;

assign stream_process_TLAST = stream_process_V_last_V_1_data_out;

assign stream_process_TSTRB = stream_process_V_strb_V_1_data_out;

assign stream_process_TUSER = stream_process_V_user_V_1_data_out;

assign stream_process_TVALID = stream_process_V_dest_V_1_state[1'd0];

assign stream_process_V_data_V_1_ack_in = stream_process_V_data_V_1_state[1'd1];

assign stream_process_V_data_V_1_ack_out = stream_process_TREADY;

assign stream_process_V_data_V_1_load_A = (stream_process_V_data_V_1_state_cmp_full & ~stream_process_V_data_V_1_sel_wr);

assign stream_process_V_data_V_1_load_B = (stream_process_V_data_V_1_state_cmp_full & stream_process_V_data_V_1_sel_wr);

assign stream_process_V_data_V_1_sel = stream_process_V_data_V_1_sel_rd;

assign stream_process_V_data_V_1_state_cmp_full = ((stream_process_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_process_V_data_V_1_vld_in = grp_Mat2AXIvideo_fu_656_stream_passThrough_TVALID;

assign stream_process_V_data_V_1_vld_out = stream_process_V_data_V_1_state[1'd0];

assign stream_process_V_dest_V_1_ack_in = stream_process_V_dest_V_1_state[1'd1];

assign stream_process_V_dest_V_1_ack_out = stream_process_TREADY;

assign stream_process_V_dest_V_1_load_A = (stream_process_V_dest_V_1_state_cmp_full & ~stream_process_V_dest_V_1_sel_wr);

assign stream_process_V_dest_V_1_load_B = (stream_process_V_dest_V_1_state_cmp_full & stream_process_V_dest_V_1_sel_wr);

assign stream_process_V_dest_V_1_sel = stream_process_V_dest_V_1_sel_rd;

assign stream_process_V_dest_V_1_state_cmp_full = ((stream_process_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_process_V_dest_V_1_vld_in = grp_Mat2AXIvideo_fu_656_stream_passThrough_TVALID;

assign stream_process_V_dest_V_1_vld_out = stream_process_V_dest_V_1_state[1'd0];

assign stream_process_V_id_V_1_ack_in = stream_process_V_id_V_1_state[1'd1];

assign stream_process_V_id_V_1_ack_out = stream_process_TREADY;

assign stream_process_V_id_V_1_load_A = (stream_process_V_id_V_1_state_cmp_full & ~stream_process_V_id_V_1_sel_wr);

assign stream_process_V_id_V_1_load_B = (stream_process_V_id_V_1_state_cmp_full & stream_process_V_id_V_1_sel_wr);

assign stream_process_V_id_V_1_sel = stream_process_V_id_V_1_sel_rd;

assign stream_process_V_id_V_1_state_cmp_full = ((stream_process_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_process_V_id_V_1_vld_in = grp_Mat2AXIvideo_fu_656_stream_passThrough_TVALID;

assign stream_process_V_id_V_1_vld_out = stream_process_V_id_V_1_state[1'd0];

assign stream_process_V_keep_V_1_ack_in = stream_process_V_keep_V_1_state[1'd1];

assign stream_process_V_keep_V_1_ack_out = stream_process_TREADY;

assign stream_process_V_keep_V_1_load_A = (stream_process_V_keep_V_1_state_cmp_full & ~stream_process_V_keep_V_1_sel_wr);

assign stream_process_V_keep_V_1_load_B = (stream_process_V_keep_V_1_state_cmp_full & stream_process_V_keep_V_1_sel_wr);

assign stream_process_V_keep_V_1_sel = stream_process_V_keep_V_1_sel_rd;

assign stream_process_V_keep_V_1_state_cmp_full = ((stream_process_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_process_V_keep_V_1_vld_in = grp_Mat2AXIvideo_fu_656_stream_passThrough_TVALID;

assign stream_process_V_keep_V_1_vld_out = stream_process_V_keep_V_1_state[1'd0];

assign stream_process_V_last_V_1_ack_in = stream_process_V_last_V_1_state[1'd1];

assign stream_process_V_last_V_1_ack_out = stream_process_TREADY;

assign stream_process_V_last_V_1_load_A = (stream_process_V_last_V_1_state_cmp_full & ~stream_process_V_last_V_1_sel_wr);

assign stream_process_V_last_V_1_load_B = (stream_process_V_last_V_1_state_cmp_full & stream_process_V_last_V_1_sel_wr);

assign stream_process_V_last_V_1_sel = stream_process_V_last_V_1_sel_rd;

assign stream_process_V_last_V_1_state_cmp_full = ((stream_process_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_process_V_last_V_1_vld_in = grp_Mat2AXIvideo_fu_656_stream_passThrough_TVALID;

assign stream_process_V_last_V_1_vld_out = stream_process_V_last_V_1_state[1'd0];

assign stream_process_V_strb_V_1_ack_in = stream_process_V_strb_V_1_state[1'd1];

assign stream_process_V_strb_V_1_ack_out = stream_process_TREADY;

assign stream_process_V_strb_V_1_load_A = (stream_process_V_strb_V_1_state_cmp_full & ~stream_process_V_strb_V_1_sel_wr);

assign stream_process_V_strb_V_1_load_B = (stream_process_V_strb_V_1_state_cmp_full & stream_process_V_strb_V_1_sel_wr);

assign stream_process_V_strb_V_1_sel = stream_process_V_strb_V_1_sel_rd;

assign stream_process_V_strb_V_1_state_cmp_full = ((stream_process_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_process_V_strb_V_1_vld_in = grp_Mat2AXIvideo_fu_656_stream_passThrough_TVALID;

assign stream_process_V_strb_V_1_vld_out = stream_process_V_strb_V_1_state[1'd0];

assign stream_process_V_user_V_1_ack_in = stream_process_V_user_V_1_state[1'd1];

assign stream_process_V_user_V_1_ack_out = stream_process_TREADY;

assign stream_process_V_user_V_1_load_A = (stream_process_V_user_V_1_state_cmp_full & ~stream_process_V_user_V_1_sel_wr);

assign stream_process_V_user_V_1_load_B = (stream_process_V_user_V_1_state_cmp_full & stream_process_V_user_V_1_sel_wr);

assign stream_process_V_user_V_1_sel = stream_process_V_user_V_1_sel_rd;

assign stream_process_V_user_V_1_state_cmp_full = ((stream_process_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_process_V_user_V_1_vld_in = grp_Mat2AXIvideo_fu_656_stream_passThrough_TVALID;

assign stream_process_V_user_V_1_vld_out = stream_process_V_user_V_1_state[1'd0];

endmodule //subsamble
