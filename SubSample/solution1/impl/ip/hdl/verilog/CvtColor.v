// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CvtColor (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n,
        p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n,
        p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n,
        p_dst_data_stream_2_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_src_data_stream_0_V_dout;
input   p_src_data_stream_0_V_empty_n;
output   p_src_data_stream_0_V_read;
input  [7:0] p_src_data_stream_1_V_dout;
input   p_src_data_stream_1_V_empty_n;
output   p_src_data_stream_1_V_read;
input  [7:0] p_src_data_stream_2_V_dout;
input   p_src_data_stream_2_V_empty_n;
output   p_src_data_stream_2_V_read;
output  [7:0] p_dst_data_stream_0_V_din;
input   p_dst_data_stream_0_V_full_n;
output   p_dst_data_stream_0_V_write;
output  [7:0] p_dst_data_stream_1_V_din;
input   p_dst_data_stream_1_V_full_n;
output   p_dst_data_stream_1_V_write;
output  [7:0] p_dst_data_stream_2_V_din;
input   p_dst_data_stream_2_V_full_n;
output   p_dst_data_stream_2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_data_stream_0_V_read;
reg p_src_data_stream_1_V_read;
reg p_src_data_stream_2_V_read;
reg p_dst_data_stream_0_V_write;
reg p_dst_data_stream_1_V_write;
reg p_dst_data_stream_2_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_355;
reg    p_src_data_stream_1_V_blk_n;
reg    p_src_data_stream_2_V_blk_n;
reg    p_dst_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] exitcond_reg_355_pp0_iter2_reg;
reg    p_dst_data_stream_1_V_blk_n;
reg    p_dst_data_stream_2_V_blk_n;
reg   [10:0] j_reg_212;
wire   [0:0] exitcond1_fu_223_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] i_1_fu_229_p2;
reg   [10:0] i_1_reg_350;
wire   [0:0] exitcond_fu_235_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_355_pp0_iter1_reg;
wire   [10:0] j_1_fu_241_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_94_reg_364;
reg   [7:0] tmp_95_reg_369;
wire   [28:0] r_V_fu_321_p2;
reg   [28:0] r_V_reg_374;
wire   [7:0] p_Val2_s_fu_313_p3;
reg   [7:0] p_Val2_s_reg_379;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg   [10:0] i_reg_201;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_01001;
wire   [28:0] grp_fu_338_p3;
wire   [29:0] grp_fu_327_p3;
wire   [0:0] tmp_89_fu_269_p3;
wire   [7:0] p_Val2_14_fu_260_p4;
wire   [7:0] tmp_3_i_i_i_fu_276_p1;
wire   [7:0] p_Val2_15_fu_287_p2;
wire   [0:0] tmp_90_fu_280_p3;
wire   [0:0] tmp_91_fu_293_p3;
wire   [0:0] p_Result_2_i_i_i_n_fu_301_p2;
wire   [0:0] not_carry_fu_307_p2;
wire   [7:0] r_V_fu_321_p0;
wire   [21:0] r_V_fu_321_p1;
wire   [7:0] grp_fu_327_p0;
wire   [22:0] grp_fu_327_p1;
wire   [28:0] grp_fu_327_p2;
wire   [7:0] grp_fu_338_p0;
wire   [19:0] grp_fu_338_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [29:0] grp_fu_327_p00;
wire   [29:0] grp_fu_327_p20;
wire   [27:0] grp_fu_338_p00;
wire   [28:0] r_V_fu_321_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

subsamble_mul_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 29 ))
subsamble_mul_mulbkb_U11(
    .din0(r_V_fu_321_p0),
    .din1(r_V_fu_321_p1),
    .dout(r_V_fu_321_p2)
);

subsamble_mac_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 23 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 30 ))
subsamble_mac_mulcud_U12(
    .din0(grp_fu_327_p0),
    .din1(grp_fu_327_p1),
    .din2(grp_fu_327_p2),
    .dout(grp_fu_327_p3)
);

subsamble_mac_muldEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
subsamble_mac_muldEe_U13(
    .din0(grp_fu_338_p0),
    .din1(grp_fu_338_p1),
    .din2(r_V_reg_374),
    .dout(grp_fu_338_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((exitcond1_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_201 <= i_1_reg_350;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_201 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_212 <= j_1_fu_241_p2;
    end else if (((exitcond1_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_212 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_355 <= exitcond_fu_235_p2;
        exitcond_reg_355_pp0_iter1_reg <= exitcond_reg_355;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_reg_355_pp0_iter2_reg <= exitcond_reg_355_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_350 <= i_1_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_355_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_reg_379 <= p_Val2_s_fu_313_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_355 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_reg_374 <= r_V_fu_321_p2;
        tmp_94_reg_364 <= p_src_data_stream_1_V_dout;
        tmp_95_reg_369 <= p_src_data_stream_2_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_fu_235_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond1_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_dst_data_stream_0_V_blk_n = p_dst_data_stream_0_V_full_n;
    end else begin
        p_dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_0_V_write = 1'b1;
    end else begin
        p_dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_dst_data_stream_1_V_blk_n = p_dst_data_stream_1_V_full_n;
    end else begin
        p_dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_1_V_write = 1'b1;
    end else begin
        p_dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_dst_data_stream_2_V_blk_n = p_dst_data_stream_2_V_full_n;
    end else begin
        p_dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_2_V_write = 1'b1;
    end else begin
        p_dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_355 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_0_V_blk_n = p_src_data_stream_0_V_empty_n;
    end else begin
        p_src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_355 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_data_stream_0_V_read = 1'b1;
    end else begin
        p_src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_355 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_1_V_blk_n = p_src_data_stream_1_V_empty_n;
    end else begin
        p_src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_355 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_data_stream_1_V_read = 1'b1;
    end else begin
        p_src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_355 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_2_V_blk_n = p_src_data_stream_2_V_empty_n;
    end else begin
        p_src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_355 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_data_stream_2_V_read = 1'b1;
    end else begin
        p_src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_355 == 1'd0) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_355 == 1'd0) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_355 == 1'd0) & (p_src_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_355 == 1'd0) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_355 == 1'd0) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_355 == 1'd0) & (p_src_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_355 == 1'd0) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_355 == 1'd0) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_355 == 1'd0) & (p_src_data_stream_0_V_empty_n == 1'b0)))));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_reg_355 == 1'd0) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_355 == 1'd0) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_355 == 1'd0) & (p_src_data_stream_0_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = (((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_355_pp0_iter2_reg == 1'd0) & (p_dst_data_stream_0_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond1_fu_223_p2 = ((i_reg_201 == 11'd1050) ? 1'b1 : 1'b0);

assign exitcond_fu_235_p2 = ((j_reg_212 == 11'd1680) ? 1'b1 : 1'b0);

assign grp_fu_327_p0 = grp_fu_327_p00;

assign grp_fu_327_p00 = tmp_94_reg_364;

assign grp_fu_327_p1 = 30'd2462056;

assign grp_fu_327_p2 = grp_fu_327_p20;

assign grp_fu_327_p20 = grp_fu_338_p3;

assign grp_fu_338_p0 = grp_fu_338_p00;

assign grp_fu_338_p00 = tmp_95_reg_369;

assign grp_fu_338_p1 = 28'd478150;

assign i_1_fu_229_p2 = (i_reg_201 + 11'd1);

assign j_1_fu_241_p2 = (j_reg_212 + 11'd1);

assign not_carry_fu_307_p2 = (tmp_91_fu_293_p3 | p_Result_2_i_i_i_n_fu_301_p2);

assign p_Result_2_i_i_i_n_fu_301_p2 = (tmp_90_fu_280_p3 ^ 1'd1);

assign p_Val2_14_fu_260_p4 = {{grp_fu_327_p3[29:22]}};

assign p_Val2_15_fu_287_p2 = (p_Val2_14_fu_260_p4 + tmp_3_i_i_i_fu_276_p1);

assign p_Val2_s_fu_313_p3 = ((not_carry_fu_307_p2[0:0] === 1'b1) ? p_Val2_15_fu_287_p2 : 8'd255);

assign p_dst_data_stream_0_V_din = p_Val2_s_reg_379;

assign p_dst_data_stream_1_V_din = p_Val2_s_reg_379;

assign p_dst_data_stream_2_V_din = p_Val2_s_reg_379;

assign r_V_fu_321_p0 = r_V_fu_321_p00;

assign r_V_fu_321_p00 = p_src_data_stream_0_V_dout;

assign r_V_fu_321_p1 = 29'd1254096;

assign tmp_3_i_i_i_fu_276_p1 = tmp_89_fu_269_p3;

assign tmp_89_fu_269_p3 = grp_fu_327_p3[32'd21];

assign tmp_90_fu_280_p3 = grp_fu_327_p3[32'd29];

assign tmp_91_fu_293_p3 = p_Val2_15_fu_287_p2[32'd7];

endmodule //CvtColor
