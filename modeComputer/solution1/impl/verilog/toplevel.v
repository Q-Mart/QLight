// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="toplevel,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.739000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=5,HLS_SYN_FF=1966,HLS_SYN_LUT=4070,HLS_VERSION=2018_2_1}" *)

module toplevel (
        ap_clk,
        ap_rst_n,
        m_axi_MAXI_AWVALID,
        m_axi_MAXI_AWREADY,
        m_axi_MAXI_AWADDR,
        m_axi_MAXI_AWID,
        m_axi_MAXI_AWLEN,
        m_axi_MAXI_AWSIZE,
        m_axi_MAXI_AWBURST,
        m_axi_MAXI_AWLOCK,
        m_axi_MAXI_AWCACHE,
        m_axi_MAXI_AWPROT,
        m_axi_MAXI_AWQOS,
        m_axi_MAXI_AWREGION,
        m_axi_MAXI_AWUSER,
        m_axi_MAXI_WVALID,
        m_axi_MAXI_WREADY,
        m_axi_MAXI_WDATA,
        m_axi_MAXI_WSTRB,
        m_axi_MAXI_WLAST,
        m_axi_MAXI_WID,
        m_axi_MAXI_WUSER,
        m_axi_MAXI_ARVALID,
        m_axi_MAXI_ARREADY,
        m_axi_MAXI_ARADDR,
        m_axi_MAXI_ARID,
        m_axi_MAXI_ARLEN,
        m_axi_MAXI_ARSIZE,
        m_axi_MAXI_ARBURST,
        m_axi_MAXI_ARLOCK,
        m_axi_MAXI_ARCACHE,
        m_axi_MAXI_ARPROT,
        m_axi_MAXI_ARQOS,
        m_axi_MAXI_ARREGION,
        m_axi_MAXI_ARUSER,
        m_axi_MAXI_RVALID,
        m_axi_MAXI_RREADY,
        m_axi_MAXI_RDATA,
        m_axi_MAXI_RLAST,
        m_axi_MAXI_RID,
        m_axi_MAXI_RUSER,
        m_axi_MAXI_RRESP,
        m_axi_MAXI_BVALID,
        m_axi_MAXI_BREADY,
        m_axi_MAXI_BRESP,
        m_axi_MAXI_BID,
        m_axi_MAXI_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 28'd2048;
parameter    ap_ST_fsm_state15 = 28'd4096;
parameter    ap_ST_fsm_state16 = 28'd8192;
parameter    ap_ST_fsm_state17 = 28'd16384;
parameter    ap_ST_fsm_state18 = 28'd32768;
parameter    ap_ST_fsm_state19 = 28'd65536;
parameter    ap_ST_fsm_state20 = 28'd131072;
parameter    ap_ST_fsm_state21 = 28'd262144;
parameter    ap_ST_fsm_state22 = 28'd524288;
parameter    ap_ST_fsm_state23 = 28'd1048576;
parameter    ap_ST_fsm_state24 = 28'd2097152;
parameter    ap_ST_fsm_state25 = 28'd4194304;
parameter    ap_ST_fsm_state26 = 28'd8388608;
parameter    ap_ST_fsm_state27 = 28'd16777216;
parameter    ap_ST_fsm_state28 = 28'd33554432;
parameter    ap_ST_fsm_state29 = 28'd67108864;
parameter    ap_ST_fsm_state30 = 28'd134217728;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MAXI_ID_WIDTH = 1;
parameter    C_M_AXI_MAXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_MAXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MAXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_USER_VALUE = 0;
parameter    C_M_AXI_MAXI_PROT_VALUE = 0;
parameter    C_M_AXI_MAXI_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MAXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_MAXI_AWVALID;
input   m_axi_MAXI_AWREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_AWADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_AWID;
output  [7:0] m_axi_MAXI_AWLEN;
output  [2:0] m_axi_MAXI_AWSIZE;
output  [1:0] m_axi_MAXI_AWBURST;
output  [1:0] m_axi_MAXI_AWLOCK;
output  [3:0] m_axi_MAXI_AWCACHE;
output  [2:0] m_axi_MAXI_AWPROT;
output  [3:0] m_axi_MAXI_AWQOS;
output  [3:0] m_axi_MAXI_AWREGION;
output  [C_M_AXI_MAXI_AWUSER_WIDTH - 1:0] m_axi_MAXI_AWUSER;
output   m_axi_MAXI_WVALID;
input   m_axi_MAXI_WREADY;
output  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_WDATA;
output  [C_M_AXI_MAXI_WSTRB_WIDTH - 1:0] m_axi_MAXI_WSTRB;
output   m_axi_MAXI_WLAST;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_WID;
output  [C_M_AXI_MAXI_WUSER_WIDTH - 1:0] m_axi_MAXI_WUSER;
output   m_axi_MAXI_ARVALID;
input   m_axi_MAXI_ARREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_ARADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_ARID;
output  [7:0] m_axi_MAXI_ARLEN;
output  [2:0] m_axi_MAXI_ARSIZE;
output  [1:0] m_axi_MAXI_ARBURST;
output  [1:0] m_axi_MAXI_ARLOCK;
output  [3:0] m_axi_MAXI_ARCACHE;
output  [2:0] m_axi_MAXI_ARPROT;
output  [3:0] m_axi_MAXI_ARQOS;
output  [3:0] m_axi_MAXI_ARREGION;
output  [C_M_AXI_MAXI_ARUSER_WIDTH - 1:0] m_axi_MAXI_ARUSER;
input   m_axi_MAXI_RVALID;
output   m_axi_MAXI_RREADY;
input  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_RDATA;
input   m_axi_MAXI_RLAST;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_RID;
input  [C_M_AXI_MAXI_RUSER_WIDTH - 1:0] m_axi_MAXI_RUSER;
input  [1:0] m_axi_MAXI_RRESP;
input   m_axi_MAXI_BVALID;
output   m_axi_MAXI_BREADY;
input  [1:0] m_axi_MAXI_BRESP;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_BID;
input  [C_M_AXI_MAXI_BUSER_WIDTH - 1:0] m_axi_MAXI_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] ram;
wire   [31:0] length_r;
reg   [31:0] length_r_0_data_reg;
reg    length_r_0_vld_reg;
reg    length_r_0_ack_out;
wire   [31:0] height;
reg   [31:0] height_0_data_reg;
reg    height_0_vld_reg;
reg    height_0_ack_out;
reg   [31:0] version_1_data_reg;
reg    version_1_vld_reg;
reg    version_1_vld_in;
reg    version_1_ack_in;
reg   [10:0] sectionData_address0;
reg    sectionData_ce0;
reg    sectionData_we0;
wire   [31:0] sectionData_q0;
reg   [10:0] sectionData_address1;
reg    sectionData_ce1;
wire   [31:0] sectionData_q1;
reg   [11:0] numberOfPixelsVisted;
reg   [12:0] visited_address0;
reg    visited_ce0;
reg    visited_we0;
reg   [7:0] visited_d0;
wire   [7:0] visited_q0;
reg   [12:0] visited_address1;
reg    visited_ce1;
reg    visited_we1;
wire   [7:0] visited_q1;
reg   [31:0] ap_return;
reg    MAXI_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    MAXI_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_1687;
wire    MAXI_AWREADY;
wire    MAXI_WREADY;
reg    MAXI_ARVALID;
wire    MAXI_ARREADY;
wire   [31:0] MAXI_ARADDR;
wire   [31:0] MAXI_ARLEN;
wire    MAXI_RVALID;
reg    MAXI_RREADY;
wire   [31:0] MAXI_RDATA;
wire    MAXI_RLAST;
wire   [0:0] MAXI_RID;
wire   [0:0] MAXI_RUSER;
wire   [1:0] MAXI_RRESP;
wire    MAXI_BVALID;
wire   [1:0] MAXI_BRESP;
wire   [0:0] MAXI_BID;
wire   [0:0] MAXI_BUSER;
reg   [29:0] indvar_reg_307;
reg   [29:0] indvar_reg_307_pp0_iter1_reg;
wire    ap_block_state12_pp0_stage0_iter0;
reg    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [29:0] ram1_reg_1641;
reg   [31:0] length_read_reg_1646;
wire    ap_CS_fsm_state2;
reg  signed [31:0] height_read_reg_1653;
wire  signed [31:0] tmp_fu_438_p2;
reg  signed [31:0] tmp_reg_1660;
wire   [31:0] tmp_7_fu_444_p2;
reg   [31:0] tmp_7_reg_1665;
wire    ap_CS_fsm_state3;
reg   [29:0] p_add_i32_shr_reg_1670;
wire    ap_CS_fsm_state4;
reg    ap_sig_ioackin_MAXI_ARREADY;
wire   [0:0] exitcond_fu_477_p2;
reg   [0:0] exitcond_reg_1687_pp0_iter1_reg;
wire   [29:0] indvar_next_fu_482_p2;
reg   [29:0] indvar_next_reg_1691;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] MAXI_addr_read_reg_1696;
wire  signed [12:0] tmp_8_fu_499_p1;
reg  signed [12:0] tmp_8_reg_1714;
wire    ap_CS_fsm_state15;
wire   [12:0] tmp_9_fu_507_p1;
reg   [12:0] tmp_9_reg_1720;
wire    ap_CS_fsm_state16;
wire   [31:0] x_1_fu_516_p2;
reg   [31:0] x_1_reg_1728;
wire   [0:0] exitcond4_fu_511_p2;
wire   [31:0] y_1_fu_534_p2;
reg   [31:0] y_1_reg_1740;
wire    ap_CS_fsm_state17;
(* use_dsp48 = "no" *) wire   [12:0] current_V_fu_545_p2;
reg   [12:0] current_V_reg_1745;
wire   [0:0] exitcond3_fu_529_p2;
wire   [1:0] tmp_13_fu_550_p1;
reg   [1:0] tmp_13_reg_1750;
reg   [10:0] tmp_16_reg_1755;
reg   [10:0] gepindex_cast_reg_1760;
wire    ap_CS_fsm_state18;
wire   [1:0] tmp_34_fu_610_p1;
reg   [1:0] tmp_34_reg_1770;
reg   [11:0] cast_gep_index27_cas_reg_1775;
wire   [1:0] tmp_52_fu_630_p1;
reg   [1:0] tmp_52_reg_1781;
reg   [11:0] cast_gep_index32_cas_reg_1786;
wire   [5:0] tmp_27_fu_723_p2;
reg   [5:0] tmp_27_reg_1792;
wire    ap_CS_fsm_state19;
wire   [31:0] tmp_30_fu_733_p2;
reg   [31:0] tmp_30_reg_1797;
wire   [7:0] tmp_33_fu_799_p1;
reg   [7:0] tmp_33_reg_1812;
wire    ap_CS_fsm_state20;
wire   [5:0] tmp_45_fu_882_p2;
reg   [5:0] tmp_45_reg_1820;
wire   [31:0] tmp_48_fu_892_p2;
reg   [31:0] tmp_48_reg_1825;
wire   [5:0] tmp_63_fu_977_p2;
reg   [5:0] tmp_63_reg_1830;
wire   [31:0] tmp_66_fu_987_p2;
reg   [31:0] tmp_66_reg_1835;
wire   [7:0] tmp_51_fu_1007_p1;
reg   [7:0] tmp_51_reg_1840;
wire    ap_CS_fsm_state21;
wire   [7:0] tmp_69_fu_1025_p1;
reg   [7:0] tmp_69_reg_1848;
reg   [11:0] numberOfPixelsVisted_1_reg_1856;
wire   [0:0] tmp_i_fu_1037_p2;
reg   [0:0] tmp_i_reg_1864;
wire    ap_CS_fsm_state22;
wire   [11:0] i_fu_1042_p2;
reg   [11:0] i_reg_1868;
wire  signed [14:0] tmp_21_i_fu_1060_p2;
reg  signed [14:0] tmp_21_i_reg_1873;
wire  signed [43:0] r_V_2_cast_fu_1091_p1;
reg  signed [43:0] r_V_2_cast_reg_1884;
wire    ap_CS_fsm_state23;
wire   [0:0] tmp_i_i_fu_1131_p2;
reg   [0:0] tmp_i_i_reg_1899;
wire   [31:0] x_2_fu_1162_p2;
reg   [31:0] x_2_reg_1910;
wire    ap_CS_fsm_state24;
wire   [12:0] tmp_70_fu_1168_p1;
reg   [12:0] tmp_70_reg_1915;
wire   [0:0] exitcond2_fu_1157_p2;
wire   [31:0] y_2_fu_1232_p2;
reg   [31:0] y_2_reg_1926;
wire    ap_CS_fsm_state26;
wire   [1:0] tmp_73_fu_1252_p1;
reg   [1:0] tmp_73_reg_1931;
wire   [0:0] exitcond1_fu_1227_p2;
reg   [10:0] tmp_75_reg_1936;
reg   [10:0] gepindex176_cast_reg_1941;
wire   [1:0] tmp_93_fu_1286_p1;
reg   [1:0] tmp_93_reg_1946;
reg   [11:0] cast_gep_index78_cas_reg_1951;
wire    ap_CS_fsm_state27;
wire   [5:0] tmp_86_fu_1429_p2;
reg   [5:0] tmp_86_reg_1967;
wire    ap_CS_fsm_state28;
wire   [31:0] tmp_89_fu_1439_p2;
reg   [31:0] tmp_89_reg_1972;
wire   [5:0] tmp_104_fu_1524_p2;
reg   [5:0] tmp_104_reg_1977;
wire   [31:0] tmp_107_fu_1534_p2;
reg   [31:0] tmp_107_reg_1982;
wire   [11:0] tmp_36_agg_result_V_s_fu_1609_p3;
wire    ap_CS_fsm_state29;
wire   [11:0] tmp_36_agg_result_V_1_fu_1617_p3;
wire    ap_CS_fsm_state11;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg    ap_enable_reg_pp0_iter2;
reg   [29:0] ap_phi_mux_indvar_phi_fu_311_p4;
reg   [31:0] x_reg_319;
reg   [31:0] y_reg_330;
wire   [0:0] val_assign_fu_1152_p2;
reg   [11:0] i_i_reg_341;
reg   [11:0] currentFreq_V_reg_352;
wire    ap_CS_fsm_state25;
reg   [11:0] agg_result_V_load1_i_reg_364;
reg   [31:0] x_i_reg_376;
reg   [11:0] agg_result_V_1_i_reg_387;
reg   [11:0] agg_result_V_load_i_reg_399;
reg   [31:0] y_i_reg_411;
wire   [63:0] indvar1_fu_488_p1;
wire   [63:0] gepindex2_cast_fu_599_p1;
wire   [63:0] gepindex2154_cast_fu_757_p1;
wire   [63:0] gepindex2166_cast_fu_780_p1;
wire  signed [63:0] tmp_22_i_fu_1066_p1;
wire   [63:0] tmp_i1_fu_1095_p1;
wire  signed [63:0] tmp_24_i_fu_1116_p1;
wire  signed [63:0] tmp_26_i_fu_1126_p1;
wire   [63:0] tmp_3_i_fu_1211_p1;
wire   [63:0] tmp_5_i_fu_1222_p1;
wire   [63:0] gepindex2178_cast_fu_1322_p1;
wire   [63:0] gepindex2190_cast_fu_1345_p1;
wire   [63:0] tmp_1_fu_463_p1;
reg    ap_reg_ioackin_MAXI_ARREADY;
wire   [11:0] tmp_6_i_fu_1100_p2;
reg   [31:0] modePixel_1_fu_148;
wire   [31:0] modePixel_fu_1188_p1;
wire   [0:0] tmp_11_fu_1175_p2;
reg   [11:0] modeFreq_V_fu_152;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_5_fu_432_p2;
wire   [31:0] p_add_fu_448_p2;
wire  signed [12:0] grp_fu_1625_p3;
wire   [12:0] tmp_12_fu_540_p2;
wire   [11:0] adjSize106_cast_fu_577_p1;
wire   [11:0] mem_index_gep_fu_580_p2;
wire   [0:0] addrCmp_fu_586_p2;
wire   [10:0] gepindex2_fu_592_p3;
wire   [13:0] tmp_15_fu_574_p1;
wire   [13:0] r_V_fu_604_p2;
wire   [13:0] r_V_1_fu_624_p2;
wire   [4:0] start_pos_fu_644_p3;
wire   [4:0] end_pos_fu_651_p2;
wire   [5:0] tmp_18_fu_663_p1;
wire   [5:0] tmp_19_fu_667_p1;
wire   [0:0] tmp_17_fu_657_p2;
wire   [5:0] tmp_21_fu_681_p2;
wire   [5:0] tmp_23_fu_693_p2;
reg   [31:0] tmp_20_fu_671_p4;
wire   [5:0] tmp_22_fu_687_p2;
wire   [5:0] tmp_24_fu_699_p3;
wire   [5:0] tmp_26_fu_715_p3;
wire   [31:0] tmp_25_fu_707_p3;
wire   [31:0] tmp_28_fu_729_p1;
wire   [11:0] mem_index_gep1_fu_739_p2;
wire   [0:0] addrCmp1_fu_744_p2;
wire   [11:0] gepindex_fu_750_p3;
wire   [11:0] mem_index_gep2_fu_762_p2;
wire   [0:0] addrCmp2_fu_767_p2;
wire   [11:0] gepindex1_fu_773_p3;
wire   [31:0] tmp_29_fu_785_p1;
wire   [31:0] tmp_31_fu_788_p2;
wire   [31:0] tmp_32_fu_794_p2;
wire   [4:0] start_pos1_fu_803_p3;
wire   [4:0] end_pos1_fu_810_p2;
wire   [5:0] tmp_36_fu_822_p1;
wire   [5:0] tmp_37_fu_826_p1;
wire   [0:0] tmp_35_fu_816_p2;
wire   [5:0] tmp_39_fu_840_p2;
wire   [5:0] tmp_41_fu_852_p2;
reg   [31:0] tmp_38_fu_830_p4;
wire   [5:0] tmp_40_fu_846_p2;
wire   [5:0] tmp_42_fu_858_p3;
wire   [5:0] tmp_44_fu_874_p3;
wire   [31:0] tmp_43_fu_866_p3;
wire   [31:0] tmp_46_fu_888_p1;
wire   [4:0] start_pos2_fu_898_p3;
wire   [4:0] end_pos2_fu_905_p2;
wire   [5:0] tmp_54_fu_917_p1;
wire   [5:0] tmp_55_fu_921_p1;
wire   [0:0] tmp_53_fu_911_p2;
wire   [5:0] tmp_57_fu_935_p2;
wire   [5:0] tmp_59_fu_947_p2;
reg   [31:0] tmp_56_fu_925_p4;
wire   [5:0] tmp_58_fu_941_p2;
wire   [5:0] tmp_60_fu_953_p3;
wire   [5:0] tmp_62_fu_969_p3;
wire   [31:0] tmp_61_fu_961_p3;
wire   [31:0] tmp_64_fu_983_p1;
wire   [31:0] tmp_47_fu_993_p1;
wire   [31:0] tmp_49_fu_996_p2;
wire   [31:0] tmp_50_fu_1002_p2;
wire   [31:0] tmp_65_fu_1011_p1;
wire   [31:0] tmp_67_fu_1014_p2;
wire   [31:0] tmp_68_fu_1020_p2;
wire   [13:0] p_shl_i_fu_1048_p3;
wire   [14:0] p_shl_i_cast_fu_1056_p1;
wire   [14:0] i_i_cast5_fu_1033_p1;
wire   [13:0] p_shl_i1_fu_1074_p3;
wire   [14:0] p_shl_i1_cast_fu_1081_p1;
wire   [14:0] lhs_V_1_cast3_fu_1071_p1;
wire   [14:0] r_V_2_fu_1085_p2;
wire   [14:0] tmp_23_i_fu_1111_p2;
wire   [14:0] tmp_25_i_fu_1121_p2;
wire   [0:0] tmp_i_i_9_fu_1136_p2;
wire   [0:0] tmp_37_i_i_fu_1141_p2;
wire   [0:0] tmp1_fu_1146_p2;
wire   [23:0] tmp_14_fu_1181_p4;
wire   [44:0] lhs_V_fu_1202_p1;
wire   [44:0] r_V_3_fu_1205_p2;
wire   [44:0] r_V_4_fu_1216_p2;
wire  signed [12:0] grp_fu_1633_p3;
wire   [12:0] tmp_72_fu_1242_p2;
(* use_dsp48 = "no" *) wire   [12:0] current_V_1_fu_1247_p2;
wire   [13:0] tmp_74_fu_1256_p1;
wire   [13:0] r_V_5_fu_1280_p2;
wire   [11:0] adjSize142_cast_fu_1300_p1;
wire   [11:0] mem_index_gep3_fu_1303_p2;
wire   [0:0] addrCmp3_fu_1309_p2;
wire   [10:0] gepindex3_fu_1315_p3;
wire   [11:0] mem_index_gep4_fu_1327_p2;
wire   [0:0] addrCmp4_fu_1332_p2;
wire   [11:0] gepindex4_fu_1338_p3;
wire   [4:0] start_pos3_fu_1350_p3;
wire   [4:0] end_pos3_fu_1357_p2;
wire   [5:0] tmp_77_fu_1369_p1;
wire   [5:0] tmp_78_fu_1373_p1;
wire   [0:0] tmp_76_fu_1363_p2;
wire   [5:0] tmp_80_fu_1387_p2;
wire   [5:0] tmp_82_fu_1399_p2;
reg   [31:0] tmp_79_fu_1377_p4;
wire   [5:0] tmp_81_fu_1393_p2;
wire   [5:0] tmp_83_fu_1405_p3;
wire   [5:0] tmp_85_fu_1421_p3;
wire   [31:0] tmp_84_fu_1413_p3;
wire   [31:0] tmp_87_fu_1435_p1;
wire   [4:0] start_pos4_fu_1445_p3;
wire   [4:0] end_pos4_fu_1452_p2;
wire   [5:0] tmp_95_fu_1464_p1;
wire   [5:0] tmp_96_fu_1468_p1;
wire   [0:0] tmp_94_fu_1458_p2;
wire   [5:0] tmp_98_fu_1482_p2;
wire   [5:0] tmp_100_fu_1494_p2;
reg   [31:0] tmp_97_fu_1472_p4;
wire   [5:0] tmp_99_fu_1488_p2;
wire   [5:0] tmp_101_fu_1500_p3;
wire   [5:0] tmp_103_fu_1516_p3;
wire   [31:0] tmp_102_fu_1508_p3;
wire   [31:0] tmp_105_fu_1530_p1;
wire   [31:0] tmp_88_fu_1540_p1;
wire   [31:0] tmp_90_fu_1543_p2;
wire   [31:0] tmp_91_fu_1549_p2;
wire   [31:0] tmp_106_fu_1558_p1;
wire   [31:0] tmp_108_fu_1561_p2;
wire   [31:0] tmp_109_fu_1567_p2;
wire   [7:0] tmp_92_fu_1554_p1;
wire   [7:0] tmp_110_fu_1572_p1;
wire   [0:0] tmp_i_i1_11_fu_1581_p2;
wire   [0:0] tmp_37_i_i1_fu_1586_p2;
wire   [0:0] tmp2_fu_1591_p2;
wire   [0:0] tmp_i_i1_fu_1576_p2;
wire   [0:0] val_assign_1_fu_1597_p2;
wire   [11:0] result_V_fu_1603_p2;
wire  signed [12:0] grp_fu_1625_p0;
wire  signed [12:0] grp_fu_1633_p1;
wire    ap_CS_fsm_state30;
reg   [27:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 length_r_0_data_reg = 32'd0;
#0 length_r_0_vld_reg = 1'b0;
#0 height_0_data_reg = 32'd0;
#0 height_0_vld_reg = 1'b0;
#0 version_1_data_reg = 32'd0;
#0 version_1_vld_reg = 1'b0;
#0 numberOfPixelsVisted = 12'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_MAXI_ARREADY = 1'b0;
end

toplevel_sectionDbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1688 ),
    .AddressWidth( 11 ))
sectionData_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sectionData_address0),
    .ce0(sectionData_ce0),
    .we0(sectionData_we0),
    .d0(MAXI_addr_read_reg_1696),
    .q0(sectionData_q0),
    .address1(sectionData_address1),
    .ce1(sectionData_ce1),
    .q1(sectionData_q1)
);

toplevel_visited #(
    .DataWidth( 8 ),
    .AddressRange( 6750 ),
    .AddressWidth( 13 ))
visited_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(visited_address0),
    .ce0(visited_ce0),
    .we0(visited_we0),
    .d0(visited_d0),
    .q0(visited_q0),
    .address1(visited_address1),
    .ce1(visited_ce1),
    .we1(visited_we1),
    .d1(tmp_51_reg_1840),
    .q1(visited_q1)
);

toplevel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
toplevel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .ram(ram),
    .length_r(length_r),
    .height(height),
    .version(version_1_data_reg),
    .version_ap_vld(version_1_vld_reg)
);

toplevel_MAXI_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MAXI_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MAXI_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MAXI_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MAXI_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MAXI_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MAXI_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MAXI_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MAXI_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MAXI_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MAXI_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MAXI_CACHE_VALUE ))
toplevel_MAXI_m_axi_U(
    .AWVALID(m_axi_MAXI_AWVALID),
    .AWREADY(m_axi_MAXI_AWREADY),
    .AWADDR(m_axi_MAXI_AWADDR),
    .AWID(m_axi_MAXI_AWID),
    .AWLEN(m_axi_MAXI_AWLEN),
    .AWSIZE(m_axi_MAXI_AWSIZE),
    .AWBURST(m_axi_MAXI_AWBURST),
    .AWLOCK(m_axi_MAXI_AWLOCK),
    .AWCACHE(m_axi_MAXI_AWCACHE),
    .AWPROT(m_axi_MAXI_AWPROT),
    .AWQOS(m_axi_MAXI_AWQOS),
    .AWREGION(m_axi_MAXI_AWREGION),
    .AWUSER(m_axi_MAXI_AWUSER),
    .WVALID(m_axi_MAXI_WVALID),
    .WREADY(m_axi_MAXI_WREADY),
    .WDATA(m_axi_MAXI_WDATA),
    .WSTRB(m_axi_MAXI_WSTRB),
    .WLAST(m_axi_MAXI_WLAST),
    .WID(m_axi_MAXI_WID),
    .WUSER(m_axi_MAXI_WUSER),
    .ARVALID(m_axi_MAXI_ARVALID),
    .ARREADY(m_axi_MAXI_ARREADY),
    .ARADDR(m_axi_MAXI_ARADDR),
    .ARID(m_axi_MAXI_ARID),
    .ARLEN(m_axi_MAXI_ARLEN),
    .ARSIZE(m_axi_MAXI_ARSIZE),
    .ARBURST(m_axi_MAXI_ARBURST),
    .ARLOCK(m_axi_MAXI_ARLOCK),
    .ARCACHE(m_axi_MAXI_ARCACHE),
    .ARPROT(m_axi_MAXI_ARPROT),
    .ARQOS(m_axi_MAXI_ARQOS),
    .ARREGION(m_axi_MAXI_ARREGION),
    .ARUSER(m_axi_MAXI_ARUSER),
    .RVALID(m_axi_MAXI_RVALID),
    .RREADY(m_axi_MAXI_RREADY),
    .RDATA(m_axi_MAXI_RDATA),
    .RLAST(m_axi_MAXI_RLAST),
    .RID(m_axi_MAXI_RID),
    .RUSER(m_axi_MAXI_RUSER),
    .RRESP(m_axi_MAXI_RRESP),
    .BVALID(m_axi_MAXI_BVALID),
    .BREADY(m_axi_MAXI_BREADY),
    .BRESP(m_axi_MAXI_BRESP),
    .BID(m_axi_MAXI_BID),
    .BUSER(m_axi_MAXI_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(MAXI_ARVALID),
    .I_ARREADY(MAXI_ARREADY),
    .I_ARADDR(MAXI_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(MAXI_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(MAXI_RVALID),
    .I_RREADY(MAXI_RREADY),
    .I_RDATA(MAXI_RDATA),
    .I_RID(MAXI_RID),
    .I_RUSER(MAXI_RUSER),
    .I_RRESP(MAXI_RRESP),
    .I_RLAST(MAXI_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(MAXI_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(MAXI_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(MAXI_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(MAXI_BRESP),
    .I_BID(MAXI_BID),
    .I_BUSER(MAXI_BUSER)
);

toplevel_mac_mulacud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 13 ))
toplevel_mac_mulacud_U1(
    .din0(grp_fu_1625_p0),
    .din1(tmp_8_reg_1714),
    .din2(tmp_9_reg_1720),
    .dout(grp_fu_1625_p3)
);

toplevel_mac_mulacud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 13 ))
toplevel_mac_mulacud_U2(
    .din0(tmp_8_reg_1714),
    .din1(grp_fu_1633_p1),
    .din2(tmp_70_reg_1915),
    .dout(grp_fu_1633_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state12)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_MAXI_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_MAXI_ARREADY == 1'b1)) begin
                ap_reg_ioackin_MAXI_ARREADY <= 1'b0;
            end else if ((1'b1 == MAXI_ARREADY)) begin
                ap_reg_ioackin_MAXI_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        agg_result_V_1_i_reg_387 <= tmp_36_agg_result_V_s_fu_1609_p3;
    end else if (((exitcond2_fu_1157_p2 == 1'd0) & (tmp_i_reg_1864 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        agg_result_V_1_i_reg_387 <= currentFreq_V_reg_352;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        agg_result_V_load1_i_reg_364 <= agg_result_V_load_i_reg_399;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        agg_result_V_load1_i_reg_364 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        agg_result_V_load_i_reg_399 <= tmp_36_agg_result_V_1_fu_1617_p3;
    end else if (((exitcond2_fu_1157_p2 == 1'd0) & (tmp_i_reg_1864 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        agg_result_V_load_i_reg_399 <= agg_result_V_load1_i_reg_364;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        currentFreq_V_reg_352 <= agg_result_V_1_i_reg_387;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        currentFreq_V_reg_352 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_reg_1864 == 1'd1) & (val_assign_fu_1152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        i_i_reg_341 <= i_reg_1868;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        i_i_reg_341 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_1687 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_reg_307 <= indvar_next_reg_1691;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_reg_307 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_1157_p2 == 1'd1) & (tmp_11_fu_1175_p2 == 1'd0) & (tmp_i_reg_1864 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        modeFreq_V_fu_152 <= currentFreq_V_reg_352;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        modeFreq_V_fu_152 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        numberOfPixelsVisted <= tmp_6_i_fu_1100_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        numberOfPixelsVisted <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (version_1_vld_reg == 1'b0) & (version_1_vld_in == 1'b1))) begin
        version_1_vld_reg <= 1'b1;
    end else if (((version_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (version_1_vld_reg == 1'b1))) begin
        version_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        x_i_reg_376 <= x_2_reg_1910;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        x_i_reg_376 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_529_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        x_reg_319 <= x_1_reg_1728;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        x_reg_319 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        y_i_reg_411 <= y_2_reg_1926;
    end else if (((exitcond2_fu_1157_p2 == 1'd0) & (tmp_i_reg_1864 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        y_i_reg_411 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (((val_assign_fu_1152_p2 == 1'd1) & (tmp_i_reg_1864 == 1'd1)) | ((exitcond2_fu_1157_p2 == 1'd1) & (tmp_i_reg_1864 == 1'd0))))) begin
        y_reg_330 <= y_1_reg_1740;
    end else if (((exitcond4_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        y_reg_330 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_1687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_addr_read_reg_1696 <= MAXI_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_511_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return[23 : 0] <= modePixel_1_fu_148[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        cast_gep_index27_cas_reg_1775 <= {{r_V_fu_604_p2[13:2]}};
        cast_gep_index32_cas_reg_1786 <= {{r_V_1_fu_624_p2[13:2]}};
        tmp_34_reg_1770 <= tmp_34_fu_610_p1;
        tmp_52_reg_1781 <= tmp_52_fu_630_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        cast_gep_index78_cas_reg_1951 <= {{r_V_5_fu_1280_p2[13:2]}};
        gepindex176_cast_reg_1941 <= {{current_V_1_fu_1247_p2[12:2]}};
        tmp_73_reg_1931 <= tmp_73_fu_1252_p1;
        tmp_75_reg_1936 <= {{current_V_1_fu_1247_p2[12:2]}};
        tmp_93_reg_1946 <= tmp_93_fu_1286_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_529_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        current_V_reg_1745 <= current_V_fu_545_p2;
        gepindex_cast_reg_1760 <= {{current_V_fu_545_p2[12:2]}};
        tmp_13_reg_1750 <= tmp_13_fu_550_p1;
        tmp_16_reg_1755 <= {{current_V_fu_545_p2[12:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_1687 <= exitcond_fu_477_p2;
        exitcond_reg_1687_pp0_iter1_reg <= exitcond_reg_1687;
        indvar_reg_307_pp0_iter1_reg <= indvar_reg_307;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (height_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (height_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (height_0_vld_reg == 1'b1)))) begin
        height_0_data_reg <= height;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        height_read_reg_1653 <= height_0_data_reg;
        length_read_reg_1646 <= length_r_0_data_reg;
        tmp_reg_1660 <= tmp_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_reg_1868 <= i_fu_1042_p2;
        tmp_i_reg_1864 <= tmp_i_fu_1037_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_1691 <= indvar_next_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (length_r_0_vld_reg == 1'b1)))) begin
        length_r_0_data_reg <= length_r;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_1157_p2 == 1'd1) & (tmp_11_fu_1175_p2 == 1'd0) & (tmp_i_reg_1864 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        modePixel_1_fu_148[23 : 0] <= modePixel_fu_1188_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        numberOfPixelsVisted_1_reg_1856 <= numberOfPixelsVisted;
        tmp_51_reg_1840 <= tmp_51_fu_1007_p1;
        tmp_69_reg_1848 <= tmp_69_fu_1025_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_add_i32_shr_reg_1670 <= {{p_add_fu_448_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        r_V_2_cast_reg_1884 <= r_V_2_cast_fu_1091_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ram1_reg_1641 <= {{ram[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_104_reg_1977[5 : 1] <= tmp_104_fu_1524_p2[5 : 1];
        tmp_107_reg_1982 <= tmp_107_fu_1534_p2;
        tmp_86_reg_1967[5 : 1] <= tmp_86_fu_1429_p2[5 : 1];
        tmp_89_reg_1972 <= tmp_89_fu_1439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_1037_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        tmp_21_i_reg_1873 <= tmp_21_i_fu_1060_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_27_reg_1792[5 : 1] <= tmp_27_fu_723_p2[5 : 1];
        tmp_30_reg_1797 <= tmp_30_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_33_reg_1812 <= tmp_33_fu_799_p1;
        tmp_45_reg_1820[5 : 1] <= tmp_45_fu_882_p2[5 : 1];
        tmp_48_reg_1825 <= tmp_48_fu_892_p2;
        tmp_63_reg_1830[5 : 1] <= tmp_63_fu_977_p2[5 : 1];
        tmp_66_reg_1835 <= tmp_66_fu_987_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_1157_p2 == 1'd0) & (tmp_i_reg_1864 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        tmp_70_reg_1915 <= tmp_70_fu_1168_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_7_reg_1665 <= tmp_7_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_8_reg_1714 <= tmp_8_fu_499_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_9_reg_1720 <= tmp_9_fu_507_p1;
        x_1_reg_1728 <= x_1_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_i_i_reg_1899 <= tmp_i_i_fu_1131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (version_1_vld_reg == 1'b0) & (version_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (version_1_vld_in == 1'b1) & (version_1_vld_reg == 1'b1)))) begin
        version_1_data_reg[0] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_reg_1864 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        x_2_reg_1910 <= x_2_fu_1162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        y_1_reg_1740 <= y_1_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        y_2_reg_1926 <= y_2_fu_1232_p2;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_MAXI_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        MAXI_ARVALID = 1'b1;
    end else begin
        MAXI_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_1687 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_RREADY = 1'b1;
    end else begin
        MAXI_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        MAXI_blk_n_AR = m_axi_MAXI_ARREADY;
    end else begin
        MAXI_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_1687 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_blk_n_R = m_axi_MAXI_RVALID;
    end else begin
        MAXI_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_477_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (version_1_ack_in == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_1687 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_phi_fu_311_p4 = indvar_next_reg_1691;
    end else begin
        ap_phi_mux_indvar_phi_fu_311_p4 = indvar_reg_307;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (version_1_ack_in == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_MAXI_ARREADY == 1'b0)) begin
        ap_sig_ioackin_MAXI_ARREADY = MAXI_ARREADY;
    end else begin
        ap_sig_ioackin_MAXI_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (version_1_ack_in == 1'b1))) begin
        height_0_ack_out = 1'b1;
    end else begin
        height_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (version_1_ack_in == 1'b1))) begin
        length_r_0_ack_out = 1'b1;
    end else begin
        length_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        sectionData_address0 = gepindex2190_cast_fu_1345_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        sectionData_address0 = gepindex2154_cast_fu_757_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        sectionData_address0 = gepindex2_cast_fu_599_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sectionData_address0 = indvar1_fu_488_p1;
    end else begin
        sectionData_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        sectionData_address1 = gepindex2178_cast_fu_1322_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        sectionData_address1 = gepindex2166_cast_fu_780_p1;
    end else begin
        sectionData_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        sectionData_ce0 = 1'b1;
    end else begin
        sectionData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19))) begin
        sectionData_ce1 = 1'b1;
    end else begin
        sectionData_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_1687_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sectionData_we0 = 1'b1;
    end else begin
        sectionData_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((version_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (version_1_vld_reg == 1'b1)))) begin
        version_1_ack_in = 1'b1;
    end else begin
        version_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        version_1_vld_in = 1'b1;
    end else begin
        version_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        visited_address0 = tmp_5_i_fu_1222_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        visited_address0 = tmp_24_i_fu_1116_p1;
    end else if (((tmp_i_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        visited_address0 = tmp_i1_fu_1095_p1;
    end else if (((tmp_i_fu_1037_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        visited_address0 = tmp_22_i_fu_1066_p1;
    end else begin
        visited_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        visited_address1 = tmp_3_i_fu_1211_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        visited_address1 = tmp_26_i_fu_1126_p1;
    end else begin
        visited_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | ((tmp_i_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((tmp_i_fu_1037_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22)))) begin
        visited_ce0 = 1'b1;
    end else begin
        visited_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23))) begin
        visited_ce1 = 1'b1;
    end else begin
        visited_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        visited_d0 = tmp_69_reg_1848;
    end else if (((tmp_i_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        visited_d0 = tmp_33_reg_1812;
    end else begin
        visited_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((tmp_i_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22)))) begin
        visited_we0 = 1'b1;
    end else begin
        visited_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        visited_we1 = 1'b1;
    end else begin
        visited_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_MAXI_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_477_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_477_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((exitcond4_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((exitcond3_fu_529_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((tmp_i_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (((val_assign_fu_1152_p2 == 1'd1) & (tmp_i_reg_1864 == 1'd1)) | ((exitcond2_fu_1157_p2 == 1'd1) & (tmp_i_reg_1864 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((exitcond2_fu_1157_p2 == 1'd0) & (tmp_i_reg_1864 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state26 : begin
            if (((exitcond1_fu_1227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (version_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MAXI_ARADDR = tmp_1_fu_463_p1;

assign MAXI_ARLEN = p_add_i32_shr_reg_1670;

assign addrCmp1_fu_744_p2 = ((mem_index_gep1_fu_739_p2 < 12'd1692) ? 1'b1 : 1'b0);

assign addrCmp2_fu_767_p2 = ((mem_index_gep2_fu_762_p2 < 12'd1692) ? 1'b1 : 1'b0);

assign addrCmp3_fu_1309_p2 = ((mem_index_gep3_fu_1303_p2 < 12'd1692) ? 1'b1 : 1'b0);

assign addrCmp4_fu_1332_p2 = ((mem_index_gep4_fu_1327_p2 < 12'd1692) ? 1'b1 : 1'b0);

assign addrCmp_fu_586_p2 = ((mem_index_gep_fu_580_p2 < 12'd1692) ? 1'b1 : 1'b0);

assign adjSize106_cast_fu_577_p1 = tmp_16_reg_1755;

assign adjSize142_cast_fu_1300_p1 = tmp_75_reg_1936;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == MAXI_RVALID) & (exitcond_reg_1687 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == MAXI_RVALID) & (exitcond_reg_1687 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter1 = ((1'b0 == MAXI_RVALID) & (exitcond_reg_1687 == 1'd0));
end

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign current_V_1_fu_1247_p2 = ($signed(tmp_72_fu_1242_p2) - $signed(grp_fu_1633_p3));

assign current_V_fu_545_p2 = ($signed(tmp_12_fu_540_p2) - $signed(grp_fu_1625_p3));

assign end_pos1_fu_810_p2 = (start_pos1_fu_803_p3 | 5'd7);

assign end_pos2_fu_905_p2 = (start_pos2_fu_898_p3 | 5'd7);

assign end_pos3_fu_1357_p2 = (start_pos3_fu_1350_p3 | 5'd7);

assign end_pos4_fu_1452_p2 = (start_pos4_fu_1445_p3 | 5'd7);

assign end_pos_fu_651_p2 = (start_pos_fu_644_p3 | 5'd7);

assign exitcond1_fu_1227_p2 = ((y_i_reg_411 == height_read_reg_1653) ? 1'b1 : 1'b0);

assign exitcond2_fu_1157_p2 = ((x_i_reg_376 == length_read_reg_1646) ? 1'b1 : 1'b0);

assign exitcond3_fu_529_p2 = ((y_reg_330 == height_read_reg_1653) ? 1'b1 : 1'b0);

assign exitcond4_fu_511_p2 = ((x_reg_319 == length_read_reg_1646) ? 1'b1 : 1'b0);

assign exitcond_fu_477_p2 = ((ap_phi_mux_indvar_phi_fu_311_p4 == p_add_i32_shr_reg_1670) ? 1'b1 : 1'b0);

assign gepindex1_fu_773_p3 = ((addrCmp2_fu_767_p2[0:0] === 1'b1) ? cast_gep_index32_cas_reg_1786 : 12'd1687);

assign gepindex2154_cast_fu_757_p1 = gepindex_fu_750_p3;

assign gepindex2166_cast_fu_780_p1 = gepindex1_fu_773_p3;

assign gepindex2178_cast_fu_1322_p1 = gepindex3_fu_1315_p3;

assign gepindex2190_cast_fu_1345_p1 = gepindex4_fu_1338_p3;

assign gepindex2_cast_fu_599_p1 = gepindex2_fu_592_p3;

assign gepindex2_fu_592_p3 = ((addrCmp_fu_586_p2[0:0] === 1'b1) ? gepindex_cast_reg_1760 : 11'd1687);

assign gepindex3_fu_1315_p3 = ((addrCmp3_fu_1309_p2[0:0] === 1'b1) ? gepindex176_cast_reg_1941 : 11'd1687);

assign gepindex4_fu_1338_p3 = ((addrCmp4_fu_1332_p2[0:0] === 1'b1) ? cast_gep_index78_cas_reg_1951 : 12'd1687);

assign gepindex_fu_750_p3 = ((addrCmp1_fu_744_p2[0:0] === 1'b1) ? cast_gep_index27_cas_reg_1775 : 12'd1687);

assign grp_fu_1625_p0 = y_reg_330[12:0];

assign grp_fu_1633_p1 = y_i_reg_411[12:0];

assign i_fu_1042_p2 = (i_i_reg_341 + 12'd1);

assign i_i_cast5_fu_1033_p1 = i_i_reg_341;

assign indvar1_fu_488_p1 = indvar_reg_307_pp0_iter1_reg;

assign indvar_next_fu_482_p2 = (ap_phi_mux_indvar_phi_fu_311_p4 + 30'd1);

assign lhs_V_1_cast3_fu_1071_p1 = numberOfPixelsVisted_1_reg_1856;

assign lhs_V_fu_1202_p1 = $unsigned(r_V_2_cast_reg_1884);

assign mem_index_gep1_fu_739_p2 = (12'd4 + cast_gep_index27_cas_reg_1775);

assign mem_index_gep2_fu_762_p2 = (12'd4 + cast_gep_index32_cas_reg_1786);

assign mem_index_gep3_fu_1303_p2 = (12'd4 + adjSize142_cast_fu_1300_p1);

assign mem_index_gep4_fu_1327_p2 = (12'd4 + cast_gep_index78_cas_reg_1951);

assign mem_index_gep_fu_580_p2 = (12'd4 + adjSize106_cast_fu_577_p1);

assign modePixel_fu_1188_p1 = tmp_14_fu_1181_p4;

assign p_add_fu_448_p2 = (32'd3 + tmp_7_reg_1665);

assign p_shl_i1_cast_fu_1081_p1 = p_shl_i1_fu_1074_p3;

assign p_shl_i1_fu_1074_p3 = {{numberOfPixelsVisted_1_reg_1856}, {2'd0}};

assign p_shl_i_cast_fu_1056_p1 = p_shl_i_fu_1048_p3;

assign p_shl_i_fu_1048_p3 = {{i_i_reg_341}, {2'd0}};

assign r_V_1_fu_624_p2 = (14'd2 + tmp_15_fu_574_p1);

assign r_V_2_cast_fu_1091_p1 = $signed(r_V_2_fu_1085_p2);

assign r_V_2_fu_1085_p2 = (p_shl_i1_cast_fu_1081_p1 - lhs_V_1_cast3_fu_1071_p1);

assign r_V_3_fu_1205_p2 = (lhs_V_fu_1202_p1 + 45'd1);

assign r_V_4_fu_1216_p2 = (lhs_V_fu_1202_p1 + 45'd2);

assign r_V_5_fu_1280_p2 = (14'd1 + tmp_74_fu_1256_p1);

assign r_V_fu_604_p2 = (14'd1 + tmp_15_fu_574_p1);

assign result_V_fu_1603_p2 = (12'd1 + agg_result_V_load_i_reg_399);

assign start_pos1_fu_803_p3 = {{tmp_34_reg_1770}, {3'd0}};

assign start_pos2_fu_898_p3 = {{tmp_52_reg_1781}, {3'd0}};

assign start_pos3_fu_1350_p3 = {{tmp_73_reg_1931}, {3'd0}};

assign start_pos4_fu_1445_p3 = {{tmp_93_reg_1946}, {3'd0}};

assign start_pos_fu_644_p3 = {{tmp_13_reg_1750}, {3'd0}};

assign tmp1_fu_1146_p2 = (tmp_i_i_9_fu_1136_p2 & tmp_37_i_i_fu_1141_p2);

assign tmp2_fu_1591_p2 = (tmp_i_i1_11_fu_1581_p2 & tmp_37_i_i1_fu_1586_p2);

assign tmp_100_fu_1494_p2 = (tmp_96_fu_1468_p1 - tmp_95_fu_1464_p1);

assign tmp_101_fu_1500_p3 = ((tmp_94_fu_1458_p2[0:0] === 1'b1) ? tmp_98_fu_1482_p2 : tmp_100_fu_1494_p2);

assign tmp_102_fu_1508_p3 = ((tmp_94_fu_1458_p2[0:0] === 1'b1) ? tmp_97_fu_1472_p4 : sectionData_q0);

assign tmp_103_fu_1516_p3 = ((tmp_94_fu_1458_p2[0:0] === 1'b1) ? tmp_99_fu_1488_p2 : tmp_95_fu_1464_p1);

assign tmp_104_fu_1524_p2 = (6'd31 - tmp_101_fu_1500_p3);

assign tmp_105_fu_1530_p1 = tmp_103_fu_1516_p3;

assign tmp_106_fu_1558_p1 = tmp_104_reg_1977;

assign tmp_107_fu_1534_p2 = tmp_102_fu_1508_p3 >> tmp_105_fu_1530_p1;

assign tmp_108_fu_1561_p2 = 32'd4294967295 >> tmp_106_fu_1558_p1;

assign tmp_109_fu_1567_p2 = (tmp_108_fu_1561_p2 & tmp_107_reg_1982);

assign tmp_110_fu_1572_p1 = tmp_109_fu_1567_p2[7:0];

assign tmp_11_fu_1175_p2 = ((currentFreq_V_reg_352 < modeFreq_V_fu_152) ? 1'b1 : 1'b0);

assign tmp_12_fu_540_p2 = grp_fu_1625_p3 << 13'd2;

assign tmp_13_fu_550_p1 = current_V_fu_545_p2[1:0];

assign tmp_14_fu_1181_p4 = {{{tmp_69_reg_1848}, {tmp_51_reg_1840}}, {tmp_33_reg_1812}};

assign tmp_15_fu_574_p1 = current_V_reg_1745;

assign tmp_17_fu_657_p2 = ((start_pos_fu_644_p3 > end_pos_fu_651_p2) ? 1'b1 : 1'b0);

assign tmp_18_fu_663_p1 = start_pos_fu_644_p3;

assign tmp_19_fu_667_p1 = end_pos_fu_651_p2;

assign tmp_1_fu_463_p1 = ram1_reg_1641;

integer ap_tvar_int_0;

always @ (sectionData_q0) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_20_fu_671_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_20_fu_671_p4[ap_tvar_int_0] = sectionData_q0[31 - ap_tvar_int_0];
        end
    end
end

assign tmp_21_fu_681_p2 = (tmp_18_fu_663_p1 - tmp_19_fu_667_p1);

assign tmp_21_i_fu_1060_p2 = (p_shl_i_cast_fu_1056_p1 - i_i_cast5_fu_1033_p1);

assign tmp_22_fu_687_p2 = (tmp_18_fu_663_p1 ^ 6'd31);

assign tmp_22_i_fu_1066_p1 = tmp_21_i_fu_1060_p2;

assign tmp_23_fu_693_p2 = (tmp_19_fu_667_p1 - tmp_18_fu_663_p1);

assign tmp_23_i_fu_1111_p2 = ($signed(tmp_21_i_reg_1873) + $signed(15'd1));

assign tmp_24_fu_699_p3 = ((tmp_17_fu_657_p2[0:0] === 1'b1) ? tmp_21_fu_681_p2 : tmp_23_fu_693_p2);

assign tmp_24_i_fu_1116_p1 = $signed(tmp_23_i_fu_1111_p2);

assign tmp_25_fu_707_p3 = ((tmp_17_fu_657_p2[0:0] === 1'b1) ? tmp_20_fu_671_p4 : sectionData_q0);

assign tmp_25_i_fu_1121_p2 = ($signed(tmp_21_i_reg_1873) + $signed(15'd2));

assign tmp_26_fu_715_p3 = ((tmp_17_fu_657_p2[0:0] === 1'b1) ? tmp_22_fu_687_p2 : tmp_18_fu_663_p1);

assign tmp_26_i_fu_1126_p1 = $signed(tmp_25_i_fu_1121_p2);

assign tmp_27_fu_723_p2 = (6'd31 - tmp_24_fu_699_p3);

assign tmp_28_fu_729_p1 = tmp_26_fu_715_p3;

assign tmp_29_fu_785_p1 = tmp_27_reg_1792;

assign tmp_30_fu_733_p2 = tmp_25_fu_707_p3 >> tmp_28_fu_729_p1;

assign tmp_31_fu_788_p2 = 32'd4294967295 >> tmp_29_fu_785_p1;

assign tmp_32_fu_794_p2 = (tmp_31_fu_788_p2 & tmp_30_reg_1797);

assign tmp_33_fu_799_p1 = tmp_32_fu_794_p2[7:0];

assign tmp_34_fu_610_p1 = r_V_fu_604_p2[1:0];

assign tmp_35_fu_816_p2 = ((start_pos1_fu_803_p3 > end_pos1_fu_810_p2) ? 1'b1 : 1'b0);

assign tmp_36_agg_result_V_1_fu_1617_p3 = ((val_assign_1_fu_1597_p2[0:0] === 1'b1) ? result_V_fu_1603_p2 : agg_result_V_load_i_reg_399);

assign tmp_36_agg_result_V_s_fu_1609_p3 = ((val_assign_1_fu_1597_p2[0:0] === 1'b1) ? result_V_fu_1603_p2 : agg_result_V_1_i_reg_387);

assign tmp_36_fu_822_p1 = start_pos1_fu_803_p3;

assign tmp_37_fu_826_p1 = end_pos1_fu_810_p2;

assign tmp_37_i_i1_fu_1586_p2 = ((tmp_110_fu_1572_p1 == tmp_69_reg_1848) ? 1'b1 : 1'b0);

assign tmp_37_i_i_fu_1141_p2 = ((tmp_69_reg_1848 == visited_q1) ? 1'b1 : 1'b0);

integer ap_tvar_int_1;

always @ (sectionData_q0) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_38_fu_830_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_38_fu_830_p4[ap_tvar_int_1] = sectionData_q0[31 - ap_tvar_int_1];
        end
    end
end

assign tmp_39_fu_840_p2 = (tmp_36_fu_822_p1 - tmp_37_fu_826_p1);

assign tmp_3_i_fu_1211_p1 = r_V_3_fu_1205_p2;

assign tmp_40_fu_846_p2 = (tmp_36_fu_822_p1 ^ 6'd31);

assign tmp_41_fu_852_p2 = (tmp_37_fu_826_p1 - tmp_36_fu_822_p1);

assign tmp_42_fu_858_p3 = ((tmp_35_fu_816_p2[0:0] === 1'b1) ? tmp_39_fu_840_p2 : tmp_41_fu_852_p2);

assign tmp_43_fu_866_p3 = ((tmp_35_fu_816_p2[0:0] === 1'b1) ? tmp_38_fu_830_p4 : sectionData_q0);

assign tmp_44_fu_874_p3 = ((tmp_35_fu_816_p2[0:0] === 1'b1) ? tmp_40_fu_846_p2 : tmp_36_fu_822_p1);

assign tmp_45_fu_882_p2 = (6'd31 - tmp_42_fu_858_p3);

assign tmp_46_fu_888_p1 = tmp_44_fu_874_p3;

assign tmp_47_fu_993_p1 = tmp_45_reg_1820;

assign tmp_48_fu_892_p2 = tmp_43_fu_866_p3 >> tmp_46_fu_888_p1;

assign tmp_49_fu_996_p2 = 32'd4294967295 >> tmp_47_fu_993_p1;

assign tmp_50_fu_1002_p2 = (tmp_49_fu_996_p2 & tmp_48_reg_1825);

assign tmp_51_fu_1007_p1 = tmp_50_fu_1002_p2[7:0];

assign tmp_52_fu_630_p1 = r_V_1_fu_624_p2[1:0];

assign tmp_53_fu_911_p2 = ((start_pos2_fu_898_p3 > end_pos2_fu_905_p2) ? 1'b1 : 1'b0);

assign tmp_54_fu_917_p1 = start_pos2_fu_898_p3;

assign tmp_55_fu_921_p1 = end_pos2_fu_905_p2;

integer ap_tvar_int_2;

always @ (sectionData_q1) begin
    for (ap_tvar_int_2 = 32 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 31 - 0) begin
            tmp_56_fu_925_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_56_fu_925_p4[ap_tvar_int_2] = sectionData_q1[31 - ap_tvar_int_2];
        end
    end
end

assign tmp_57_fu_935_p2 = (tmp_54_fu_917_p1 - tmp_55_fu_921_p1);

assign tmp_58_fu_941_p2 = (tmp_54_fu_917_p1 ^ 6'd31);

assign tmp_59_fu_947_p2 = (tmp_55_fu_921_p1 - tmp_54_fu_917_p1);

assign tmp_5_fu_432_p2 = length_r_0_data_reg << 32'd2;

assign tmp_5_i_fu_1222_p1 = r_V_4_fu_1216_p2;

assign tmp_60_fu_953_p3 = ((tmp_53_fu_911_p2[0:0] === 1'b1) ? tmp_57_fu_935_p2 : tmp_59_fu_947_p2);

assign tmp_61_fu_961_p3 = ((tmp_53_fu_911_p2[0:0] === 1'b1) ? tmp_56_fu_925_p4 : sectionData_q1);

assign tmp_62_fu_969_p3 = ((tmp_53_fu_911_p2[0:0] === 1'b1) ? tmp_58_fu_941_p2 : tmp_54_fu_917_p1);

assign tmp_63_fu_977_p2 = (6'd31 - tmp_60_fu_953_p3);

assign tmp_64_fu_983_p1 = tmp_62_fu_969_p3;

assign tmp_65_fu_1011_p1 = tmp_63_reg_1830;

assign tmp_66_fu_987_p2 = tmp_61_fu_961_p3 >> tmp_64_fu_983_p1;

assign tmp_67_fu_1014_p2 = 32'd4294967295 >> tmp_65_fu_1011_p1;

assign tmp_68_fu_1020_p2 = (tmp_67_fu_1014_p2 & tmp_66_reg_1835);

assign tmp_69_fu_1025_p1 = tmp_68_fu_1020_p2[7:0];

assign tmp_6_i_fu_1100_p2 = (numberOfPixelsVisted_1_reg_1856 + 12'd1);

assign tmp_70_fu_1168_p1 = x_i_reg_376[12:0];

assign tmp_72_fu_1242_p2 = grp_fu_1633_p3 << 13'd2;

assign tmp_73_fu_1252_p1 = current_V_1_fu_1247_p2[1:0];

assign tmp_74_fu_1256_p1 = current_V_1_fu_1247_p2;

assign tmp_76_fu_1363_p2 = ((start_pos3_fu_1350_p3 > end_pos3_fu_1357_p2) ? 1'b1 : 1'b0);

assign tmp_77_fu_1369_p1 = start_pos3_fu_1350_p3;

assign tmp_78_fu_1373_p1 = end_pos3_fu_1357_p2;

integer ap_tvar_int_3;

always @ (sectionData_q1) begin
    for (ap_tvar_int_3 = 32 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 31 - 0) begin
            tmp_79_fu_1377_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_79_fu_1377_p4[ap_tvar_int_3] = sectionData_q1[31 - ap_tvar_int_3];
        end
    end
end

assign tmp_7_fu_444_p2 = ($signed(height_read_reg_1653) * $signed(tmp_reg_1660));

assign tmp_80_fu_1387_p2 = (tmp_77_fu_1369_p1 - tmp_78_fu_1373_p1);

assign tmp_81_fu_1393_p2 = (tmp_77_fu_1369_p1 ^ 6'd31);

assign tmp_82_fu_1399_p2 = (tmp_78_fu_1373_p1 - tmp_77_fu_1369_p1);

assign tmp_83_fu_1405_p3 = ((tmp_76_fu_1363_p2[0:0] === 1'b1) ? tmp_80_fu_1387_p2 : tmp_82_fu_1399_p2);

assign tmp_84_fu_1413_p3 = ((tmp_76_fu_1363_p2[0:0] === 1'b1) ? tmp_79_fu_1377_p4 : sectionData_q1);

assign tmp_85_fu_1421_p3 = ((tmp_76_fu_1363_p2[0:0] === 1'b1) ? tmp_81_fu_1393_p2 : tmp_77_fu_1369_p1);

assign tmp_86_fu_1429_p2 = (6'd31 - tmp_83_fu_1405_p3);

assign tmp_87_fu_1435_p1 = tmp_85_fu_1421_p3;

assign tmp_88_fu_1540_p1 = tmp_86_reg_1967;

assign tmp_89_fu_1439_p2 = tmp_84_fu_1413_p3 >> tmp_87_fu_1435_p1;

assign tmp_8_fu_499_p1 = length_read_reg_1646[12:0];

assign tmp_90_fu_1543_p2 = 32'd4294967295 >> tmp_88_fu_1540_p1;

assign tmp_91_fu_1549_p2 = (tmp_90_fu_1543_p2 & tmp_89_reg_1972);

assign tmp_92_fu_1554_p1 = tmp_91_fu_1549_p2[7:0];

assign tmp_93_fu_1286_p1 = r_V_5_fu_1280_p2[1:0];

assign tmp_94_fu_1458_p2 = ((start_pos4_fu_1445_p3 > end_pos4_fu_1452_p2) ? 1'b1 : 1'b0);

assign tmp_95_fu_1464_p1 = start_pos4_fu_1445_p3;

assign tmp_96_fu_1468_p1 = end_pos4_fu_1452_p2;

integer ap_tvar_int_4;

always @ (sectionData_q0) begin
    for (ap_tvar_int_4 = 32 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 31 - 0) begin
            tmp_97_fu_1472_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_97_fu_1472_p4[ap_tvar_int_4] = sectionData_q0[31 - ap_tvar_int_4];
        end
    end
end

assign tmp_98_fu_1482_p2 = (tmp_95_fu_1464_p1 - tmp_96_fu_1468_p1);

assign tmp_99_fu_1488_p2 = (tmp_95_fu_1464_p1 ^ 6'd31);

assign tmp_9_fu_507_p1 = x_reg_319[12:0];

assign tmp_fu_438_p2 = (tmp_5_fu_432_p2 - length_r_0_data_reg);

assign tmp_i1_fu_1095_p1 = $unsigned(r_V_2_cast_fu_1091_p1);

assign tmp_i_fu_1037_p2 = ((i_i_reg_341 < numberOfPixelsVisted_1_reg_1856) ? 1'b1 : 1'b0);

assign tmp_i_i1_11_fu_1581_p2 = ((tmp_110_fu_1572_p1 == tmp_51_reg_1840) ? 1'b1 : 1'b0);

assign tmp_i_i1_fu_1576_p2 = ((tmp_92_fu_1554_p1 == tmp_33_reg_1812) ? 1'b1 : 1'b0);

assign tmp_i_i_9_fu_1136_p2 = ((tmp_51_reg_1840 == visited_q0) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_1131_p2 = ((tmp_33_reg_1812 == visited_q0) ? 1'b1 : 1'b0);

assign val_assign_1_fu_1597_p2 = (tmp_i_i1_fu_1576_p2 & tmp2_fu_1591_p2);

assign val_assign_fu_1152_p2 = (tmp_i_i_reg_1899 & tmp1_fu_1146_p2);

assign x_1_fu_516_p2 = (32'd1 + x_reg_319);

assign x_2_fu_1162_p2 = (x_i_reg_376 + 32'd1);

assign y_1_fu_534_p2 = (32'd1 + y_reg_330);

assign y_2_fu_1232_p2 = (y_i_reg_411 + 32'd1);

always @ (posedge ap_clk) begin
    version_1_data_reg[31:1] <= 31'b0000000000000000000000000000000;
    ap_return[31:24] <= 8'b00000000;
    tmp_27_reg_1792[0] <= 1'b0;
    tmp_45_reg_1820[0] <= 1'b0;
    tmp_63_reg_1830[0] <= 1'b0;
    tmp_86_reg_1967[0] <= 1'b0;
    tmp_104_reg_1977[0] <= 1'b0;
    modePixel_1_fu_148[31:24] <= 8'b00000000;
end

endmodule //toplevel
