// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="toplevel,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=7.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.562500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=16,HLS_SYN_FF=4096,HLS_SYN_LUT=5915,HLS_VERSION=2018_2_1}" *)

module toplevel (
        ap_clk,
        ap_rst_n,
        m_axi_MAXI_AWVALID,
        m_axi_MAXI_AWREADY,
        m_axi_MAXI_AWADDR,
        m_axi_MAXI_AWID,
        m_axi_MAXI_AWLEN,
        m_axi_MAXI_AWSIZE,
        m_axi_MAXI_AWBURST,
        m_axi_MAXI_AWLOCK,
        m_axi_MAXI_AWCACHE,
        m_axi_MAXI_AWPROT,
        m_axi_MAXI_AWQOS,
        m_axi_MAXI_AWREGION,
        m_axi_MAXI_AWUSER,
        m_axi_MAXI_WVALID,
        m_axi_MAXI_WREADY,
        m_axi_MAXI_WDATA,
        m_axi_MAXI_WSTRB,
        m_axi_MAXI_WLAST,
        m_axi_MAXI_WID,
        m_axi_MAXI_WUSER,
        m_axi_MAXI_ARVALID,
        m_axi_MAXI_ARREADY,
        m_axi_MAXI_ARADDR,
        m_axi_MAXI_ARID,
        m_axi_MAXI_ARLEN,
        m_axi_MAXI_ARSIZE,
        m_axi_MAXI_ARBURST,
        m_axi_MAXI_ARLOCK,
        m_axi_MAXI_ARCACHE,
        m_axi_MAXI_ARPROT,
        m_axi_MAXI_ARQOS,
        m_axi_MAXI_ARREGION,
        m_axi_MAXI_ARUSER,
        m_axi_MAXI_RVALID,
        m_axi_MAXI_RREADY,
        m_axi_MAXI_RDATA,
        m_axi_MAXI_RLAST,
        m_axi_MAXI_RID,
        m_axi_MAXI_RUSER,
        m_axi_MAXI_RRESP,
        m_axi_MAXI_BVALID,
        m_axi_MAXI_BREADY,
        m_axi_MAXI_BRESP,
        m_axi_MAXI_BID,
        m_axi_MAXI_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_pp0_stage0 = 37'd8192;
parameter    ap_ST_fsm_state17 = 37'd16384;
parameter    ap_ST_fsm_state18 = 37'd32768;
parameter    ap_ST_fsm_state19 = 37'd65536;
parameter    ap_ST_fsm_state20 = 37'd131072;
parameter    ap_ST_fsm_state21 = 37'd262144;
parameter    ap_ST_fsm_state22 = 37'd524288;
parameter    ap_ST_fsm_state23 = 37'd1048576;
parameter    ap_ST_fsm_state24 = 37'd2097152;
parameter    ap_ST_fsm_state25 = 37'd4194304;
parameter    ap_ST_fsm_state26 = 37'd8388608;
parameter    ap_ST_fsm_state27 = 37'd16777216;
parameter    ap_ST_fsm_state28 = 37'd33554432;
parameter    ap_ST_fsm_state29 = 37'd67108864;
parameter    ap_ST_fsm_state30 = 37'd134217728;
parameter    ap_ST_fsm_state31 = 37'd268435456;
parameter    ap_ST_fsm_state32 = 37'd536870912;
parameter    ap_ST_fsm_state33 = 37'd1073741824;
parameter    ap_ST_fsm_state34 = 37'd2147483648;
parameter    ap_ST_fsm_state35 = 37'd4294967296;
parameter    ap_ST_fsm_state36 = 37'd8589934592;
parameter    ap_ST_fsm_pp2_stage0 = 37'd17179869184;
parameter    ap_ST_fsm_state47 = 37'd34359738368;
parameter    ap_ST_fsm_state48 = 37'd68719476736;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MAXI_ID_WIDTH = 1;
parameter    C_M_AXI_MAXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_MAXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MAXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_USER_VALUE = 0;
parameter    C_M_AXI_MAXI_PROT_VALUE = 0;
parameter    C_M_AXI_MAXI_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MAXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_MAXI_AWVALID;
input   m_axi_MAXI_AWREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_AWADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_AWID;
output  [7:0] m_axi_MAXI_AWLEN;
output  [2:0] m_axi_MAXI_AWSIZE;
output  [1:0] m_axi_MAXI_AWBURST;
output  [1:0] m_axi_MAXI_AWLOCK;
output  [3:0] m_axi_MAXI_AWCACHE;
output  [2:0] m_axi_MAXI_AWPROT;
output  [3:0] m_axi_MAXI_AWQOS;
output  [3:0] m_axi_MAXI_AWREGION;
output  [C_M_AXI_MAXI_AWUSER_WIDTH - 1:0] m_axi_MAXI_AWUSER;
output   m_axi_MAXI_WVALID;
input   m_axi_MAXI_WREADY;
output  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_WDATA;
output  [C_M_AXI_MAXI_WSTRB_WIDTH - 1:0] m_axi_MAXI_WSTRB;
output   m_axi_MAXI_WLAST;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_WID;
output  [C_M_AXI_MAXI_WUSER_WIDTH - 1:0] m_axi_MAXI_WUSER;
output   m_axi_MAXI_ARVALID;
input   m_axi_MAXI_ARREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_ARADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_ARID;
output  [7:0] m_axi_MAXI_ARLEN;
output  [2:0] m_axi_MAXI_ARSIZE;
output  [1:0] m_axi_MAXI_ARBURST;
output  [1:0] m_axi_MAXI_ARLOCK;
output  [3:0] m_axi_MAXI_ARCACHE;
output  [2:0] m_axi_MAXI_ARPROT;
output  [3:0] m_axi_MAXI_ARQOS;
output  [3:0] m_axi_MAXI_ARREGION;
output  [C_M_AXI_MAXI_ARUSER_WIDTH - 1:0] m_axi_MAXI_ARUSER;
input   m_axi_MAXI_RVALID;
output   m_axi_MAXI_RREADY;
input  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_RDATA;
input   m_axi_MAXI_RLAST;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_RID;
input  [C_M_AXI_MAXI_RUSER_WIDTH - 1:0] m_axi_MAXI_RUSER;
input  [1:0] m_axi_MAXI_RRESP;
input   m_axi_MAXI_BVALID;
output   m_axi_MAXI_BREADY;
input  [1:0] m_axi_MAXI_BRESP;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_BID;
input  [C_M_AXI_MAXI_BUSER_WIDTH - 1:0] m_axi_MAXI_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] ram;
wire   [31:0] length_r;
reg   [31:0] length_r_0_data_reg;
reg    length_r_0_vld_reg;
reg    length_r_0_ack_out;
wire   [31:0] height;
reg   [31:0] height_0_data_reg;
reg    height_0_vld_reg;
reg    height_0_ack_out;
reg   [31:0] version_1_data_reg;
reg   [31:0] version_1_data_in;
reg    version_1_vld_reg;
reg    version_1_vld_in;
reg    version_1_ack_in;
reg   [10:0] sectionData_address0;
reg    sectionData_ce0;
reg    sectionData_we0;
wire   [31:0] sectionData_q0;
reg   [10:0] sectionData_address1;
reg    sectionData_ce1;
wire   [31:0] sectionData_q1;
reg   [63:0] numberOfPixelsVisted;
reg   [12:0] visited_address0;
reg    visited_ce0;
reg    visited_we0;
wire   [7:0] visited_q0;
reg   [12:0] visited_address1;
reg    visited_ce1;
reg    visited_we1;
reg   [7:0] visited_d1;
wire   [7:0] visited_q1;
reg   [31:0] ap_return;
reg    MAXI_blk_n_AR;
wire    ap_CS_fsm_state7;
reg    MAXI_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_1837;
wire    MAXI_AWREADY;
wire    MAXI_WREADY;
reg    MAXI_ARVALID;
wire    MAXI_ARREADY;
wire   [31:0] MAXI_ARADDR;
wire   [31:0] MAXI_ARLEN;
wire    MAXI_RVALID;
reg    MAXI_RREADY;
wire   [31:0] MAXI_RDATA;
wire    MAXI_RLAST;
wire   [0:0] MAXI_RID;
wire   [0:0] MAXI_RUSER;
wire   [1:0] MAXI_RRESP;
wire    MAXI_BVALID;
wire   [1:0] MAXI_BRESP;
wire   [0:0] MAXI_BID;
wire   [0:0] MAXI_BUSER;
reg   [29:0] indvar_reg_297;
reg   [29:0] indvar_reg_297_pp0_iter1_reg;
wire    ap_block_state14_pp0_stage0_iter0;
reg    ap_block_state15_pp0_stage0_iter1;
wire    ap_block_state16_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] indvar_flatten_reg_353;
reg   [31:0] x_i_reg_364;
reg   [63:0] result_1_i_reg_375;
reg   [31:0] y_i_reg_387;
reg   [31:0] reg_401;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
reg    ap_enable_reg_pp2_iter6;
wire    ap_block_state37_pp2_stage0_iter0;
wire    ap_block_state38_pp2_stage0_iter1;
wire    ap_block_state39_pp2_stage0_iter2;
wire    ap_block_state40_pp2_stage0_iter3;
wire    ap_block_state41_pp2_stage0_iter4;
wire    ap_block_state42_pp2_stage0_iter5;
wire    ap_block_state43_pp2_stage0_iter6;
wire    ap_block_state44_pp2_stage0_iter7;
wire    ap_block_state45_pp2_stage0_iter8;
wire    ap_block_state46_pp2_stage0_iter9;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] exitcond_flatten_reg_2116;
reg   [0:0] exitcond_flatten_reg_2116_pp2_iter5_reg;
reg   [31:0] reg_406;
reg    ap_enable_reg_pp2_iter7;
reg   [0:0] exitcond_flatten_reg_2116_pp2_iter6_reg;
reg   [29:0] ram1_reg_1790;
reg   [31:0] length_read_reg_1795;
wire    ap_CS_fsm_state2;
reg  signed [31:0] height_read_reg_1802;
wire  signed [31:0] tmp_fu_427_p2;
reg  signed [31:0] tmp_reg_1810;
wire   [31:0] grp_fu_433_p2;
reg   [31:0] tmp_4_reg_1815;
wire    ap_CS_fsm_state5;
reg   [29:0] p_add_i32_shr_reg_1820;
wire    ap_CS_fsm_state6;
reg    ap_sig_ioackin_MAXI_ARREADY;
wire   [0:0] exitcond_fu_466_p2;
reg   [0:0] exitcond_reg_1837_pp0_iter1_reg;
wire   [29:0] indvar_next_fu_471_p2;
reg   [29:0] indvar_next_reg_1841;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] MAXI_addr_read_reg_1846;
wire   [63:0] length_assign_fu_488_p1;
reg   [63:0] length_assign_reg_1864;
wire    ap_CS_fsm_state17;
wire  signed [63:0] tmp_36_i_cast_fu_525_p1;
reg  signed [63:0] tmp_36_i_cast_reg_1875;
wire    ap_CS_fsm_state19;
wire   [63:0] grp_fu_494_p2;
reg   [63:0] bound_reg_1880;
wire   [63:0] indvar_flatten_next1_fu_534_p2;
reg   [63:0] indvar_flatten_next1_reg_1889;
wire    ap_CS_fsm_state20;
wire   [31:0] y_mid2_fu_545_p3;
reg   [31:0] y_mid2_reg_1894;
wire   [0:0] exitcond_flatten1_fu_529_p2;
wire   [31:0] x_cast_mid2_v_fu_559_p3;
reg   [31:0] x_cast_mid2_v_reg_1900;
wire    ap_CS_fsm_state21;
wire   [63:0] grp_fu_570_p2;
reg   [63:0] tmp_s_reg_1915;
wire    ap_CS_fsm_state23;
wire   [63:0] tmp_1_fu_578_p2;
reg   [63:0] tmp_1_reg_1920;
wire    ap_CS_fsm_state24;
wire   [63:0] current_fu_588_p2;
reg   [63:0] current_reg_1926;
wire    ap_CS_fsm_state25;
wire   [1:0] tmp_10_fu_593_p1;
reg   [1:0] tmp_10_reg_1932;
wire   [13:0] mem_index_gep_fu_607_p2;
reg   [13:0] mem_index_gep_reg_1937;
wire   [0:0] addrCmp1_fu_613_p2;
reg   [0:0] addrCmp1_reg_1943;
wire    ap_CS_fsm_state26;
wire   [1:0] tmp_30_fu_658_p1;
reg   [1:0] tmp_30_reg_1953;
wire   [13:0] mem_index_gep1_fu_672_p2;
reg   [13:0] mem_index_gep1_reg_1958;
wire   [0:0] addrCmp3_fu_678_p2;
reg   [0:0] addrCmp3_reg_1964;
wire   [1:0] tmp_48_fu_689_p1;
reg   [1:0] tmp_48_reg_1969;
wire   [13:0] mem_index_gep2_fu_703_p2;
reg   [13:0] mem_index_gep2_reg_1974;
wire   [0:0] addrCmp5_fu_709_p2;
reg   [0:0] addrCmp5_reg_1980;
wire   [5:0] tmp_23_fu_862_p2;
reg   [5:0] tmp_23_reg_1995;
wire   [31:0] tmp_26_fu_872_p2;
reg   [31:0] tmp_26_reg_2000;
wire   [7:0] tmp_29_fu_892_p1;
reg   [7:0] tmp_29_reg_2005;
wire    ap_CS_fsm_state29;
wire   [5:0] tmp_41_fu_975_p2;
reg   [5:0] tmp_41_reg_2013;
wire   [31:0] tmp_44_fu_985_p2;
reg   [31:0] tmp_44_reg_2018;
wire   [5:0] tmp_59_fu_1070_p2;
reg   [5:0] tmp_59_reg_2023;
wire   [31:0] tmp_62_fu_1080_p2;
reg   [31:0] tmp_62_reg_2028;
wire   [7:0] tmp_47_fu_1100_p1;
reg   [7:0] tmp_47_reg_2033;
wire    ap_CS_fsm_state30;
wire   [7:0] tmp_65_fu_1118_p1;
reg   [7:0] tmp_65_reg_2041;
reg   [63:0] numberOfPixelsVisted_1_reg_2049;
wire   [13:0] tmp_66_fu_1126_p1;
reg   [13:0] tmp_66_reg_2056;
wire   [0:0] tmp_i_6_fu_1134_p2;
reg   [0:0] tmp_i_6_reg_2061;
wire    ap_CS_fsm_state31;
wire   [31:0] i_fu_1139_p2;
reg   [31:0] i_reg_2065;
wire  signed [31:0] tmp_26_i_fu_1151_p2;
reg  signed [31:0] tmp_26_i_reg_2070;
wire    ap_CS_fsm_state32;
wire   [0:0] tmp_i_i_fu_1182_p2;
reg   [0:0] tmp_i_i_reg_2091;
wire   [31:0] modePixel_fu_1215_p1;
reg   [31:0] modePixel_reg_2099;
wire    ap_CS_fsm_state35;
wire   [13:0] tmp_i1_fu_1231_p2;
reg   [13:0] tmp_i1_reg_2105;
wire   [31:0] tmp_32_i1_fu_1278_p2;
reg   [31:0] tmp_32_i1_reg_2111;
wire    ap_CS_fsm_pp2_stage0;
reg   [31:0] tmp_32_i1_reg_2111_pp2_iter1_reg;
reg   [31:0] tmp_32_i1_reg_2111_pp2_iter2_reg;
reg   [31:0] tmp_32_i1_reg_2111_pp2_iter3_reg;
wire   [0:0] exitcond_flatten_fu_1284_p2;
reg   [0:0] exitcond_flatten_reg_2116_pp2_iter1_reg;
reg   [0:0] exitcond_flatten_reg_2116_pp2_iter2_reg;
reg   [0:0] exitcond_flatten_reg_2116_pp2_iter3_reg;
reg   [0:0] exitcond_flatten_reg_2116_pp2_iter4_reg;
reg   [0:0] exitcond_flatten_reg_2116_pp2_iter7_reg;
reg   [0:0] exitcond_flatten_reg_2116_pp2_iter8_reg;
wire   [63:0] indvar_flatten_next_fu_1289_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] exitcond2_fu_1295_p2;
reg   [0:0] exitcond2_reg_2125;
reg   [0:0] exitcond2_reg_2125_pp2_iter1_reg;
reg   [0:0] exitcond2_reg_2125_pp2_iter2_reg;
reg   [0:0] exitcond2_reg_2125_pp2_iter3_reg;
wire  signed [31:0] y_i_mid2_fu_1300_p3;
reg  signed [31:0] y_i_mid2_reg_2130;
wire   [31:0] x_1_fu_1308_p2;
reg   [31:0] x_1_reg_2135;
reg   [31:0] x_1_reg_2135_pp2_iter1_reg;
reg   [31:0] x_1_reg_2135_pp2_iter2_reg;
wire   [31:0] x_i_mid2_fu_1314_p3;
wire   [31:0] y_2_fu_1322_p2;
wire   [31:0] tmp_32_i1_mid1_fu_1341_p2;
reg   [31:0] tmp_32_i1_mid1_reg_2156;
wire   [63:0] grp_fu_1331_p2;
reg   [63:0] tmp_37_i_reg_2161;
wire   [63:0] current_1_fu_1355_p2;
reg   [63:0] current_1_reg_2166;
wire   [1:0] tmp_71_fu_1360_p1;
reg   [1:0] tmp_71_reg_2171;
reg   [1:0] tmp_71_reg_2171_pp2_iter5_reg;
reg   [1:0] tmp_71_reg_2171_pp2_iter6_reg;
wire   [13:0] mem_index_gep3_fu_1374_p2;
reg   [13:0] mem_index_gep3_reg_2176;
wire   [0:0] addrCmp_fu_1380_p2;
reg   [0:0] addrCmp_reg_2182;
wire   [1:0] tmp_89_fu_1425_p1;
reg   [1:0] tmp_89_reg_2192;
reg   [1:0] tmp_89_reg_2192_pp2_iter6_reg;
reg   [1:0] tmp_89_reg_2192_pp2_iter7_reg;
wire   [13:0] mem_index_gep4_fu_1439_p2;
reg   [13:0] mem_index_gep4_reg_2197;
wire   [0:0] addrCmp8_fu_1445_p2;
reg   [0:0] addrCmp8_reg_2203;
wire   [5:0] tmp_82_fu_1564_p2;
reg   [5:0] tmp_82_reg_2213;
wire   [31:0] tmp_85_fu_1574_p2;
reg   [31:0] tmp_85_reg_2218;
wire   [5:0] tmp_100_fu_1677_p2;
reg   [5:0] tmp_100_reg_2223;
wire   [31:0] tmp_103_fu_1687_p2;
reg   [31:0] tmp_103_reg_2228;
wire   [0:0] tmp_i_i1_fu_1693_p2;
reg   [0:0] tmp_i_i1_reg_2233;
wire   [63:0] p_result_1_i_fu_1743_p3;
reg    ap_enable_reg_pp2_iter9;
wire   [31:0] y_1_fu_1785_p2;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state13;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state14;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state36;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state37;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter8;
reg   [29:0] ap_phi_mux_indvar_phi_fu_301_p4;
reg   [63:0] indvar_flatten1_reg_309;
reg   [31:0] x_reg_320;
reg   [31:0] y_reg_331;
reg  signed [31:0] i_i_reg_342;
wire    ap_CS_fsm_state33;
wire   [0:0] val_assign_fu_1203_p2;
wire   [63:0] indvar3_fu_477_p1;
wire  signed [63:0] gepindex2166_cast_fu_648_p1;
wire  signed [63:0] gepindex2178_cast_fu_744_p1;
wire  signed [63:0] gepindex2190_cast_fu_778_p1;
wire  signed [63:0] tmp_27_i_fu_1157_p1;
wire  signed [63:0] tmp_29_i_fu_1167_p1;
wire  signed [63:0] tmp_31_i_fu_1177_p1;
wire   [63:0] tmp_i1_cast_fu_1236_p1;
wire   [63:0] tmp_1_i_cast_fu_1257_p1;
wire   [63:0] tmp_2_i_cast_fu_1267_p1;
wire  signed [63:0] gepindex2_cast_fu_1415_p1;
wire    ap_block_pp2_stage0;
wire  signed [63:0] gepindex2154_cast_fu_1480_p1;
wire   [63:0] tmp_5_fu_452_p1;
reg    ap_reg_ioackin_MAXI_ARREADY;
wire   [63:0] tmp_3_i_fu_1241_p2;
reg   [63:0] modeFreq_1_fu_138;
wire   [63:0] modeFreq_1_currentFr_fu_1767_p3;
reg   [31:0] modePixel_1_fu_142;
wire   [31:0] modePixel_1_tmp_s_fu_1760_p3;
wire    ap_CS_fsm_state12;
wire   [31:0] tmp_6_fu_421_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] p_add_fu_437_p2;
wire   [31:0] grp_fu_494_p0;
wire   [31:0] grp_fu_494_p1;
wire   [33:0] p_shl1_i_fu_508_p3;
wire   [34:0] p_shl1_i_cast_fu_515_p1;
wire   [34:0] tmp_5_cast4_fu_505_p1;
wire   [34:0] tmp_36_i_fu_519_p2;
wire   [0:0] exitcond1_fu_540_p2;
wire   [31:0] x_s_fu_553_p2;
wire   [31:0] grp_fu_570_p0;
wire   [31:0] grp_fu_570_p1;
wire   [63:0] x_cast_mid2_fu_575_p1;
wire   [63:0] tmp_8_fu_583_p2;
wire   [13:0] adjSize_fu_597_p4;
wire   [14:0] adjSize160_cast_fu_619_p1;
wire   [14:0] gepindex1_fu_627_p2;
wire   [0:0] addrCmp2_fu_622_p2;
wire   [14:0] gepindex3_fu_633_p3;
wire   [14:0] gepindex4_fu_640_p3;
wire   [63:0] tmp_2_fu_653_p2;
wire   [13:0] adjSize1_fu_662_p4;
wire   [63:0] tmp_3_fu_684_p2;
wire   [13:0] adjSize2_fu_693_p4;
wire   [14:0] adjSize172_cast_fu_715_p1;
wire   [14:0] gepindex5_fu_723_p2;
wire   [0:0] addrCmp4_fu_718_p2;
wire   [14:0] gepindex6_fu_729_p3;
wire   [14:0] gepindex7_fu_736_p3;
wire   [14:0] adjSize184_cast_fu_749_p1;
wire   [14:0] gepindex8_fu_757_p2;
wire   [0:0] addrCmp6_fu_752_p2;
wire   [14:0] gepindex9_fu_763_p3;
wire   [14:0] gepindex10_fu_770_p3;
wire   [4:0] start_pos1_fu_783_p3;
wire   [4:0] end_pos_fu_790_p2;
wire   [5:0] tmp_13_fu_802_p1;
wire   [5:0] tmp_15_fu_806_p1;
wire   [0:0] tmp_11_fu_796_p2;
wire   [5:0] tmp_17_fu_820_p2;
wire   [5:0] tmp_19_fu_832_p2;
reg   [31:0] tmp_16_fu_810_p4;
wire   [5:0] tmp_18_fu_826_p2;
wire   [5:0] tmp_20_fu_838_p3;
wire   [5:0] tmp_22_fu_854_p3;
wire   [31:0] tmp_21_fu_846_p3;
wire   [31:0] tmp_24_fu_868_p1;
wire   [31:0] tmp_25_fu_878_p1;
wire   [31:0] tmp_27_fu_881_p2;
wire   [31:0] tmp_28_fu_887_p2;
wire   [4:0] start_pos2_fu_896_p3;
wire   [4:0] end_pos1_fu_903_p2;
wire   [5:0] tmp_32_fu_915_p1;
wire   [5:0] tmp_33_fu_919_p1;
wire   [0:0] tmp_31_fu_909_p2;
wire   [5:0] tmp_35_fu_933_p2;
wire   [5:0] tmp_37_fu_945_p2;
reg   [31:0] tmp_34_fu_923_p4;
wire   [5:0] tmp_36_fu_939_p2;
wire   [5:0] tmp_38_fu_951_p3;
wire   [5:0] tmp_40_fu_967_p3;
wire   [31:0] tmp_39_fu_959_p3;
wire   [31:0] tmp_42_fu_981_p1;
wire   [4:0] start_pos3_fu_991_p3;
wire   [4:0] end_pos2_fu_998_p2;
wire   [5:0] tmp_50_fu_1010_p1;
wire   [5:0] tmp_51_fu_1014_p1;
wire   [0:0] tmp_49_fu_1004_p2;
wire   [5:0] tmp_53_fu_1028_p2;
wire   [5:0] tmp_55_fu_1040_p2;
reg   [31:0] tmp_52_fu_1018_p4;
wire   [5:0] tmp_54_fu_1034_p2;
wire   [5:0] tmp_56_fu_1046_p3;
wire   [5:0] tmp_58_fu_1062_p3;
wire   [31:0] tmp_57_fu_1054_p3;
wire   [31:0] tmp_60_fu_1076_p1;
wire   [31:0] tmp_43_fu_1086_p1;
wire   [31:0] tmp_45_fu_1089_p2;
wire   [31:0] tmp_46_fu_1095_p2;
wire   [31:0] tmp_61_fu_1104_p1;
wire   [31:0] tmp_63_fu_1107_p2;
wire   [31:0] tmp_64_fu_1113_p2;
wire  signed [63:0] tmp_i_fu_1130_p1;
wire   [31:0] tmp_67_fu_1145_p2;
wire   [31:0] tmp_28_i_fu_1162_p2;
wire   [31:0] tmp_30_i_fu_1172_p2;
wire   [0:0] tmp_i_i_7_fu_1187_p2;
wire   [0:0] tmp_39_i_i_fu_1192_p2;
wire   [0:0] tmp1_fu_1197_p2;
wire   [23:0] tmp_12_fu_1208_p4;
wire   [11:0] tmp_68_fu_1220_p1;
wire   [13:0] p_shl_i1_fu_1223_p3;
wire   [13:0] tmp_1_i_fu_1252_p2;
wire   [13:0] tmp_2_i_fu_1262_p2;
wire   [31:0] tmp_69_fu_1272_p2;
wire  signed [34:0] grp_fu_1331_p1;
wire   [31:0] tmp_70_fu_1336_p2;
wire   [31:0] tmp_33_i_mid2_v_fu_1346_p3;
wire  signed [63:0] tmp_33_i_mid2_fu_1351_p1;
wire   [13:0] adjSize3_fu_1364_p4;
wire   [14:0] adjSize145_cast_fu_1386_p1;
wire   [14:0] gepindex_fu_1394_p2;
wire   [0:0] addrCmp7_fu_1389_p2;
wire   [14:0] gepindex11_fu_1400_p3;
wire   [14:0] gepindex2_fu_1407_p3;
wire   [63:0] tmp_38_i_fu_1420_p2;
wire   [13:0] adjSize4_fu_1429_p4;
wire   [14:0] adjSize148_cast_fu_1451_p1;
wire   [14:0] gepindex12_fu_1459_p2;
wire   [0:0] addrCmp9_fu_1454_p2;
wire   [14:0] gepindex13_fu_1465_p3;
wire   [14:0] gepindex14_fu_1472_p3;
wire   [4:0] start_pos_fu_1485_p3;
wire   [4:0] end_pos3_fu_1492_p2;
wire   [5:0] tmp_73_fu_1504_p1;
wire   [5:0] tmp_74_fu_1508_p1;
wire   [0:0] tmp_72_fu_1498_p2;
wire   [5:0] tmp_76_fu_1522_p2;
wire   [5:0] tmp_78_fu_1534_p2;
reg   [31:0] tmp_75_fu_1512_p4;
wire   [5:0] tmp_77_fu_1528_p2;
wire   [5:0] tmp_79_fu_1540_p3;
wire   [5:0] tmp_81_fu_1556_p3;
wire   [31:0] tmp_80_fu_1548_p3;
wire   [31:0] tmp_83_fu_1570_p1;
wire   [31:0] tmp_84_fu_1580_p1;
wire   [31:0] tmp_86_fu_1583_p2;
wire   [31:0] tmp_87_fu_1589_p2;
wire   [4:0] start_pos4_fu_1598_p3;
wire   [4:0] end_pos4_fu_1605_p2;
wire   [5:0] tmp_91_fu_1617_p1;
wire   [5:0] tmp_92_fu_1621_p1;
wire   [0:0] tmp_90_fu_1611_p2;
wire   [5:0] tmp_94_fu_1635_p2;
wire   [5:0] tmp_96_fu_1647_p2;
reg   [31:0] tmp_93_fu_1625_p4;
wire   [5:0] tmp_95_fu_1641_p2;
wire   [5:0] tmp_97_fu_1653_p3;
wire   [5:0] tmp_99_fu_1669_p3;
wire   [31:0] tmp_98_fu_1661_p3;
wire   [31:0] tmp_101_fu_1683_p1;
wire   [7:0] tmp_88_fu_1594_p1;
wire   [31:0] tmp_102_fu_1698_p1;
wire   [31:0] tmp_104_fu_1701_p2;
wire   [31:0] tmp_105_fu_1707_p2;
wire   [7:0] tmp_106_fu_1712_p1;
wire   [0:0] tmp_i_i1_8_fu_1716_p2;
wire   [0:0] tmp_39_i_i1_fu_1721_p2;
wire   [0:0] tmp2_fu_1726_p2;
wire   [0:0] val_assign_1_fu_1732_p2;
wire   [63:0] result_fu_1737_p2;
wire   [0:0] tmp_14_fu_1754_p2;
wire    ap_CS_fsm_state48;
reg   [36:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [63:0] grp_fu_494_p00;
wire   [63:0] grp_fu_494_p10;
wire   [63:0] grp_fu_570_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 length_r_0_data_reg = 32'd0;
#0 length_r_0_vld_reg = 1'b0;
#0 height_0_data_reg = 32'd0;
#0 height_0_vld_reg = 1'b0;
#0 version_1_data_reg = 32'd0;
#0 version_1_vld_reg = 1'b0;
#0 numberOfPixelsVisted = 64'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_reg_ioackin_MAXI_ARREADY = 1'b0;
end

toplevel_sectionDbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1688 ),
    .AddressWidth( 11 ))
sectionData_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sectionData_address0),
    .ce0(sectionData_ce0),
    .we0(sectionData_we0),
    .d0(MAXI_addr_read_reg_1846),
    .q0(sectionData_q0),
    .address1(sectionData_address1),
    .ce1(sectionData_ce1),
    .q1(sectionData_q1)
);

toplevel_visited #(
    .DataWidth( 8 ),
    .AddressRange( 6750 ),
    .AddressWidth( 13 ))
visited_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(visited_address0),
    .ce0(visited_ce0),
    .we0(visited_we0),
    .d0(tmp_47_reg_2033),
    .q0(visited_q0),
    .address1(visited_address1),
    .ce1(visited_ce1),
    .we1(visited_we1),
    .d1(visited_d1),
    .q1(visited_q1)
);

toplevel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
toplevel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .ram(ram),
    .length_r(length_r),
    .height(height),
    .version(version_1_data_reg),
    .version_ap_vld(version_1_vld_reg)
);

toplevel_MAXI_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MAXI_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MAXI_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MAXI_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MAXI_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MAXI_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MAXI_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MAXI_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MAXI_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MAXI_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MAXI_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MAXI_CACHE_VALUE ))
toplevel_MAXI_m_axi_U(
    .AWVALID(m_axi_MAXI_AWVALID),
    .AWREADY(m_axi_MAXI_AWREADY),
    .AWADDR(m_axi_MAXI_AWADDR),
    .AWID(m_axi_MAXI_AWID),
    .AWLEN(m_axi_MAXI_AWLEN),
    .AWSIZE(m_axi_MAXI_AWSIZE),
    .AWBURST(m_axi_MAXI_AWBURST),
    .AWLOCK(m_axi_MAXI_AWLOCK),
    .AWCACHE(m_axi_MAXI_AWCACHE),
    .AWPROT(m_axi_MAXI_AWPROT),
    .AWQOS(m_axi_MAXI_AWQOS),
    .AWREGION(m_axi_MAXI_AWREGION),
    .AWUSER(m_axi_MAXI_AWUSER),
    .WVALID(m_axi_MAXI_WVALID),
    .WREADY(m_axi_MAXI_WREADY),
    .WDATA(m_axi_MAXI_WDATA),
    .WSTRB(m_axi_MAXI_WSTRB),
    .WLAST(m_axi_MAXI_WLAST),
    .WID(m_axi_MAXI_WID),
    .WUSER(m_axi_MAXI_WUSER),
    .ARVALID(m_axi_MAXI_ARVALID),
    .ARREADY(m_axi_MAXI_ARREADY),
    .ARADDR(m_axi_MAXI_ARADDR),
    .ARID(m_axi_MAXI_ARID),
    .ARLEN(m_axi_MAXI_ARLEN),
    .ARSIZE(m_axi_MAXI_ARSIZE),
    .ARBURST(m_axi_MAXI_ARBURST),
    .ARLOCK(m_axi_MAXI_ARLOCK),
    .ARCACHE(m_axi_MAXI_ARCACHE),
    .ARPROT(m_axi_MAXI_ARPROT),
    .ARQOS(m_axi_MAXI_ARQOS),
    .ARREGION(m_axi_MAXI_ARREGION),
    .ARUSER(m_axi_MAXI_ARUSER),
    .RVALID(m_axi_MAXI_RVALID),
    .RREADY(m_axi_MAXI_RREADY),
    .RDATA(m_axi_MAXI_RDATA),
    .RLAST(m_axi_MAXI_RLAST),
    .RID(m_axi_MAXI_RID),
    .RUSER(m_axi_MAXI_RUSER),
    .RRESP(m_axi_MAXI_RRESP),
    .BVALID(m_axi_MAXI_BVALID),
    .BREADY(m_axi_MAXI_BREADY),
    .BRESP(m_axi_MAXI_BRESP),
    .BID(m_axi_MAXI_BID),
    .BUSER(m_axi_MAXI_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(MAXI_ARVALID),
    .I_ARREADY(MAXI_ARREADY),
    .I_ARADDR(MAXI_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(MAXI_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(MAXI_RVALID),
    .I_RREADY(MAXI_RREADY),
    .I_RDATA(MAXI_RDATA),
    .I_RID(MAXI_RID),
    .I_RUSER(MAXI_RUSER),
    .I_RRESP(MAXI_RRESP),
    .I_RLAST(MAXI_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(MAXI_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(MAXI_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(MAXI_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(MAXI_BRESP),
    .I_BID(MAXI_BID),
    .I_BUSER(MAXI_BUSER)
);

toplevel_mul_32s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
toplevel_mul_32s_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(height_read_reg_1802),
    .din1(tmp_reg_1810),
    .ce(1'b1),
    .dout(grp_fu_433_p2)
);

toplevel_mul_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
toplevel_mul_32nsdEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_494_p0),
    .din1(grp_fu_494_p1),
    .ce(1'b1),
    .dout(grp_fu_494_p2)
);

toplevel_mul_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
toplevel_mul_32nsdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_570_p0),
    .din1(grp_fu_570_p1),
    .ce(1'b1),
    .dout(grp_fu_570_p2)
);

toplevel_mul_32s_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 35 ),
    .dout_WIDTH( 64 ))
toplevel_mul_32s_eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(y_i_mid2_reg_2130),
    .din1(grp_fu_1331_p1),
    .ce(1'b1),
    .dout(grp_fu_1331_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state14)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state37) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state36)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state37)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state37);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end else if ((1'b1 == ap_CS_fsm_state36)) begin
            ap_enable_reg_pp2_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_MAXI_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if ((ap_sig_ioackin_MAXI_ARREADY == 1'b1)) begin
                ap_reg_ioackin_MAXI_ARREADY <= 1'b0;
            end else if ((1'b1 == MAXI_ARREADY)) begin
                ap_reg_ioackin_MAXI_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_6_reg_2061 == 1'd1) & (val_assign_fu_1203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        i_i_reg_342 <= i_reg_2065;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        i_i_reg_342 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        indvar_flatten1_reg_309 <= indvar_flatten_next1_reg_1889;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        indvar_flatten1_reg_309 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_fu_1284_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten_reg_353 <= indvar_flatten_next_fu_1289_p2;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        indvar_flatten_reg_353 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_1837 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_reg_297 <= indvar_next_reg_1841;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_reg_297 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_6_reg_2061 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        modeFreq_1_fu_138 <= modeFreq_1_currentFr_fu_1767_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        modeFreq_1_fu_138 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        numberOfPixelsVisted <= tmp_3_i_fu_1241_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        numberOfPixelsVisted <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_2116_pp2_iter5_reg == 1'd0) & (ap_enable_reg_pp2_iter6 == 1'b1))) begin
        reg_401 <= sectionData_q1;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_401 <= sectionData_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_2116_pp2_iter6_reg == 1'd0) & (ap_enable_reg_pp2_iter7 == 1'b1))) begin
        reg_406 <= sectionData_q0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        reg_406 <= sectionData_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_2116_pp2_iter8_reg == 1'd0) & (ap_enable_reg_pp2_iter9 == 1'b1))) begin
        result_1_i_reg_375 <= p_result_1_i_fu_1743_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        result_1_i_reg_375 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (version_1_vld_reg == 1'b0) & (version_1_vld_in == 1'b1))) begin
        version_1_vld_reg <= 1'b1;
    end else if (((version_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (version_1_vld_reg == 1'b1))) begin
        version_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_fu_1284_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_i_reg_364 <= x_i_mid2_fu_1314_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        x_i_reg_364 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        x_reg_320 <= x_cast_mid2_v_reg_1900;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        x_reg_320 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_fu_1284_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        y_i_reg_387 <= y_2_fu_1322_p2;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        y_i_reg_387 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        y_reg_331 <= y_1_fu_1785_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        y_reg_331 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_1837 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_addr_read_reg_1846 <= MAXI_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        addrCmp1_reg_1943 <= addrCmp1_fu_613_p2;
        current_reg_1926 <= current_fu_588_p2;
        mem_index_gep_reg_1937 <= mem_index_gep_fu_607_p2;
        tmp_10_reg_1932 <= tmp_10_fu_593_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        addrCmp3_reg_1964 <= addrCmp3_fu_678_p2;
        addrCmp5_reg_1980 <= addrCmp5_fu_709_p2;
        mem_index_gep1_reg_1958 <= mem_index_gep1_fu_672_p2;
        mem_index_gep2_reg_1974 <= mem_index_gep2_fu_703_p2;
        tmp_30_reg_1953 <= tmp_30_fu_658_p1;
        tmp_48_reg_1969 <= tmp_48_fu_689_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_2116_pp2_iter4_reg == 1'd0))) begin
        addrCmp8_reg_2203 <= addrCmp8_fu_1445_p2;
        mem_index_gep4_reg_2197 <= mem_index_gep4_fu_1439_p2;
        tmp_89_reg_2192 <= tmp_89_fu_1425_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_2116_pp2_iter3_reg == 1'd0))) begin
        addrCmp_reg_2182 <= addrCmp_fu_1380_p2;
        current_1_reg_2166 <= current_1_fu_1355_p2;
        mem_index_gep3_reg_2176 <= mem_index_gep3_fu_1374_p2;
        tmp_71_reg_2171 <= tmp_71_fu_1360_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_529_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_return <= modePixel_1_fu_142;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        bound_reg_1880 <= grp_fu_494_p2;
        tmp_36_i_cast_reg_1875 <= tmp_36_i_cast_fu_525_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_fu_1284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond2_reg_2125 <= exitcond2_fu_1295_p2;
        x_1_reg_2135 <= x_1_fu_1308_p2;
        y_i_mid2_reg_2130 <= y_i_mid2_fu_1300_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond2_reg_2125_pp2_iter1_reg <= exitcond2_reg_2125;
        exitcond_flatten_reg_2116 <= exitcond_flatten_fu_1284_p2;
        exitcond_flatten_reg_2116_pp2_iter1_reg <= exitcond_flatten_reg_2116;
        tmp_32_i1_reg_2111 <= tmp_32_i1_fu_1278_p2;
        tmp_32_i1_reg_2111_pp2_iter1_reg <= tmp_32_i1_reg_2111;
        x_1_reg_2135_pp2_iter1_reg <= x_1_reg_2135;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        exitcond2_reg_2125_pp2_iter2_reg <= exitcond2_reg_2125_pp2_iter1_reg;
        exitcond2_reg_2125_pp2_iter3_reg <= exitcond2_reg_2125_pp2_iter2_reg;
        exitcond_flatten_reg_2116_pp2_iter2_reg <= exitcond_flatten_reg_2116_pp2_iter1_reg;
        exitcond_flatten_reg_2116_pp2_iter3_reg <= exitcond_flatten_reg_2116_pp2_iter2_reg;
        exitcond_flatten_reg_2116_pp2_iter4_reg <= exitcond_flatten_reg_2116_pp2_iter3_reg;
        exitcond_flatten_reg_2116_pp2_iter5_reg <= exitcond_flatten_reg_2116_pp2_iter4_reg;
        exitcond_flatten_reg_2116_pp2_iter6_reg <= exitcond_flatten_reg_2116_pp2_iter5_reg;
        exitcond_flatten_reg_2116_pp2_iter7_reg <= exitcond_flatten_reg_2116_pp2_iter6_reg;
        exitcond_flatten_reg_2116_pp2_iter8_reg <= exitcond_flatten_reg_2116_pp2_iter7_reg;
        tmp_32_i1_reg_2111_pp2_iter2_reg <= tmp_32_i1_reg_2111_pp2_iter1_reg;
        tmp_32_i1_reg_2111_pp2_iter3_reg <= tmp_32_i1_reg_2111_pp2_iter2_reg;
        tmp_71_reg_2171_pp2_iter5_reg <= tmp_71_reg_2171;
        tmp_71_reg_2171_pp2_iter6_reg <= tmp_71_reg_2171_pp2_iter5_reg;
        tmp_89_reg_2192_pp2_iter6_reg <= tmp_89_reg_2192;
        tmp_89_reg_2192_pp2_iter7_reg <= tmp_89_reg_2192_pp2_iter6_reg;
        x_1_reg_2135_pp2_iter2_reg <= x_1_reg_2135_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_1837 <= exitcond_fu_466_p2;
        exitcond_reg_1837_pp0_iter1_reg <= exitcond_reg_1837;
        indvar_reg_297_pp0_iter1_reg <= indvar_reg_297;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (height_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (height_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (height_0_vld_reg == 1'b1)))) begin
        height_0_data_reg <= height;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        height_read_reg_1802 <= height_0_data_reg;
        length_read_reg_1795 <= length_r_0_data_reg;
        tmp_reg_1810 <= tmp_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        i_reg_2065 <= i_fu_1139_p2;
        tmp_i_6_reg_2061 <= tmp_i_6_fu_1134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        indvar_flatten_next1_reg_1889 <= indvar_flatten_next1_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_1841 <= indvar_next_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        length_assign_reg_1864[31 : 0] <= length_assign_fu_488_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (length_r_0_vld_reg == 1'b1)))) begin
        length_r_0_data_reg <= length_r;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_6_reg_2061 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        modePixel_1_fu_142 <= modePixel_1_tmp_s_fu_1760_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        modePixel_reg_2099[23 : 0] <= modePixel_fu_1215_p1[23 : 0];
        tmp_i1_reg_2105 <= tmp_i1_fu_1231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        numberOfPixelsVisted_1_reg_2049 <= numberOfPixelsVisted;
        tmp_47_reg_2033 <= tmp_47_fu_1100_p1;
        tmp_65_reg_2041 <= tmp_65_fu_1118_p1;
        tmp_66_reg_2056 <= tmp_66_fu_1126_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_add_i32_shr_reg_1820 <= {{p_add_fu_437_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ram1_reg_1790 <= {{ram[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_2116_pp2_iter7_reg == 1'd0))) begin
        tmp_100_reg_2223[5 : 1] <= tmp_100_fu_1677_p2[5 : 1];
        tmp_103_reg_2228 <= tmp_103_fu_1687_p2;
        tmp_i_i1_reg_2233 <= tmp_i_i1_fu_1693_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_1_reg_1920 <= tmp_1_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_23_reg_1995[5 : 1] <= tmp_23_fu_862_p2[5 : 1];
        tmp_26_reg_2000 <= tmp_26_fu_872_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_6_fu_1134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31))) begin
        tmp_26_i_reg_2070 <= tmp_26_i_fu_1151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_29_reg_2005 <= tmp_29_fu_892_p1;
        tmp_41_reg_2013[5 : 1] <= tmp_41_fu_975_p2[5 : 1];
        tmp_44_reg_2018 <= tmp_44_fu_985_p2;
        tmp_59_reg_2023[5 : 1] <= tmp_59_fu_1070_p2[5 : 1];
        tmp_62_reg_2028 <= tmp_62_fu_1080_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond2_reg_2125_pp2_iter2_reg == 1'd0) & (exitcond_flatten_reg_2116_pp2_iter2_reg == 1'd0))) begin
        tmp_32_i1_mid1_reg_2156 <= tmp_32_i1_mid1_fu_1341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_2116_pp2_iter2_reg == 1'd0))) begin
        tmp_37_i_reg_2161 <= grp_fu_1331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_4_reg_1815 <= grp_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_2116_pp2_iter6_reg == 1'd0))) begin
        tmp_82_reg_2213[5 : 1] <= tmp_82_fu_1564_p2[5 : 1];
        tmp_85_reg_2218 <= tmp_85_fu_1574_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_6_reg_2061 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        tmp_i_i_reg_2091 <= tmp_i_i_fu_1182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_s_reg_1915 <= grp_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (version_1_vld_reg == 1'b0) & (version_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (version_1_vld_in == 1'b1) & (version_1_vld_reg == 1'b1)))) begin
        version_1_data_reg <= version_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_529_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        x_cast_mid2_v_reg_1900 <= x_cast_mid2_v_fu_559_p3;
        y_mid2_reg_1894 <= y_mid2_fu_545_p3;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_MAXI_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        MAXI_ARVALID = 1'b1;
    end else begin
        MAXI_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_1837 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_RREADY = 1'b1;
    end else begin
        MAXI_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        MAXI_blk_n_AR = m_axi_MAXI_ARREADY;
    end else begin
        MAXI_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_1837 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_blk_n_R = m_axi_MAXI_RVALID;
    end else begin
        MAXI_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_466_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_1284_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state37 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state37 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (version_1_ack_in == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_1837 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_phi_fu_301_p4 = indvar_next_reg_1841;
    end else begin
        ap_phi_mux_indvar_phi_fu_301_p4 = indvar_reg_297;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (version_1_ack_in == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_MAXI_ARREADY == 1'b0)) begin
        ap_sig_ioackin_MAXI_ARREADY = MAXI_ARREADY;
    end else begin
        ap_sig_ioackin_MAXI_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (version_1_ack_in == 1'b1))) begin
        height_0_ack_out = 1'b1;
    end else begin
        height_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (version_1_ack_in == 1'b1))) begin
        length_r_0_ack_out = 1'b1;
    end else begin
        length_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter6 == 1'b1))) begin
        sectionData_address0 = gepindex2154_cast_fu_1480_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        sectionData_address0 = gepindex2178_cast_fu_744_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sectionData_address0 = gepindex2166_cast_fu_648_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sectionData_address0 = indvar3_fu_477_p1;
    end else begin
        sectionData_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter5 == 1'b1))) begin
        sectionData_address1 = gepindex2_cast_fu_1415_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        sectionData_address1 = gepindex2190_cast_fu_778_p1;
    end else begin
        sectionData_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter6 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        sectionData_ce0 = 1'b1;
    end else begin
        sectionData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter5 == 1'b1)))) begin
        sectionData_ce1 = 1'b1;
    end else begin
        sectionData_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_1837_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sectionData_we0 = 1'b1;
    end else begin
        sectionData_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((version_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (version_1_vld_reg == 1'b1)))) begin
        version_1_ack_in = 1'b1;
    end else begin
        version_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        version_1_data_in = modePixel_fu_1215_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        version_1_data_in = 32'd1;
    end else begin
        version_1_data_in = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state35))) begin
        version_1_vld_in = 1'b1;
    end else begin
        version_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        visited_address0 = tmp_1_i_cast_fu_1257_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        visited_address0 = tmp_29_i_fu_1167_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        visited_address0 = tmp_27_i_fu_1157_p1;
    end else begin
        visited_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        visited_address1 = tmp_2_i_cast_fu_1267_p1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        visited_address1 = tmp_i1_cast_fu_1236_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        visited_address1 = tmp_31_i_fu_1177_p1;
    end else begin
        visited_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        visited_ce0 = 1'b1;
    end else begin
        visited_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32))) begin
        visited_ce1 = 1'b1;
    end else begin
        visited_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        visited_d1 = tmp_65_reg_2041;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        visited_d1 = tmp_29_reg_2005;
    end else begin
        visited_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        visited_we0 = 1'b1;
    end else begin
        visited_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35))) begin
        visited_we1 = 1'b1;
    end else begin
        visited_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((ap_sig_ioackin_MAXI_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_466_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_466_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((exitcond_flatten1_fu_529_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((tmp_i_6_reg_2061 == 1'd1) & (val_assign_fu_1203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else if (((tmp_i_6_reg_2061 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_flatten_fu_1284_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter8 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter8 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter9 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_flatten_fu_1284_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (version_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MAXI_ARADDR = tmp_5_fu_452_p1;

assign MAXI_ARLEN = p_add_i32_shr_reg_1820;

assign addrCmp1_fu_613_p2 = ((adjSize_fu_597_p4 < 14'd16380) ? 1'b1 : 1'b0);

assign addrCmp2_fu_622_p2 = ((mem_index_gep_reg_1937 < 14'd1692) ? 1'b1 : 1'b0);

assign addrCmp3_fu_678_p2 = ((adjSize1_fu_662_p4 < 14'd16380) ? 1'b1 : 1'b0);

assign addrCmp4_fu_718_p2 = ((mem_index_gep1_reg_1958 < 14'd1692) ? 1'b1 : 1'b0);

assign addrCmp5_fu_709_p2 = ((adjSize2_fu_693_p4 < 14'd16380) ? 1'b1 : 1'b0);

assign addrCmp6_fu_752_p2 = ((mem_index_gep2_reg_1974 < 14'd1692) ? 1'b1 : 1'b0);

assign addrCmp7_fu_1389_p2 = ((mem_index_gep3_reg_2176 < 14'd1692) ? 1'b1 : 1'b0);

assign addrCmp8_fu_1445_p2 = ((adjSize4_fu_1429_p4 < 14'd16380) ? 1'b1 : 1'b0);

assign addrCmp9_fu_1454_p2 = ((mem_index_gep4_reg_2197 < 14'd1692) ? 1'b1 : 1'b0);

assign addrCmp_fu_1380_p2 = ((adjSize3_fu_1364_p4 < 14'd16380) ? 1'b1 : 1'b0);

assign adjSize145_cast_fu_1386_p1 = mem_index_gep3_reg_2176;

assign adjSize148_cast_fu_1451_p1 = mem_index_gep4_reg_2197;

assign adjSize160_cast_fu_619_p1 = mem_index_gep_reg_1937;

assign adjSize172_cast_fu_715_p1 = mem_index_gep1_reg_1958;

assign adjSize184_cast_fu_749_p1 = mem_index_gep2_reg_1974;

assign adjSize1_fu_662_p4 = {{tmp_2_fu_653_p2[15:2]}};

assign adjSize2_fu_693_p4 = {{tmp_3_fu_684_p2[15:2]}};

assign adjSize3_fu_1364_p4 = {{current_1_fu_1355_p2[15:2]}};

assign adjSize4_fu_1429_p4 = {{tmp_38_i_fu_1420_p2[15:2]}};

assign adjSize_fu_597_p4 = {{current_fu_588_p2[15:2]}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == MAXI_RVALID) & (exitcond_reg_1837 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == MAXI_RVALID) & (exitcond_reg_1837 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage0_iter1 = ((1'b0 == MAXI_RVALID) & (exitcond_reg_1837 == 1'd0));
end

assign ap_block_state16_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign current_1_fu_1355_p2 = ($signed(tmp_33_i_mid2_fu_1351_p1) + $signed(tmp_37_i_reg_2161));

assign current_fu_588_p2 = (tmp_8_fu_583_p2 - tmp_1_reg_1920);

assign end_pos1_fu_903_p2 = (start_pos2_fu_896_p3 | 5'd7);

assign end_pos2_fu_998_p2 = (start_pos3_fu_991_p3 | 5'd7);

assign end_pos3_fu_1492_p2 = (start_pos_fu_1485_p3 | 5'd7);

assign end_pos4_fu_1605_p2 = (start_pos4_fu_1598_p3 | 5'd7);

assign end_pos_fu_790_p2 = (start_pos1_fu_783_p3 | 5'd7);

assign exitcond1_fu_540_p2 = ((y_reg_331 != height_read_reg_1802) ? 1'b1 : 1'b0);

assign exitcond2_fu_1295_p2 = ((y_i_reg_387 != height_read_reg_1802) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_529_p2 = ((indvar_flatten1_reg_309 == bound_reg_1880) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_1284_p2 = ((indvar_flatten_reg_353 == bound_reg_1880) ? 1'b1 : 1'b0);

assign exitcond_fu_466_p2 = ((ap_phi_mux_indvar_phi_fu_301_p4 == p_add_i32_shr_reg_1820) ? 1'b1 : 1'b0);

assign gepindex10_fu_770_p3 = ((addrCmp6_fu_752_p2[0:0] === 1'b1) ? gepindex9_fu_763_p3 : 15'd1687);

assign gepindex11_fu_1400_p3 = ((addrCmp_reg_2182[0:0] === 1'b1) ? gepindex_fu_1394_p2 : 15'd1687);

assign gepindex12_fu_1459_p2 = ($signed(15'd32764) + $signed(adjSize148_cast_fu_1451_p1));

assign gepindex13_fu_1465_p3 = ((addrCmp8_reg_2203[0:0] === 1'b1) ? gepindex12_fu_1459_p2 : 15'd1687);

assign gepindex14_fu_1472_p3 = ((addrCmp9_fu_1454_p2[0:0] === 1'b1) ? gepindex13_fu_1465_p3 : 15'd1687);

assign gepindex1_fu_627_p2 = ($signed(15'd32764) + $signed(adjSize160_cast_fu_619_p1));

assign gepindex2154_cast_fu_1480_p1 = $signed(gepindex14_fu_1472_p3);

assign gepindex2166_cast_fu_648_p1 = $signed(gepindex4_fu_640_p3);

assign gepindex2178_cast_fu_744_p1 = $signed(gepindex7_fu_736_p3);

assign gepindex2190_cast_fu_778_p1 = $signed(gepindex10_fu_770_p3);

assign gepindex2_cast_fu_1415_p1 = $signed(gepindex2_fu_1407_p3);

assign gepindex2_fu_1407_p3 = ((addrCmp7_fu_1389_p2[0:0] === 1'b1) ? gepindex11_fu_1400_p3 : 15'd1687);

assign gepindex3_fu_633_p3 = ((addrCmp1_reg_1943[0:0] === 1'b1) ? gepindex1_fu_627_p2 : 15'd1687);

assign gepindex4_fu_640_p3 = ((addrCmp2_fu_622_p2[0:0] === 1'b1) ? gepindex3_fu_633_p3 : 15'd1687);

assign gepindex5_fu_723_p2 = ($signed(15'd32764) + $signed(adjSize172_cast_fu_715_p1));

assign gepindex6_fu_729_p3 = ((addrCmp3_reg_1964[0:0] === 1'b1) ? gepindex5_fu_723_p2 : 15'd1687);

assign gepindex7_fu_736_p3 = ((addrCmp4_fu_718_p2[0:0] === 1'b1) ? gepindex6_fu_729_p3 : 15'd1687);

assign gepindex8_fu_757_p2 = ($signed(15'd32764) + $signed(adjSize184_cast_fu_749_p1));

assign gepindex9_fu_763_p3 = ((addrCmp5_reg_1980[0:0] === 1'b1) ? gepindex8_fu_757_p2 : 15'd1687);

assign gepindex_fu_1394_p2 = ($signed(15'd32764) + $signed(adjSize145_cast_fu_1386_p1));

assign grp_fu_1331_p1 = tmp_36_i_cast_reg_1875;

assign grp_fu_494_p0 = grp_fu_494_p00;

assign grp_fu_494_p00 = length_read_reg_1795;

assign grp_fu_494_p1 = grp_fu_494_p10;

assign grp_fu_494_p10 = $unsigned(height_read_reg_1802);

assign grp_fu_570_p0 = length_assign_reg_1864;

assign grp_fu_570_p1 = grp_fu_570_p10;

assign grp_fu_570_p10 = y_mid2_reg_1894;

assign i_fu_1139_p2 = ($signed(i_i_reg_342) + $signed(32'd1));

assign indvar3_fu_477_p1 = indvar_reg_297_pp0_iter1_reg;

assign indvar_flatten_next1_fu_534_p2 = (indvar_flatten1_reg_309 + 64'd1);

assign indvar_flatten_next_fu_1289_p2 = (64'd1 + indvar_flatten_reg_353);

assign indvar_next_fu_471_p2 = (ap_phi_mux_indvar_phi_fu_301_p4 + 30'd1);

assign length_assign_fu_488_p1 = length_read_reg_1795;

assign mem_index_gep1_fu_672_p2 = (14'd4 + adjSize1_fu_662_p4);

assign mem_index_gep2_fu_703_p2 = (14'd4 + adjSize2_fu_693_p4);

assign mem_index_gep3_fu_1374_p2 = (14'd4 + adjSize3_fu_1364_p4);

assign mem_index_gep4_fu_1439_p2 = (14'd4 + adjSize4_fu_1429_p4);

assign mem_index_gep_fu_607_p2 = (14'd4 + adjSize_fu_597_p4);

assign modeFreq_1_currentFr_fu_1767_p3 = ((tmp_14_fu_1754_p2[0:0] === 1'b1) ? modeFreq_1_fu_138 : result_1_i_reg_375);

assign modePixel_1_tmp_s_fu_1760_p3 = ((tmp_14_fu_1754_p2[0:0] === 1'b1) ? modePixel_1_fu_142 : modePixel_reg_2099);

assign modePixel_fu_1215_p1 = tmp_12_fu_1208_p4;

assign p_add_fu_437_p2 = (32'd3 + tmp_4_reg_1815);

assign p_result_1_i_fu_1743_p3 = ((val_assign_1_fu_1732_p2[0:0] === 1'b1) ? result_fu_1737_p2 : result_1_i_reg_375);

assign p_shl1_i_cast_fu_515_p1 = p_shl1_i_fu_508_p3;

assign p_shl1_i_fu_508_p3 = {{length_read_reg_1795}, {2'd0}};

assign p_shl_i1_fu_1223_p3 = {{tmp_68_fu_1220_p1}, {2'd0}};

assign result_fu_1737_p2 = (64'd1 + result_1_i_reg_375);

assign start_pos1_fu_783_p3 = {{tmp_10_reg_1932}, {3'd0}};

assign start_pos2_fu_896_p3 = {{tmp_30_reg_1953}, {3'd0}};

assign start_pos3_fu_991_p3 = {{tmp_48_reg_1969}, {3'd0}};

assign start_pos4_fu_1598_p3 = {{tmp_89_reg_2192_pp2_iter7_reg}, {3'd0}};

assign start_pos_fu_1485_p3 = {{tmp_71_reg_2171_pp2_iter6_reg}, {3'd0}};

assign tmp1_fu_1197_p2 = (tmp_i_i_7_fu_1187_p2 & tmp_39_i_i_fu_1192_p2);

assign tmp2_fu_1726_p2 = (tmp_i_i1_8_fu_1716_p2 & tmp_39_i_i1_fu_1721_p2);

assign tmp_100_fu_1677_p2 = (6'd31 - tmp_97_fu_1653_p3);

assign tmp_101_fu_1683_p1 = tmp_99_fu_1669_p3;

assign tmp_102_fu_1698_p1 = tmp_100_reg_2223;

assign tmp_103_fu_1687_p2 = tmp_98_fu_1661_p3 >> tmp_101_fu_1683_p1;

assign tmp_104_fu_1701_p2 = 32'd4294967295 >> tmp_102_fu_1698_p1;

assign tmp_105_fu_1707_p2 = (tmp_104_fu_1701_p2 & tmp_103_reg_2228);

assign tmp_106_fu_1712_p1 = tmp_105_fu_1707_p2[7:0];

assign tmp_10_fu_593_p1 = current_fu_588_p2[1:0];

assign tmp_11_fu_796_p2 = ((start_pos1_fu_783_p3 > end_pos_fu_790_p2) ? 1'b1 : 1'b0);

assign tmp_12_fu_1208_p4 = {{{tmp_65_reg_2041}, {tmp_47_reg_2033}}, {tmp_29_reg_2005}};

assign tmp_13_fu_802_p1 = start_pos1_fu_783_p3;

assign tmp_14_fu_1754_p2 = ((result_1_i_reg_375 < modeFreq_1_fu_138) ? 1'b1 : 1'b0);

assign tmp_15_fu_806_p1 = end_pos_fu_790_p2;

integer ap_tvar_int_0;

always @ (reg_401) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_16_fu_810_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_16_fu_810_p4[ap_tvar_int_0] = reg_401[31 - ap_tvar_int_0];
        end
    end
end

assign tmp_17_fu_820_p2 = (tmp_13_fu_802_p1 - tmp_15_fu_806_p1);

assign tmp_18_fu_826_p2 = (tmp_13_fu_802_p1 ^ 6'd31);

assign tmp_19_fu_832_p2 = (tmp_15_fu_806_p1 - tmp_13_fu_802_p1);

assign tmp_1_fu_578_p2 = (tmp_s_reg_1915 + x_cast_mid2_fu_575_p1);

assign tmp_1_i_cast_fu_1257_p1 = tmp_1_i_fu_1252_p2;

assign tmp_1_i_fu_1252_p2 = (14'd1 + tmp_i1_reg_2105);

assign tmp_20_fu_838_p3 = ((tmp_11_fu_796_p2[0:0] === 1'b1) ? tmp_17_fu_820_p2 : tmp_19_fu_832_p2);

assign tmp_21_fu_846_p3 = ((tmp_11_fu_796_p2[0:0] === 1'b1) ? tmp_16_fu_810_p4 : reg_401);

assign tmp_22_fu_854_p3 = ((tmp_11_fu_796_p2[0:0] === 1'b1) ? tmp_18_fu_826_p2 : tmp_13_fu_802_p1);

assign tmp_23_fu_862_p2 = (6'd31 - tmp_20_fu_838_p3);

assign tmp_24_fu_868_p1 = tmp_22_fu_854_p3;

assign tmp_25_fu_878_p1 = tmp_23_reg_1995;

assign tmp_26_fu_872_p2 = tmp_21_fu_846_p3 >> tmp_24_fu_868_p1;

assign tmp_26_i_fu_1151_p2 = ($signed(tmp_67_fu_1145_p2) - $signed(i_i_reg_342));

assign tmp_27_fu_881_p2 = 32'd4294967295 >> tmp_25_fu_878_p1;

assign tmp_27_i_fu_1157_p1 = tmp_26_i_fu_1151_p2;

assign tmp_28_fu_887_p2 = (tmp_27_fu_881_p2 & tmp_26_reg_2000);

assign tmp_28_i_fu_1162_p2 = ($signed(32'd1) + $signed(tmp_26_i_reg_2070));

assign tmp_29_fu_892_p1 = tmp_28_fu_887_p2[7:0];

assign tmp_29_i_fu_1167_p1 = $signed(tmp_28_i_fu_1162_p2);

assign tmp_2_fu_653_p2 = (64'd1 + current_reg_1926);

assign tmp_2_i_cast_fu_1267_p1 = tmp_2_i_fu_1262_p2;

assign tmp_2_i_fu_1262_p2 = (14'd2 + tmp_i1_reg_2105);

assign tmp_30_fu_658_p1 = tmp_2_fu_653_p2[1:0];

assign tmp_30_i_fu_1172_p2 = ($signed(32'd2) + $signed(tmp_26_i_reg_2070));

assign tmp_31_fu_909_p2 = ((start_pos2_fu_896_p3 > end_pos1_fu_903_p2) ? 1'b1 : 1'b0);

assign tmp_31_i_fu_1177_p1 = $signed(tmp_30_i_fu_1172_p2);

assign tmp_32_fu_915_p1 = start_pos2_fu_896_p3;

assign tmp_32_i1_fu_1278_p2 = (tmp_69_fu_1272_p2 - x_i_reg_364);

assign tmp_32_i1_mid1_fu_1341_p2 = (tmp_70_fu_1336_p2 - x_1_reg_2135_pp2_iter2_reg);

assign tmp_33_fu_919_p1 = end_pos1_fu_903_p2;

assign tmp_33_i_mid2_fu_1351_p1 = $signed(tmp_33_i_mid2_v_fu_1346_p3);

assign tmp_33_i_mid2_v_fu_1346_p3 = ((exitcond2_reg_2125_pp2_iter3_reg[0:0] === 1'b1) ? tmp_32_i1_reg_2111_pp2_iter3_reg : tmp_32_i1_mid1_reg_2156);

integer ap_tvar_int_1;

always @ (reg_401) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_34_fu_923_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_34_fu_923_p4[ap_tvar_int_1] = reg_401[31 - ap_tvar_int_1];
        end
    end
end

assign tmp_35_fu_933_p2 = (tmp_32_fu_915_p1 - tmp_33_fu_919_p1);

assign tmp_36_fu_939_p2 = (tmp_32_fu_915_p1 ^ 6'd31);

assign tmp_36_i_cast_fu_525_p1 = $signed(tmp_36_i_fu_519_p2);

assign tmp_36_i_fu_519_p2 = (p_shl1_i_cast_fu_515_p1 - tmp_5_cast4_fu_505_p1);

assign tmp_37_fu_945_p2 = (tmp_33_fu_919_p1 - tmp_32_fu_915_p1);

assign tmp_38_fu_951_p3 = ((tmp_31_fu_909_p2[0:0] === 1'b1) ? tmp_35_fu_933_p2 : tmp_37_fu_945_p2);

assign tmp_38_i_fu_1420_p2 = (64'd1 + current_1_reg_2166);

assign tmp_39_fu_959_p3 = ((tmp_31_fu_909_p2[0:0] === 1'b1) ? tmp_34_fu_923_p4 : reg_401);

assign tmp_39_i_i1_fu_1721_p2 = ((tmp_106_fu_1712_p1 == tmp_65_reg_2041) ? 1'b1 : 1'b0);

assign tmp_39_i_i_fu_1192_p2 = ((tmp_65_reg_2041 == visited_q1) ? 1'b1 : 1'b0);

assign tmp_3_fu_684_p2 = (64'd2 + current_reg_1926);

assign tmp_3_i_fu_1241_p2 = (64'd1 + numberOfPixelsVisted_1_reg_2049);

assign tmp_40_fu_967_p3 = ((tmp_31_fu_909_p2[0:0] === 1'b1) ? tmp_36_fu_939_p2 : tmp_32_fu_915_p1);

assign tmp_41_fu_975_p2 = (6'd31 - tmp_38_fu_951_p3);

assign tmp_42_fu_981_p1 = tmp_40_fu_967_p3;

assign tmp_43_fu_1086_p1 = tmp_41_reg_2013;

assign tmp_44_fu_985_p2 = tmp_39_fu_959_p3 >> tmp_42_fu_981_p1;

assign tmp_45_fu_1089_p2 = 32'd4294967295 >> tmp_43_fu_1086_p1;

assign tmp_46_fu_1095_p2 = (tmp_45_fu_1089_p2 & tmp_44_reg_2018);

assign tmp_47_fu_1100_p1 = tmp_46_fu_1095_p2[7:0];

assign tmp_48_fu_689_p1 = tmp_3_fu_684_p2[1:0];

assign tmp_49_fu_1004_p2 = ((start_pos3_fu_991_p3 > end_pos2_fu_998_p2) ? 1'b1 : 1'b0);

assign tmp_50_fu_1010_p1 = start_pos3_fu_991_p3;

assign tmp_51_fu_1014_p1 = end_pos2_fu_998_p2;

integer ap_tvar_int_2;

always @ (reg_406) begin
    for (ap_tvar_int_2 = 32 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 31 - 0) begin
            tmp_52_fu_1018_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_52_fu_1018_p4[ap_tvar_int_2] = reg_406[31 - ap_tvar_int_2];
        end
    end
end

assign tmp_53_fu_1028_p2 = (tmp_50_fu_1010_p1 - tmp_51_fu_1014_p1);

assign tmp_54_fu_1034_p2 = (tmp_50_fu_1010_p1 ^ 6'd31);

assign tmp_55_fu_1040_p2 = (tmp_51_fu_1014_p1 - tmp_50_fu_1010_p1);

assign tmp_56_fu_1046_p3 = ((tmp_49_fu_1004_p2[0:0] === 1'b1) ? tmp_53_fu_1028_p2 : tmp_55_fu_1040_p2);

assign tmp_57_fu_1054_p3 = ((tmp_49_fu_1004_p2[0:0] === 1'b1) ? tmp_52_fu_1018_p4 : reg_406);

assign tmp_58_fu_1062_p3 = ((tmp_49_fu_1004_p2[0:0] === 1'b1) ? tmp_54_fu_1034_p2 : tmp_50_fu_1010_p1);

assign tmp_59_fu_1070_p2 = (6'd31 - tmp_56_fu_1046_p3);

assign tmp_5_cast4_fu_505_p1 = length_read_reg_1795;

assign tmp_5_fu_452_p1 = ram1_reg_1790;

assign tmp_60_fu_1076_p1 = tmp_58_fu_1062_p3;

assign tmp_61_fu_1104_p1 = tmp_59_reg_2023;

assign tmp_62_fu_1080_p2 = tmp_57_fu_1054_p3 >> tmp_60_fu_1076_p1;

assign tmp_63_fu_1107_p2 = 32'd4294967295 >> tmp_61_fu_1104_p1;

assign tmp_64_fu_1113_p2 = (tmp_63_fu_1107_p2 & tmp_62_reg_2028);

assign tmp_65_fu_1118_p1 = tmp_64_fu_1113_p2[7:0];

assign tmp_66_fu_1126_p1 = numberOfPixelsVisted[13:0];

assign tmp_67_fu_1145_p2 = i_i_reg_342 << 32'd2;

assign tmp_68_fu_1220_p1 = numberOfPixelsVisted_1_reg_2049[11:0];

assign tmp_69_fu_1272_p2 = x_i_reg_364 << 32'd2;

assign tmp_6_fu_421_p2 = length_r_0_data_reg << 32'd2;

assign tmp_70_fu_1336_p2 = x_1_reg_2135_pp2_iter2_reg << 32'd2;

assign tmp_71_fu_1360_p1 = current_1_fu_1355_p2[1:0];

assign tmp_72_fu_1498_p2 = ((start_pos_fu_1485_p3 > end_pos3_fu_1492_p2) ? 1'b1 : 1'b0);

assign tmp_73_fu_1504_p1 = start_pos_fu_1485_p3;

assign tmp_74_fu_1508_p1 = end_pos3_fu_1492_p2;

integer ap_tvar_int_3;

always @ (reg_401) begin
    for (ap_tvar_int_3 = 32 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 31 - 0) begin
            tmp_75_fu_1512_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_75_fu_1512_p4[ap_tvar_int_3] = reg_401[31 - ap_tvar_int_3];
        end
    end
end

assign tmp_76_fu_1522_p2 = (tmp_73_fu_1504_p1 - tmp_74_fu_1508_p1);

assign tmp_77_fu_1528_p2 = (tmp_73_fu_1504_p1 ^ 6'd31);

assign tmp_78_fu_1534_p2 = (tmp_74_fu_1508_p1 - tmp_73_fu_1504_p1);

assign tmp_79_fu_1540_p3 = ((tmp_72_fu_1498_p2[0:0] === 1'b1) ? tmp_76_fu_1522_p2 : tmp_78_fu_1534_p2);

assign tmp_80_fu_1548_p3 = ((tmp_72_fu_1498_p2[0:0] === 1'b1) ? tmp_75_fu_1512_p4 : reg_401);

assign tmp_81_fu_1556_p3 = ((tmp_72_fu_1498_p2[0:0] === 1'b1) ? tmp_77_fu_1528_p2 : tmp_73_fu_1504_p1);

assign tmp_82_fu_1564_p2 = (6'd31 - tmp_79_fu_1540_p3);

assign tmp_83_fu_1570_p1 = tmp_81_fu_1556_p3;

assign tmp_84_fu_1580_p1 = tmp_82_reg_2213;

assign tmp_85_fu_1574_p2 = tmp_80_fu_1548_p3 >> tmp_83_fu_1570_p1;

assign tmp_86_fu_1583_p2 = 32'd4294967295 >> tmp_84_fu_1580_p1;

assign tmp_87_fu_1589_p2 = (tmp_86_fu_1583_p2 & tmp_85_reg_2218);

assign tmp_88_fu_1594_p1 = tmp_87_fu_1589_p2[7:0];

assign tmp_89_fu_1425_p1 = tmp_38_i_fu_1420_p2[1:0];

assign tmp_8_fu_583_p2 = tmp_1_reg_1920 << 64'd2;

assign tmp_90_fu_1611_p2 = ((start_pos4_fu_1598_p3 > end_pos4_fu_1605_p2) ? 1'b1 : 1'b0);

assign tmp_91_fu_1617_p1 = start_pos4_fu_1598_p3;

assign tmp_92_fu_1621_p1 = end_pos4_fu_1605_p2;

integer ap_tvar_int_4;

always @ (reg_406) begin
    for (ap_tvar_int_4 = 32 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 31 - 0) begin
            tmp_93_fu_1625_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_93_fu_1625_p4[ap_tvar_int_4] = reg_406[31 - ap_tvar_int_4];
        end
    end
end

assign tmp_94_fu_1635_p2 = (tmp_91_fu_1617_p1 - tmp_92_fu_1621_p1);

assign tmp_95_fu_1641_p2 = (tmp_91_fu_1617_p1 ^ 6'd31);

assign tmp_96_fu_1647_p2 = (tmp_92_fu_1621_p1 - tmp_91_fu_1617_p1);

assign tmp_97_fu_1653_p3 = ((tmp_90_fu_1611_p2[0:0] === 1'b1) ? tmp_94_fu_1635_p2 : tmp_96_fu_1647_p2);

assign tmp_98_fu_1661_p3 = ((tmp_90_fu_1611_p2[0:0] === 1'b1) ? tmp_93_fu_1625_p4 : reg_406);

assign tmp_99_fu_1669_p3 = ((tmp_90_fu_1611_p2[0:0] === 1'b1) ? tmp_95_fu_1641_p2 : tmp_91_fu_1617_p1);

assign tmp_fu_427_p2 = (tmp_6_fu_421_p2 - length_r_0_data_reg);

assign tmp_i1_cast_fu_1236_p1 = tmp_i1_fu_1231_p2;

assign tmp_i1_fu_1231_p2 = (p_shl_i1_fu_1223_p3 - tmp_66_reg_2056);

assign tmp_i_6_fu_1134_p2 = ((tmp_i_fu_1130_p1 < numberOfPixelsVisted_1_reg_2049) ? 1'b1 : 1'b0);

assign tmp_i_fu_1130_p1 = i_i_reg_342;

assign tmp_i_i1_8_fu_1716_p2 = ((tmp_106_fu_1712_p1 == tmp_47_reg_2033) ? 1'b1 : 1'b0);

assign tmp_i_i1_fu_1693_p2 = ((tmp_88_fu_1594_p1 == tmp_29_reg_2005) ? 1'b1 : 1'b0);

assign tmp_i_i_7_fu_1187_p2 = ((tmp_47_reg_2033 == visited_q0) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_1182_p2 = ((tmp_29_reg_2005 == visited_q0) ? 1'b1 : 1'b0);

assign val_assign_1_fu_1732_p2 = (tmp_i_i1_reg_2233 & tmp2_fu_1726_p2);

assign val_assign_fu_1203_p2 = (tmp_i_i_reg_2091 & tmp1_fu_1197_p2);

assign x_1_fu_1308_p2 = (32'd1 + x_i_reg_364);

assign x_cast_mid2_fu_575_p1 = x_cast_mid2_v_reg_1900;

assign x_cast_mid2_v_fu_559_p3 = ((exitcond1_fu_540_p2[0:0] === 1'b1) ? x_reg_320 : x_s_fu_553_p2);

assign x_i_mid2_fu_1314_p3 = ((exitcond2_fu_1295_p2[0:0] === 1'b1) ? x_i_reg_364 : x_1_fu_1308_p2);

assign x_s_fu_553_p2 = (32'd1 + x_reg_320);

assign y_1_fu_1785_p2 = (y_mid2_reg_1894 + 32'd1);

assign y_2_fu_1322_p2 = ($signed(32'd1) + $signed(y_i_mid2_fu_1300_p3));

assign y_i_mid2_fu_1300_p3 = ((exitcond2_fu_1295_p2[0:0] === 1'b1) ? y_i_reg_387 : 32'd0);

assign y_mid2_fu_545_p3 = ((exitcond1_fu_540_p2[0:0] === 1'b1) ? y_reg_331 : 32'd0);

always @ (posedge ap_clk) begin
    length_assign_reg_1864[63:32] <= 32'b00000000000000000000000000000000;
    tmp_23_reg_1995[0] <= 1'b0;
    tmp_41_reg_2013[0] <= 1'b0;
    tmp_59_reg_2023[0] <= 1'b0;
    modePixel_reg_2099[31:24] <= 8'b00000000;
    tmp_82_reg_2213[0] <= 1'b0;
    tmp_100_reg_2223[0] <= 1'b0;
end

endmodule //toplevel
