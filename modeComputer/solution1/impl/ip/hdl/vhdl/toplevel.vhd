-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toplevel is
generic (
    C_M_AXI_MAXI_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_USER_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_MAXI_AWVALID : OUT STD_LOGIC;
    m_axi_MAXI_AWREADY : IN STD_LOGIC;
    m_axi_MAXI_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_AWUSER_WIDTH-1 downto 0);
    m_axi_MAXI_WVALID : OUT STD_LOGIC;
    m_axi_MAXI_WREADY : IN STD_LOGIC;
    m_axi_MAXI_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH/8-1 downto 0);
    m_axi_MAXI_WLAST : OUT STD_LOGIC;
    m_axi_MAXI_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_WUSER_WIDTH-1 downto 0);
    m_axi_MAXI_ARVALID : OUT STD_LOGIC;
    m_axi_MAXI_ARREADY : IN STD_LOGIC;
    m_axi_MAXI_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ARUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RVALID : IN STD_LOGIC;
    m_axi_MAXI_RREADY : OUT STD_LOGIC;
    m_axi_MAXI_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_RLAST : IN STD_LOGIC;
    m_axi_MAXI_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_RUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BVALID : IN STD_LOGIC;
    m_axi_MAXI_BREADY : OUT STD_LOGIC;
    m_axi_MAXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of toplevel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "toplevel,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=7.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.562500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=16,HLS_SYN_FF=4096,HLS_SYN_LUT=5915,HLS_VERSION=2018_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv14_3FFC : STD_LOGIC_VECTOR (13 downto 0) := "11111111111100";
    constant ap_const_lv14_69C : STD_LOGIC_VECTOR (13 downto 0) := "00011010011100";
    constant ap_const_lv15_7FFC : STD_LOGIC_VECTOR (14 downto 0) := "111111111111100";
    constant ap_const_lv15_697 : STD_LOGIC_VECTOR (14 downto 0) := "000011010010111";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal ram : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_r_0_vld_reg : STD_LOGIC := '0';
    signal length_r_0_ack_out : STD_LOGIC;
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal height_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal height_0_vld_reg : STD_LOGIC := '0';
    signal height_0_ack_out : STD_LOGIC;
    signal version_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal version_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal version_1_vld_reg : STD_LOGIC := '0';
    signal version_1_vld_in : STD_LOGIC;
    signal version_1_ack_in : STD_LOGIC;
    signal sectionData_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sectionData_ce0 : STD_LOGIC;
    signal sectionData_we0 : STD_LOGIC;
    signal sectionData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sectionData_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sectionData_ce1 : STD_LOGIC;
    signal sectionData_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOfPixelsVisted : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal visited_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal visited_ce0 : STD_LOGIC;
    signal visited_we0 : STD_LOGIC;
    signal visited_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal visited_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal visited_ce1 : STD_LOGIC;
    signal visited_we1 : STD_LOGIC;
    signal visited_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal visited_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal MAXI_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_1837 : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_AWREADY : STD_LOGIC;
    signal MAXI_WREADY : STD_LOGIC;
    signal MAXI_ARVALID : STD_LOGIC;
    signal MAXI_ARREADY : STD_LOGIC;
    signal MAXI_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_RVALID : STD_LOGIC;
    signal MAXI_RREADY : STD_LOGIC;
    signal MAXI_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_RLAST : STD_LOGIC;
    signal MAXI_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BVALID : STD_LOGIC;
    signal MAXI_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_297 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_reg_297_pp0_iter1_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state14_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_reg_353 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_i_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_i_reg_375 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_i_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_block_state37_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state41_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state42_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state43_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state44_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state45_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state46_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_2116 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2116_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_2116_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ram1_reg_1790 : STD_LOGIC_VECTOR (29 downto 0);
    signal length_read_reg_1795 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal height_read_reg_1802 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1810 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1815 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_add_i32_shr_reg_1820 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_sig_ioackin_MAXI_ARREADY : STD_LOGIC;
    signal exitcond_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1837_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_471_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next_reg_1841 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal MAXI_addr_read_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_assign_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal length_assign_reg_1864 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_36_i_cast_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_i_cast_reg_1875 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_494_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_1880 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next1_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next1_reg_1889 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal y_mid2_fu_545_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_mid2_reg_1894 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten1_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_cast_mid2_v_fu_559_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_cast_mid2_v_reg_1900 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_570_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1915 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_1_fu_578_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1920 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal current_fu_588_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal current_reg_1926 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_10_fu_593_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_1932 : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_index_gep_fu_607_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep_reg_1937 : STD_LOGIC_VECTOR (13 downto 0);
    signal addrCmp1_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addrCmp1_reg_1943 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_30_fu_658_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_reg_1953 : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_index_gep1_fu_672_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep1_reg_1958 : STD_LOGIC_VECTOR (13 downto 0);
    signal addrCmp3_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addrCmp3_reg_1964 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_689_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_48_reg_1969 : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_index_gep2_fu_703_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep2_reg_1974 : STD_LOGIC_VECTOR (13 downto 0);
    signal addrCmp5_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addrCmp5_reg_1980 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_862_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_reg_1995 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_2000 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_892_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_2005 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_41_fu_975_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_41_reg_2013 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_fu_985_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_reg_2018 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_1070_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_59_reg_2023 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_62_fu_1080_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_reg_2028 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_1100_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_reg_2033 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_65_fu_1118_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_reg_2041 : STD_LOGIC_VECTOR (7 downto 0);
    signal numberOfPixelsVisted_1_reg_2049 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_1126_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_66_reg_2056 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_i_6_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_6_reg_2061 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal i_fu_1139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_2065 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_i_fu_1151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_i_reg_2070 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_i_i_fu_1182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_2091 : STD_LOGIC_VECTOR (0 downto 0);
    signal modePixel_fu_1215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal modePixel_reg_2099 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_i1_fu_1231_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_i1_reg_2105 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_32_i1_fu_1278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i1_reg_2111 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal tmp_32_i1_reg_2111_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i1_reg_2111_pp2_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i1_reg_2111_pp2_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2116_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2116_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2116_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2116_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2116_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2116_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_1289_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal exitcond2_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_2125 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_2125_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_2125_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_2125_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal y_i_mid2_fu_1300_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_i_mid2_reg_2130 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_1308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_2135 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_2135_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_2135_pp2_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_i_mid2_fu_1314_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_fu_1322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i1_mid1_fu_1341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i1_mid1_reg_2156 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1331_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_i_reg_2161 : STD_LOGIC_VECTOR (63 downto 0);
    signal current_1_fu_1355_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal current_1_reg_2166 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_fu_1360_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_71_reg_2171 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_71_reg_2171_pp2_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_71_reg_2171_pp2_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_index_gep3_fu_1374_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep3_reg_2176 : STD_LOGIC_VECTOR (13 downto 0);
    signal addrCmp_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addrCmp_reg_2182 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_1425_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_89_reg_2192 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_89_reg_2192_pp2_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_89_reg_2192_pp2_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_index_gep4_fu_1439_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep4_reg_2197 : STD_LOGIC_VECTOR (13 downto 0);
    signal addrCmp8_fu_1445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addrCmp8_reg_2203 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_1564_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_82_reg_2213 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_85_fu_1574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_reg_2218 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_fu_1677_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_100_reg_2223 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_103_fu_1687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_reg_2228 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i1_fu_1693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i1_reg_2233 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_result_1_i_fu_1743_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal y_1_fu_1785_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state37 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_phi_fu_301_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_flatten1_reg_309 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal val_assign_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar3_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2166_cast_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2178_cast_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2190_cast_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_i_fu_1157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_i_fu_1167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_i_fu_1177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_cast_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_cast_fu_1257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_cast_fu_1267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_cast_fu_1415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal gepindex2154_cast_fu_1480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_MAXI_ARREADY : STD_LOGIC := '0';
    signal tmp_3_i_fu_1241_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal modeFreq_1_fu_138 : STD_LOGIC_VECTOR (63 downto 0);
    signal modeFreq_1_currentFr_fu_1767_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal modePixel_1_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal modePixel_1_tmp_s_fu_1760_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_6_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_add_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_494_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_i_fu_508_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_shl1_i_cast_fu_515_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_5_cast4_fu_505_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_36_i_fu_519_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal exitcond1_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_s_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_570_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_cast_mid2_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_583_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal adjSize_fu_597_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize160_cast_fu_619_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex1_fu_627_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp2_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex3_fu_633_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex4_fu_640_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_653_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal adjSize1_fu_662_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_684_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal adjSize2_fu_693_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize172_cast_fu_715_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex5_fu_723_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp4_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex6_fu_729_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex7_fu_736_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal adjSize184_cast_fu_749_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex8_fu_757_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp6_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex9_fu_763_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex10_fu_770_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal start_pos1_fu_783_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos_fu_790_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_802_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_806_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_820_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_832_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_810_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_826_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_838_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_854_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_846_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_868_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_878_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_881_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_887_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_pos2_fu_896_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos1_fu_903_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_fu_915_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_33_fu_919_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_933_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_fu_945_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_fu_923_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_939_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_fu_951_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_40_fu_967_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_39_fu_959_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_981_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_pos3_fu_991_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos2_fu_998_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_50_fu_1010_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_fu_1014_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_1028_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_fu_1040_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_52_fu_1018_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_1034_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_56_fu_1046_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_58_fu_1062_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_57_fu_1054_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_1076_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_1086_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_1089_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_1095_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_1104_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_1107_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_fu_1113_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_1130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_1145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_i_fu_1162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_fu_1172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_7_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_i_i_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_1208_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_68_fu_1220_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_i1_fu_1223_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_i_fu_1252_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_i_fu_1262_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_69_fu_1272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1331_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_70_fu_1336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_i_mid2_v_fu_1346_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_i_mid2_fu_1351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal adjSize3_fu_1364_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize145_cast_fu_1386_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex_fu_1394_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp7_fu_1389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex11_fu_1400_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex2_fu_1407_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_38_i_fu_1420_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal adjSize4_fu_1429_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize148_cast_fu_1451_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex12_fu_1459_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp9_fu_1454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex13_fu_1465_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex14_fu_1472_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal start_pos_fu_1485_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos3_fu_1492_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_73_fu_1504_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_74_fu_1508_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_72_fu_1498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_1522_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_78_fu_1534_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_75_fu_1512_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_77_fu_1528_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_79_fu_1540_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_81_fu_1556_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_80_fu_1548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_fu_1570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_1580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_1583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_1589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_pos4_fu_1598_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos4_fu_1605_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_91_fu_1617_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_92_fu_1621_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_90_fu_1611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_1635_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_96_fu_1647_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_93_fu_1625_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_fu_1641_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_97_fu_1653_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_99_fu_1669_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_98_fu_1661_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_fu_1683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_fu_1594_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_102_fu_1698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_fu_1701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_1707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_fu_1712_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i1_8_fu_1716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_i_i1_fu_1721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_1726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_fu_1732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_fu_1737_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_1754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_494_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_494_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_570_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component toplevel_mul_32s_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_mul_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component toplevel_mul_32s_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (34 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component toplevel_sectionDbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_visited IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component toplevel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        ram : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        version : IN STD_LOGIC_VECTOR (31 downto 0);
        version_ap_vld : IN STD_LOGIC );
    end component;


    component toplevel_MAXI_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sectionData_U : component toplevel_sectionDbkb
    generic map (
        DataWidth => 32,
        AddressRange => 1688,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sectionData_address0,
        ce0 => sectionData_ce0,
        we0 => sectionData_we0,
        d0 => MAXI_addr_read_reg_1846,
        q0 => sectionData_q0,
        address1 => sectionData_address1,
        ce1 => sectionData_ce1,
        q1 => sectionData_q1);

    visited_U : component toplevel_visited
    generic map (
        DataWidth => 8,
        AddressRange => 6750,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => visited_address0,
        ce0 => visited_ce0,
        we0 => visited_we0,
        d0 => tmp_47_reg_2033,
        q0 => visited_q0,
        address1 => visited_address1,
        ce1 => visited_ce1,
        we1 => visited_we1,
        d1 => visited_d1,
        q1 => visited_q1);

    toplevel_AXILiteS_s_axi_U : component toplevel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        ram => ram,
        length_r => length_r,
        height => height,
        version => version_1_data_reg,
        version_ap_vld => version_1_vld_reg);

    toplevel_MAXI_m_axi_U : component toplevel_MAXI_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MAXI_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MAXI_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MAXI_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MAXI_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MAXI_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MAXI_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MAXI_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MAXI_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MAXI_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MAXI_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MAXI_CACHE_VALUE)
    port map (
        AWVALID => m_axi_MAXI_AWVALID,
        AWREADY => m_axi_MAXI_AWREADY,
        AWADDR => m_axi_MAXI_AWADDR,
        AWID => m_axi_MAXI_AWID,
        AWLEN => m_axi_MAXI_AWLEN,
        AWSIZE => m_axi_MAXI_AWSIZE,
        AWBURST => m_axi_MAXI_AWBURST,
        AWLOCK => m_axi_MAXI_AWLOCK,
        AWCACHE => m_axi_MAXI_AWCACHE,
        AWPROT => m_axi_MAXI_AWPROT,
        AWQOS => m_axi_MAXI_AWQOS,
        AWREGION => m_axi_MAXI_AWREGION,
        AWUSER => m_axi_MAXI_AWUSER,
        WVALID => m_axi_MAXI_WVALID,
        WREADY => m_axi_MAXI_WREADY,
        WDATA => m_axi_MAXI_WDATA,
        WSTRB => m_axi_MAXI_WSTRB,
        WLAST => m_axi_MAXI_WLAST,
        WID => m_axi_MAXI_WID,
        WUSER => m_axi_MAXI_WUSER,
        ARVALID => m_axi_MAXI_ARVALID,
        ARREADY => m_axi_MAXI_ARREADY,
        ARADDR => m_axi_MAXI_ARADDR,
        ARID => m_axi_MAXI_ARID,
        ARLEN => m_axi_MAXI_ARLEN,
        ARSIZE => m_axi_MAXI_ARSIZE,
        ARBURST => m_axi_MAXI_ARBURST,
        ARLOCK => m_axi_MAXI_ARLOCK,
        ARCACHE => m_axi_MAXI_ARCACHE,
        ARPROT => m_axi_MAXI_ARPROT,
        ARQOS => m_axi_MAXI_ARQOS,
        ARREGION => m_axi_MAXI_ARREGION,
        ARUSER => m_axi_MAXI_ARUSER,
        RVALID => m_axi_MAXI_RVALID,
        RREADY => m_axi_MAXI_RREADY,
        RDATA => m_axi_MAXI_RDATA,
        RLAST => m_axi_MAXI_RLAST,
        RID => m_axi_MAXI_RID,
        RUSER => m_axi_MAXI_RUSER,
        RRESP => m_axi_MAXI_RRESP,
        BVALID => m_axi_MAXI_BVALID,
        BREADY => m_axi_MAXI_BREADY,
        BRESP => m_axi_MAXI_BRESP,
        BID => m_axi_MAXI_BID,
        BUSER => m_axi_MAXI_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => MAXI_ARVALID,
        I_ARREADY => MAXI_ARREADY,
        I_ARADDR => MAXI_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => MAXI_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => MAXI_RVALID,
        I_RREADY => MAXI_RREADY,
        I_RDATA => MAXI_RDATA,
        I_RID => MAXI_RID,
        I_RUSER => MAXI_RUSER,
        I_RRESP => MAXI_RRESP,
        I_RLAST => MAXI_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => MAXI_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => MAXI_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => MAXI_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => MAXI_BRESP,
        I_BID => MAXI_BID,
        I_BUSER => MAXI_BUSER);

    toplevel_mul_32s_cud_U1 : component toplevel_mul_32s_cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => height_read_reg_1802,
        din1 => tmp_reg_1810,
        ce => ap_const_logic_1,
        dout => grp_fu_433_p2);

    toplevel_mul_32nsdEe_U2 : component toplevel_mul_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_494_p0,
        din1 => grp_fu_494_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_494_p2);

    toplevel_mul_32nsdEe_U3 : component toplevel_mul_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_570_p0,
        din1 => grp_fu_570_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_570_p2);

    toplevel_mul_32s_eOg_U4 : component toplevel_mul_32s_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 35,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => y_i_mid2_reg_2130,
        din1 => grp_fu_1331_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1331_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state37) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state37)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state37);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_MAXI_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    if ((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = MAXI_ARREADY)) then 
                        ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    height_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_i_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_6_reg_2061 = ap_const_lv1_1) and (val_assign_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                i_i_reg_342 <= i_reg_2065;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_i_reg_342 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                indvar_flatten1_reg_309 <= indvar_flatten_next1_reg_1889;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                indvar_flatten1_reg_309 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_1284_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_353 <= indvar_flatten_next_fu_1289_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                indvar_flatten_reg_353 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1837 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_reg_297 <= indvar_next_reg_1841;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_reg_297 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    length_r_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    modeFreq_1_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_6_reg_2061 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                modeFreq_1_fu_138 <= modeFreq_1_currentFr_fu_1767_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                modeFreq_1_fu_138 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    numberOfPixelsVisted_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                numberOfPixelsVisted <= tmp_3_i_fu_1241_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                numberOfPixelsVisted <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_2116_pp2_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1))) then 
                reg_401 <= sectionData_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                reg_401 <= sectionData_q0;
            end if; 
        end if;
    end process;

    reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_2116_pp2_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1))) then 
                reg_406 <= sectionData_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                reg_406 <= sectionData_q1;
            end if; 
        end if;
    end process;

    result_1_i_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_2116_pp2_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1))) then 
                result_1_i_reg_375 <= p_result_1_i_fu_1743_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                result_1_i_reg_375 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    version_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (version_1_vld_reg = ap_const_logic_0) and (version_1_vld_in = ap_const_logic_1))) then 
                version_1_vld_reg <= ap_const_logic_1;
            elsif (((version_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1))) then 
                version_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    x_i_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_1284_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                x_i_reg_364 <= x_i_mid2_fu_1314_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                x_i_reg_364 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                x_reg_320 <= x_cast_mid2_v_reg_1900;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                x_reg_320 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_i_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_1284_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                y_i_reg_387 <= y_2_fu_1322_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                y_i_reg_387 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                y_reg_331 <= y_1_fu_1785_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                y_reg_331 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1837 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                MAXI_addr_read_reg_1846 <= MAXI_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                addrCmp1_reg_1943 <= addrCmp1_fu_613_p2;
                current_reg_1926 <= current_fu_588_p2;
                mem_index_gep_reg_1937 <= mem_index_gep_fu_607_p2;
                tmp_10_reg_1932 <= tmp_10_fu_593_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                addrCmp3_reg_1964 <= addrCmp3_fu_678_p2;
                addrCmp5_reg_1980 <= addrCmp5_fu_709_p2;
                mem_index_gep1_reg_1958 <= mem_index_gep1_fu_672_p2;
                mem_index_gep2_reg_1974 <= mem_index_gep2_fu_703_p2;
                tmp_30_reg_1953 <= tmp_30_fu_658_p1;
                tmp_48_reg_1969 <= tmp_48_fu_689_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_2116_pp2_iter4_reg = ap_const_lv1_0))) then
                addrCmp8_reg_2203 <= addrCmp8_fu_1445_p2;
                mem_index_gep4_reg_2197 <= mem_index_gep4_fu_1439_p2;
                tmp_89_reg_2192 <= tmp_89_fu_1425_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_2116_pp2_iter3_reg = ap_const_lv1_0))) then
                addrCmp_reg_2182 <= addrCmp_fu_1380_p2;
                current_1_reg_2166 <= current_1_fu_1355_p2;
                mem_index_gep3_reg_2176 <= mem_index_gep3_fu_1374_p2;
                tmp_71_reg_2171 <= tmp_71_fu_1360_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_fu_529_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                ap_return <= modePixel_1_fu_142;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                bound_reg_1880 <= grp_fu_494_p2;
                tmp_36_i_cast_reg_1875 <= tmp_36_i_cast_fu_525_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_1284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond2_reg_2125 <= exitcond2_fu_1295_p2;
                x_1_reg_2135 <= x_1_fu_1308_p2;
                y_i_mid2_reg_2130 <= y_i_mid2_fu_1300_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond2_reg_2125_pp2_iter1_reg <= exitcond2_reg_2125;
                exitcond_flatten_reg_2116 <= exitcond_flatten_fu_1284_p2;
                exitcond_flatten_reg_2116_pp2_iter1_reg <= exitcond_flatten_reg_2116;
                tmp_32_i1_reg_2111 <= tmp_32_i1_fu_1278_p2;
                tmp_32_i1_reg_2111_pp2_iter1_reg <= tmp_32_i1_reg_2111;
                x_1_reg_2135_pp2_iter1_reg <= x_1_reg_2135;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                exitcond2_reg_2125_pp2_iter2_reg <= exitcond2_reg_2125_pp2_iter1_reg;
                exitcond2_reg_2125_pp2_iter3_reg <= exitcond2_reg_2125_pp2_iter2_reg;
                exitcond_flatten_reg_2116_pp2_iter2_reg <= exitcond_flatten_reg_2116_pp2_iter1_reg;
                exitcond_flatten_reg_2116_pp2_iter3_reg <= exitcond_flatten_reg_2116_pp2_iter2_reg;
                exitcond_flatten_reg_2116_pp2_iter4_reg <= exitcond_flatten_reg_2116_pp2_iter3_reg;
                exitcond_flatten_reg_2116_pp2_iter5_reg <= exitcond_flatten_reg_2116_pp2_iter4_reg;
                exitcond_flatten_reg_2116_pp2_iter6_reg <= exitcond_flatten_reg_2116_pp2_iter5_reg;
                exitcond_flatten_reg_2116_pp2_iter7_reg <= exitcond_flatten_reg_2116_pp2_iter6_reg;
                exitcond_flatten_reg_2116_pp2_iter8_reg <= exitcond_flatten_reg_2116_pp2_iter7_reg;
                tmp_32_i1_reg_2111_pp2_iter2_reg <= tmp_32_i1_reg_2111_pp2_iter1_reg;
                tmp_32_i1_reg_2111_pp2_iter3_reg <= tmp_32_i1_reg_2111_pp2_iter2_reg;
                tmp_71_reg_2171_pp2_iter5_reg <= tmp_71_reg_2171;
                tmp_71_reg_2171_pp2_iter6_reg <= tmp_71_reg_2171_pp2_iter5_reg;
                tmp_89_reg_2192_pp2_iter6_reg <= tmp_89_reg_2192;
                tmp_89_reg_2192_pp2_iter7_reg <= tmp_89_reg_2192_pp2_iter6_reg;
                x_1_reg_2135_pp2_iter2_reg <= x_1_reg_2135_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_1837 <= exitcond_fu_466_p2;
                exitcond_reg_1837_pp0_iter1_reg <= exitcond_reg_1837;
                indvar_reg_297_pp0_iter1_reg <= indvar_reg_297;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (height_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (height_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (height_0_vld_reg = ap_const_logic_1)))) then
                height_0_data_reg <= height;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                height_read_reg_1802 <= height_0_data_reg;
                length_read_reg_1795 <= length_r_0_data_reg;
                tmp_reg_1810 <= tmp_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                i_reg_2065 <= i_fu_1139_p2;
                tmp_i_6_reg_2061 <= tmp_i_6_fu_1134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                indvar_flatten_next1_reg_1889 <= indvar_flatten_next1_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_next_reg_1841 <= indvar_next_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    length_assign_reg_1864(31 downto 0) <= length_assign_fu_488_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (length_r_0_vld_reg = ap_const_logic_1)))) then
                length_r_0_data_reg <= length_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_6_reg_2061 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                modePixel_1_fu_142 <= modePixel_1_tmp_s_fu_1760_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                    modePixel_reg_2099(23 downto 0) <= modePixel_fu_1215_p1(23 downto 0);
                tmp_i1_reg_2105 <= tmp_i1_fu_1231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                numberOfPixelsVisted_1_reg_2049 <= numberOfPixelsVisted;
                tmp_47_reg_2033 <= tmp_47_fu_1100_p1;
                tmp_65_reg_2041 <= tmp_65_fu_1118_p1;
                tmp_66_reg_2056 <= tmp_66_fu_1126_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_add_i32_shr_reg_1820 <= p_add_fu_437_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ram1_reg_1790 <= ram(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_2116_pp2_iter7_reg = ap_const_lv1_0))) then
                    tmp_100_reg_2223(5 downto 1) <= tmp_100_fu_1677_p2(5 downto 1);
                tmp_103_reg_2228 <= tmp_103_fu_1687_p2;
                tmp_i_i1_reg_2233 <= tmp_i_i1_fu_1693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_1_reg_1920 <= tmp_1_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                    tmp_23_reg_1995(5 downto 1) <= tmp_23_fu_862_p2(5 downto 1);
                tmp_26_reg_2000 <= tmp_26_fu_872_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_6_fu_1134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                tmp_26_i_reg_2070 <= tmp_26_i_fu_1151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp_29_reg_2005 <= tmp_29_fu_892_p1;
                    tmp_41_reg_2013(5 downto 1) <= tmp_41_fu_975_p2(5 downto 1);
                tmp_44_reg_2018 <= tmp_44_fu_985_p2;
                    tmp_59_reg_2023(5 downto 1) <= tmp_59_fu_1070_p2(5 downto 1);
                tmp_62_reg_2028 <= tmp_62_fu_1080_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond2_reg_2125_pp2_iter2_reg = ap_const_lv1_0) and (exitcond_flatten_reg_2116_pp2_iter2_reg = ap_const_lv1_0))) then
                tmp_32_i1_mid1_reg_2156 <= tmp_32_i1_mid1_fu_1341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_2116_pp2_iter2_reg = ap_const_lv1_0))) then
                tmp_37_i_reg_2161 <= grp_fu_1331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_4_reg_1815 <= grp_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_2116_pp2_iter6_reg = ap_const_lv1_0))) then
                    tmp_82_reg_2213(5 downto 1) <= tmp_82_fu_1564_p2(5 downto 1);
                tmp_85_reg_2218 <= tmp_85_fu_1574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_6_reg_2061 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                tmp_i_i_reg_2091 <= tmp_i_i_fu_1182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_s_reg_1915 <= grp_fu_570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (version_1_vld_reg = ap_const_logic_0) and (version_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_in = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1)))) then
                version_1_data_reg <= version_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_fu_529_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                x_cast_mid2_v_reg_1900 <= x_cast_mid2_v_fu_559_p3;
                y_mid2_reg_1894 <= y_mid2_fu_545_p3;
            end if;
        end if;
    end process;
    length_assign_reg_1864(63 downto 32) <= "00000000000000000000000000000000";
    tmp_23_reg_1995(0) <= '0';
    tmp_41_reg_2013(0) <= '0';
    tmp_59_reg_2023(0) <= '0';
    modePixel_reg_2099(31 downto 24) <= "00000000";
    tmp_82_reg_2213(0) <= '0';
    tmp_100_reg_2223(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, version_1_ack_in, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_sig_ioackin_MAXI_ARREADY, exitcond_fu_466_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state20, exitcond_flatten1_fu_529_p2, tmp_i_6_reg_2061, exitcond_flatten_fu_1284_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter9, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter8, ap_CS_fsm_state33, val_assign_fu_1203_p2, ap_CS_fsm_state48)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_466_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_466_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((exitcond_flatten1_fu_529_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((tmp_i_6_reg_2061 = ap_const_lv1_1) and (val_assign_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                elsif (((tmp_i_6_reg_2061 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond_flatten_fu_1284_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond_flatten_fu_1284_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (version_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    MAXI_ARADDR <= tmp_5_fu_452_p1(32 - 1 downto 0);
    MAXI_ARLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_add_i32_shr_reg_1820),32));

    MAXI_ARVALID_assign_proc : process(ap_CS_fsm_state7, ap_reg_ioackin_MAXI_ARREADY)
    begin
        if (((ap_reg_ioackin_MAXI_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            MAXI_ARVALID <= ap_const_logic_1;
        else 
            MAXI_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_1837, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1837 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MAXI_RREADY <= ap_const_logic_1;
        else 
            MAXI_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_blk_n_AR_assign_proc : process(m_axi_MAXI_ARREADY, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            MAXI_blk_n_AR <= m_axi_MAXI_ARREADY;
        else 
            MAXI_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_R_assign_proc : process(m_axi_MAXI_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_1837)
    begin
        if (((exitcond_reg_1837 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MAXI_blk_n_R <= m_axi_MAXI_RVALID;
        else 
            MAXI_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    addrCmp1_fu_613_p2 <= "1" when (unsigned(adjSize_fu_597_p4) < unsigned(ap_const_lv14_3FFC)) else "0";
    addrCmp2_fu_622_p2 <= "1" when (unsigned(mem_index_gep_reg_1937) < unsigned(ap_const_lv14_69C)) else "0";
    addrCmp3_fu_678_p2 <= "1" when (unsigned(adjSize1_fu_662_p4) < unsigned(ap_const_lv14_3FFC)) else "0";
    addrCmp4_fu_718_p2 <= "1" when (unsigned(mem_index_gep1_reg_1958) < unsigned(ap_const_lv14_69C)) else "0";
    addrCmp5_fu_709_p2 <= "1" when (unsigned(adjSize2_fu_693_p4) < unsigned(ap_const_lv14_3FFC)) else "0";
    addrCmp6_fu_752_p2 <= "1" when (unsigned(mem_index_gep2_reg_1974) < unsigned(ap_const_lv14_69C)) else "0";
    addrCmp7_fu_1389_p2 <= "1" when (unsigned(mem_index_gep3_reg_2176) < unsigned(ap_const_lv14_69C)) else "0";
    addrCmp8_fu_1445_p2 <= "1" when (unsigned(adjSize4_fu_1429_p4) < unsigned(ap_const_lv14_3FFC)) else "0";
    addrCmp9_fu_1454_p2 <= "1" when (unsigned(mem_index_gep4_reg_2197) < unsigned(ap_const_lv14_69C)) else "0";
    addrCmp_fu_1380_p2 <= "1" when (unsigned(adjSize3_fu_1364_p4) < unsigned(ap_const_lv14_3FFC)) else "0";
    adjSize145_cast_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep3_reg_2176),15));
    adjSize148_cast_fu_1451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep4_reg_2197),15));
    adjSize160_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep_reg_1937),15));
    adjSize172_cast_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep1_reg_1958),15));
    adjSize184_cast_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep2_reg_1974),15));
    adjSize1_fu_662_p4 <= tmp_2_fu_653_p2(15 downto 2);
    adjSize2_fu_693_p4 <= tmp_3_fu_684_p2(15 downto 2);
    adjSize3_fu_1364_p4 <= current_1_fu_1355_p2(15 downto 2);
    adjSize4_fu_1429_p4 <= tmp_38_i_fu_1420_p2(15 downto 2);
    adjSize_fu_597_p4 <= current_fu_588_p2(15 downto 2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(34);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state32 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(33);
    ap_CS_fsm_state47 <= ap_CS_fsm(35);
    ap_CS_fsm_state48 <= ap_CS_fsm(36);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1837, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = MAXI_RVALID) and (exitcond_reg_1837 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1837, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = MAXI_RVALID) and (exitcond_reg_1837 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp0_stage0_iter1_assign_proc : process(exitcond_reg_1837, MAXI_RVALID)
    begin
                ap_block_state15_pp0_stage0_iter1 <= ((ap_const_logic_0 = MAXI_RVALID) and (exitcond_reg_1837 = ap_const_lv1_0));
    end process;

        ap_block_state16_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state14_assign_proc : process(exitcond_fu_466_p2)
    begin
        if ((exitcond_fu_466_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state37_assign_proc : process(exitcond_flatten_fu_1284_p2)
    begin
        if ((exitcond_flatten_fu_1284_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state37 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(version_1_ack_in, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) and (version_1_ack_in = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter8)
    begin
        if (((ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_301_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_1837, indvar_reg_297, indvar_next_reg_1841)
    begin
        if (((exitcond_reg_1837 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_phi_fu_301_p4 <= indvar_next_reg_1841;
        else 
            ap_phi_mux_indvar_phi_fu_301_p4 <= indvar_reg_297;
        end if; 
    end process;


    ap_ready_assign_proc : process(version_1_ack_in, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) and (version_1_ack_in = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_MAXI_ARREADY_assign_proc : process(MAXI_ARREADY, ap_reg_ioackin_MAXI_ARREADY)
    begin
        if ((ap_reg_ioackin_MAXI_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_MAXI_ARREADY <= MAXI_ARREADY;
        else 
            ap_sig_ioackin_MAXI_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    current_1_fu_1355_p2 <= std_logic_vector(signed(tmp_33_i_mid2_fu_1351_p1) + signed(tmp_37_i_reg_2161));
    current_fu_588_p2 <= std_logic_vector(unsigned(tmp_8_fu_583_p2) - unsigned(tmp_1_reg_1920));
    end_pos1_fu_903_p2 <= (start_pos2_fu_896_p3 or ap_const_lv5_7);
    end_pos2_fu_998_p2 <= (start_pos3_fu_991_p3 or ap_const_lv5_7);
    end_pos3_fu_1492_p2 <= (start_pos_fu_1485_p3 or ap_const_lv5_7);
    end_pos4_fu_1605_p2 <= (start_pos4_fu_1598_p3 or ap_const_lv5_7);
    end_pos_fu_790_p2 <= (start_pos1_fu_783_p3 or ap_const_lv5_7);
    exitcond1_fu_540_p2 <= "0" when (y_reg_331 = height_read_reg_1802) else "1";
    exitcond2_fu_1295_p2 <= "0" when (y_i_reg_387 = height_read_reg_1802) else "1";
    exitcond_flatten1_fu_529_p2 <= "1" when (indvar_flatten1_reg_309 = bound_reg_1880) else "0";
    exitcond_flatten_fu_1284_p2 <= "1" when (indvar_flatten_reg_353 = bound_reg_1880) else "0";
    exitcond_fu_466_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_301_p4 = p_add_i32_shr_reg_1820) else "0";
    gepindex10_fu_770_p3 <= 
        gepindex9_fu_763_p3 when (addrCmp6_fu_752_p2(0) = '1') else 
        ap_const_lv15_697;
    gepindex11_fu_1400_p3 <= 
        gepindex_fu_1394_p2 when (addrCmp_reg_2182(0) = '1') else 
        ap_const_lv15_697;
    gepindex12_fu_1459_p2 <= std_logic_vector(signed(ap_const_lv15_7FFC) + signed(adjSize148_cast_fu_1451_p1));
    gepindex13_fu_1465_p3 <= 
        gepindex12_fu_1459_p2 when (addrCmp8_reg_2203(0) = '1') else 
        ap_const_lv15_697;
    gepindex14_fu_1472_p3 <= 
        gepindex13_fu_1465_p3 when (addrCmp9_fu_1454_p2(0) = '1') else 
        ap_const_lv15_697;
    gepindex1_fu_627_p2 <= std_logic_vector(signed(ap_const_lv15_7FFC) + signed(adjSize160_cast_fu_619_p1));
        gepindex2154_cast_fu_1480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex14_fu_1472_p3),64));

        gepindex2166_cast_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex4_fu_640_p3),64));

        gepindex2178_cast_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex7_fu_736_p3),64));

        gepindex2190_cast_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex10_fu_770_p3),64));

        gepindex2_cast_fu_1415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex2_fu_1407_p3),64));

    gepindex2_fu_1407_p3 <= 
        gepindex11_fu_1400_p3 when (addrCmp7_fu_1389_p2(0) = '1') else 
        ap_const_lv15_697;
    gepindex3_fu_633_p3 <= 
        gepindex1_fu_627_p2 when (addrCmp1_reg_1943(0) = '1') else 
        ap_const_lv15_697;
    gepindex4_fu_640_p3 <= 
        gepindex3_fu_633_p3 when (addrCmp2_fu_622_p2(0) = '1') else 
        ap_const_lv15_697;
    gepindex5_fu_723_p2 <= std_logic_vector(signed(ap_const_lv15_7FFC) + signed(adjSize172_cast_fu_715_p1));
    gepindex6_fu_729_p3 <= 
        gepindex5_fu_723_p2 when (addrCmp3_reg_1964(0) = '1') else 
        ap_const_lv15_697;
    gepindex7_fu_736_p3 <= 
        gepindex6_fu_729_p3 when (addrCmp4_fu_718_p2(0) = '1') else 
        ap_const_lv15_697;
    gepindex8_fu_757_p2 <= std_logic_vector(signed(ap_const_lv15_7FFC) + signed(adjSize184_cast_fu_749_p1));
    gepindex9_fu_763_p3 <= 
        gepindex8_fu_757_p2 when (addrCmp5_reg_1980(0) = '1') else 
        ap_const_lv15_697;
    gepindex_fu_1394_p2 <= std_logic_vector(signed(ap_const_lv15_7FFC) + signed(adjSize145_cast_fu_1386_p1));
    grp_fu_1331_p1 <= tmp_36_i_cast_reg_1875(35 - 1 downto 0);
    grp_fu_494_p0 <= grp_fu_494_p00(32 - 1 downto 0);
    grp_fu_494_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_read_reg_1795),64));
    grp_fu_494_p1 <= grp_fu_494_p10(32 - 1 downto 0);
    grp_fu_494_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_read_reg_1802),64));
    grp_fu_570_p0 <= length_assign_reg_1864(32 - 1 downto 0);
    grp_fu_570_p1 <= grp_fu_570_p10(32 - 1 downto 0);
    grp_fu_570_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_mid2_reg_1894),64));

    height_0_ack_out_assign_proc : process(version_1_ack_in, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) and (version_1_ack_in = ap_const_logic_1))) then 
            height_0_ack_out <= ap_const_logic_1;
        else 
            height_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_1139_p2 <= std_logic_vector(signed(i_i_reg_342) + signed(ap_const_lv32_1));
    indvar3_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_297_pp0_iter1_reg),64));
    indvar_flatten_next1_fu_534_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_309) + unsigned(ap_const_lv64_1));
    indvar_flatten_next_fu_1289_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(indvar_flatten_reg_353));
    indvar_next_fu_471_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_301_p4) + unsigned(ap_const_lv30_1));
    length_assign_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_read_reg_1795),64));

    length_r_0_ack_out_assign_proc : process(version_1_ack_in, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) and (version_1_ack_in = ap_const_logic_1))) then 
            length_r_0_ack_out <= ap_const_logic_1;
        else 
            length_r_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    mem_index_gep1_fu_672_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(adjSize1_fu_662_p4));
    mem_index_gep2_fu_703_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(adjSize2_fu_693_p4));
    mem_index_gep3_fu_1374_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(adjSize3_fu_1364_p4));
    mem_index_gep4_fu_1439_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(adjSize4_fu_1429_p4));
    mem_index_gep_fu_607_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(adjSize_fu_597_p4));
    modeFreq_1_currentFr_fu_1767_p3 <= 
        modeFreq_1_fu_138 when (tmp_14_fu_1754_p2(0) = '1') else 
        result_1_i_reg_375;
    modePixel_1_tmp_s_fu_1760_p3 <= 
        modePixel_1_fu_142 when (tmp_14_fu_1754_p2(0) = '1') else 
        modePixel_reg_2099;
    modePixel_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1208_p4),32));
    p_add_fu_437_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(tmp_4_reg_1815));
    p_result_1_i_fu_1743_p3 <= 
        result_fu_1737_p2 when (val_assign_1_fu_1732_p2(0) = '1') else 
        result_1_i_reg_375;
    p_shl1_i_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_i_fu_508_p3),35));
    p_shl1_i_fu_508_p3 <= (length_read_reg_1795 & ap_const_lv2_0);
    p_shl_i1_fu_1223_p3 <= (tmp_68_fu_1220_p1 & ap_const_lv2_0);
    result_fu_1737_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(result_1_i_reg_375));

    sectionData_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state27, ap_enable_reg_pp2_iter6, ap_CS_fsm_state26, ap_enable_reg_pp0_iter2, indvar3_fu_477_p1, gepindex2166_cast_fu_648_p1, gepindex2178_cast_fu_744_p1, ap_block_pp2_stage0, gepindex2154_cast_fu_1480_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1))) then 
            sectionData_address0 <= gepindex2154_cast_fu_1480_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sectionData_address0 <= gepindex2178_cast_fu_744_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sectionData_address0 <= gepindex2166_cast_fu_648_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sectionData_address0 <= indvar3_fu_477_p1(11 - 1 downto 0);
        else 
            sectionData_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sectionData_address1_assign_proc : process(ap_CS_fsm_state27, ap_enable_reg_pp2_iter5, gepindex2190_cast_fu_778_p1, gepindex2_cast_fu_1415_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1))) then 
            sectionData_address1 <= gepindex2_cast_fu_1415_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sectionData_address1 <= gepindex2190_cast_fu_778_p1(11 - 1 downto 0);
        else 
            sectionData_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sectionData_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state27, ap_enable_reg_pp2_iter6, ap_block_pp2_stage0_11001, ap_CS_fsm_state26, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            sectionData_ce0 <= ap_const_logic_1;
        else 
            sectionData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sectionData_ce1_assign_proc : process(ap_CS_fsm_state27, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1)))) then 
            sectionData_ce1 <= ap_const_logic_1;
        else 
            sectionData_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sectionData_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_reg_1837_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1837_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sectionData_we0 <= ap_const_logic_1;
        else 
            sectionData_we0 <= ap_const_logic_0;
        end if; 
    end process;

    start_pos1_fu_783_p3 <= (tmp_10_reg_1932 & ap_const_lv3_0);
    start_pos2_fu_896_p3 <= (tmp_30_reg_1953 & ap_const_lv3_0);
    start_pos3_fu_991_p3 <= (tmp_48_reg_1969 & ap_const_lv3_0);
    start_pos4_fu_1598_p3 <= (tmp_89_reg_2192_pp2_iter7_reg & ap_const_lv3_0);
    start_pos_fu_1485_p3 <= (tmp_71_reg_2171_pp2_iter6_reg & ap_const_lv3_0);
    tmp1_fu_1197_p2 <= (tmp_i_i_7_fu_1187_p2 and tmp_39_i_i_fu_1192_p2);
    tmp2_fu_1726_p2 <= (tmp_i_i1_8_fu_1716_p2 and tmp_39_i_i1_fu_1721_p2);
    tmp_100_fu_1677_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_97_fu_1653_p3));
    tmp_101_fu_1683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_1669_p3),32));
    tmp_102_fu_1698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_reg_2223),32));
    tmp_103_fu_1687_p2 <= std_logic_vector(shift_right(unsigned(tmp_98_fu_1661_p3),to_integer(unsigned('0' & tmp_101_fu_1683_p1(31-1 downto 0)))));
    tmp_104_fu_1701_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_102_fu_1698_p1(31-1 downto 0)))));
    tmp_105_fu_1707_p2 <= (tmp_104_fu_1701_p2 and tmp_103_reg_2228);
    tmp_106_fu_1712_p1 <= tmp_105_fu_1707_p2(8 - 1 downto 0);
    tmp_10_fu_593_p1 <= current_fu_588_p2(2 - 1 downto 0);
    tmp_11_fu_796_p2 <= "1" when (unsigned(start_pos1_fu_783_p3) > unsigned(end_pos_fu_790_p2)) else "0";
    tmp_12_fu_1208_p4 <= ((tmp_65_reg_2041 & tmp_47_reg_2033) & tmp_29_reg_2005);
    tmp_13_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos1_fu_783_p3),6));
    tmp_14_fu_1754_p2 <= "1" when (unsigned(result_1_i_reg_375) < unsigned(modeFreq_1_fu_138)) else "0";
    tmp_15_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos_fu_790_p2),6));
    
    tmp_16_fu_810_p4_proc : process(reg_401)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_16_fu_810_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := reg_401;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_16_fu_810_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_16_fu_810_p4_i) := reg_401(32-1-tmp_16_fu_810_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_810_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_17_fu_820_p2 <= std_logic_vector(unsigned(tmp_13_fu_802_p1) - unsigned(tmp_15_fu_806_p1));
    tmp_18_fu_826_p2 <= (tmp_13_fu_802_p1 xor ap_const_lv6_1F);
    tmp_19_fu_832_p2 <= std_logic_vector(unsigned(tmp_15_fu_806_p1) - unsigned(tmp_13_fu_802_p1));
    tmp_1_fu_578_p2 <= std_logic_vector(unsigned(tmp_s_reg_1915) + unsigned(x_cast_mid2_fu_575_p1));
    tmp_1_i_cast_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_fu_1252_p2),64));
    tmp_1_i_fu_1252_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(tmp_i1_reg_2105));
    tmp_20_fu_838_p3 <= 
        tmp_17_fu_820_p2 when (tmp_11_fu_796_p2(0) = '1') else 
        tmp_19_fu_832_p2;
    tmp_21_fu_846_p3 <= 
        tmp_16_fu_810_p4 when (tmp_11_fu_796_p2(0) = '1') else 
        reg_401;
    tmp_22_fu_854_p3 <= 
        tmp_18_fu_826_p2 when (tmp_11_fu_796_p2(0) = '1') else 
        tmp_13_fu_802_p1;
    tmp_23_fu_862_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_20_fu_838_p3));
    tmp_24_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_854_p3),32));
    tmp_25_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_1995),32));
    tmp_26_fu_872_p2 <= std_logic_vector(shift_right(unsigned(tmp_21_fu_846_p3),to_integer(unsigned('0' & tmp_24_fu_868_p1(31-1 downto 0)))));
    tmp_26_i_fu_1151_p2 <= std_logic_vector(unsigned(tmp_67_fu_1145_p2) - unsigned(i_i_reg_342));
    tmp_27_fu_881_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_25_fu_878_p1(31-1 downto 0)))));
        tmp_27_i_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_i_fu_1151_p2),64));

    tmp_28_fu_887_p2 <= (tmp_27_fu_881_p2 and tmp_26_reg_2000);
    tmp_28_i_fu_1162_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp_26_i_reg_2070));
    tmp_29_fu_892_p1 <= tmp_28_fu_887_p2(8 - 1 downto 0);
        tmp_29_i_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_i_fu_1162_p2),64));

    tmp_2_fu_653_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(current_reg_1926));
    tmp_2_i_cast_fu_1267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_i_fu_1262_p2),64));
    tmp_2_i_fu_1262_p2 <= std_logic_vector(unsigned(ap_const_lv14_2) + unsigned(tmp_i1_reg_2105));
    tmp_30_fu_658_p1 <= tmp_2_fu_653_p2(2 - 1 downto 0);
    tmp_30_i_fu_1172_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(tmp_26_i_reg_2070));
    tmp_31_fu_909_p2 <= "1" when (unsigned(start_pos2_fu_896_p3) > unsigned(end_pos1_fu_903_p2)) else "0";
        tmp_31_i_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_i_fu_1172_p2),64));

    tmp_32_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos2_fu_896_p3),6));
    tmp_32_i1_fu_1278_p2 <= std_logic_vector(unsigned(tmp_69_fu_1272_p2) - unsigned(x_i_reg_364));
    tmp_32_i1_mid1_fu_1341_p2 <= std_logic_vector(unsigned(tmp_70_fu_1336_p2) - unsigned(x_1_reg_2135_pp2_iter2_reg));
    tmp_33_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos1_fu_903_p2),6));
        tmp_33_i_mid2_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_i_mid2_v_fu_1346_p3),64));

    tmp_33_i_mid2_v_fu_1346_p3 <= 
        tmp_32_i1_reg_2111_pp2_iter3_reg when (exitcond2_reg_2125_pp2_iter3_reg(0) = '1') else 
        tmp_32_i1_mid1_reg_2156;
    
    tmp_34_fu_923_p4_proc : process(reg_401)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_34_fu_923_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := reg_401;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_34_fu_923_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_34_fu_923_p4_i) := reg_401(32-1-tmp_34_fu_923_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_34_fu_923_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_35_fu_933_p2 <= std_logic_vector(unsigned(tmp_32_fu_915_p1) - unsigned(tmp_33_fu_919_p1));
    tmp_36_fu_939_p2 <= (tmp_32_fu_915_p1 xor ap_const_lv6_1F);
        tmp_36_i_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_i_fu_519_p2),64));

    tmp_36_i_fu_519_p2 <= std_logic_vector(unsigned(p_shl1_i_cast_fu_515_p1) - unsigned(tmp_5_cast4_fu_505_p1));
    tmp_37_fu_945_p2 <= std_logic_vector(unsigned(tmp_33_fu_919_p1) - unsigned(tmp_32_fu_915_p1));
    tmp_38_fu_951_p3 <= 
        tmp_35_fu_933_p2 when (tmp_31_fu_909_p2(0) = '1') else 
        tmp_37_fu_945_p2;
    tmp_38_i_fu_1420_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(current_1_reg_2166));
    tmp_39_fu_959_p3 <= 
        tmp_34_fu_923_p4 when (tmp_31_fu_909_p2(0) = '1') else 
        reg_401;
    tmp_39_i_i1_fu_1721_p2 <= "1" when (tmp_106_fu_1712_p1 = tmp_65_reg_2041) else "0";
    tmp_39_i_i_fu_1192_p2 <= "1" when (tmp_65_reg_2041 = visited_q1) else "0";
    tmp_3_fu_684_p2 <= std_logic_vector(unsigned(ap_const_lv64_2) + unsigned(current_reg_1926));
    tmp_3_i_fu_1241_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(numberOfPixelsVisted_1_reg_2049));
    tmp_40_fu_967_p3 <= 
        tmp_36_fu_939_p2 when (tmp_31_fu_909_p2(0) = '1') else 
        tmp_32_fu_915_p1;
    tmp_41_fu_975_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_38_fu_951_p3));
    tmp_42_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_967_p3),32));
    tmp_43_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_reg_2013),32));
    tmp_44_fu_985_p2 <= std_logic_vector(shift_right(unsigned(tmp_39_fu_959_p3),to_integer(unsigned('0' & tmp_42_fu_981_p1(31-1 downto 0)))));
    tmp_45_fu_1089_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_43_fu_1086_p1(31-1 downto 0)))));
    tmp_46_fu_1095_p2 <= (tmp_45_fu_1089_p2 and tmp_44_reg_2018);
    tmp_47_fu_1100_p1 <= tmp_46_fu_1095_p2(8 - 1 downto 0);
    tmp_48_fu_689_p1 <= tmp_3_fu_684_p2(2 - 1 downto 0);
    tmp_49_fu_1004_p2 <= "1" when (unsigned(start_pos3_fu_991_p3) > unsigned(end_pos2_fu_998_p2)) else "0";
    tmp_50_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos3_fu_991_p3),6));
    tmp_51_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos2_fu_998_p2),6));
    
    tmp_52_fu_1018_p4_proc : process(reg_406)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_52_fu_1018_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := reg_406;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_52_fu_1018_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_52_fu_1018_p4_i) := reg_406(32-1-tmp_52_fu_1018_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_52_fu_1018_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_53_fu_1028_p2 <= std_logic_vector(unsigned(tmp_50_fu_1010_p1) - unsigned(tmp_51_fu_1014_p1));
    tmp_54_fu_1034_p2 <= (tmp_50_fu_1010_p1 xor ap_const_lv6_1F);
    tmp_55_fu_1040_p2 <= std_logic_vector(unsigned(tmp_51_fu_1014_p1) - unsigned(tmp_50_fu_1010_p1));
    tmp_56_fu_1046_p3 <= 
        tmp_53_fu_1028_p2 when (tmp_49_fu_1004_p2(0) = '1') else 
        tmp_55_fu_1040_p2;
    tmp_57_fu_1054_p3 <= 
        tmp_52_fu_1018_p4 when (tmp_49_fu_1004_p2(0) = '1') else 
        reg_406;
    tmp_58_fu_1062_p3 <= 
        tmp_54_fu_1034_p2 when (tmp_49_fu_1004_p2(0) = '1') else 
        tmp_50_fu_1010_p1;
    tmp_59_fu_1070_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_56_fu_1046_p3));
    tmp_5_cast4_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_read_reg_1795),35));
    tmp_5_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram1_reg_1790),64));
    tmp_60_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_1062_p3),32));
    tmp_61_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_reg_2023),32));
    tmp_62_fu_1080_p2 <= std_logic_vector(shift_right(unsigned(tmp_57_fu_1054_p3),to_integer(unsigned('0' & tmp_60_fu_1076_p1(31-1 downto 0)))));
    tmp_63_fu_1107_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_61_fu_1104_p1(31-1 downto 0)))));
    tmp_64_fu_1113_p2 <= (tmp_63_fu_1107_p2 and tmp_62_reg_2028);
    tmp_65_fu_1118_p1 <= tmp_64_fu_1113_p2(8 - 1 downto 0);
    tmp_66_fu_1126_p1 <= numberOfPixelsVisted(14 - 1 downto 0);
    tmp_67_fu_1145_p2 <= std_logic_vector(shift_left(unsigned(i_i_reg_342),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_68_fu_1220_p1 <= numberOfPixelsVisted_1_reg_2049(12 - 1 downto 0);
    tmp_69_fu_1272_p2 <= std_logic_vector(shift_left(unsigned(x_i_reg_364),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_6_fu_421_p2 <= std_logic_vector(shift_left(unsigned(length_r_0_data_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_70_fu_1336_p2 <= std_logic_vector(shift_left(unsigned(x_1_reg_2135_pp2_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_71_fu_1360_p1 <= current_1_fu_1355_p2(2 - 1 downto 0);
    tmp_72_fu_1498_p2 <= "1" when (unsigned(start_pos_fu_1485_p3) > unsigned(end_pos3_fu_1492_p2)) else "0";
    tmp_73_fu_1504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_fu_1485_p3),6));
    tmp_74_fu_1508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos3_fu_1492_p2),6));
    
    tmp_75_fu_1512_p4_proc : process(reg_401)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_75_fu_1512_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := reg_401;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_75_fu_1512_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_75_fu_1512_p4_i) := reg_401(32-1-tmp_75_fu_1512_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_75_fu_1512_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_76_fu_1522_p2 <= std_logic_vector(unsigned(tmp_73_fu_1504_p1) - unsigned(tmp_74_fu_1508_p1));
    tmp_77_fu_1528_p2 <= (tmp_73_fu_1504_p1 xor ap_const_lv6_1F);
    tmp_78_fu_1534_p2 <= std_logic_vector(unsigned(tmp_74_fu_1508_p1) - unsigned(tmp_73_fu_1504_p1));
    tmp_79_fu_1540_p3 <= 
        tmp_76_fu_1522_p2 when (tmp_72_fu_1498_p2(0) = '1') else 
        tmp_78_fu_1534_p2;
    tmp_80_fu_1548_p3 <= 
        tmp_75_fu_1512_p4 when (tmp_72_fu_1498_p2(0) = '1') else 
        reg_401;
    tmp_81_fu_1556_p3 <= 
        tmp_77_fu_1528_p2 when (tmp_72_fu_1498_p2(0) = '1') else 
        tmp_73_fu_1504_p1;
    tmp_82_fu_1564_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_79_fu_1540_p3));
    tmp_83_fu_1570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_1556_p3),32));
    tmp_84_fu_1580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_reg_2213),32));
    tmp_85_fu_1574_p2 <= std_logic_vector(shift_right(unsigned(tmp_80_fu_1548_p3),to_integer(unsigned('0' & tmp_83_fu_1570_p1(31-1 downto 0)))));
    tmp_86_fu_1583_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_84_fu_1580_p1(31-1 downto 0)))));
    tmp_87_fu_1589_p2 <= (tmp_86_fu_1583_p2 and tmp_85_reg_2218);
    tmp_88_fu_1594_p1 <= tmp_87_fu_1589_p2(8 - 1 downto 0);
    tmp_89_fu_1425_p1 <= tmp_38_i_fu_1420_p2(2 - 1 downto 0);
    tmp_8_fu_583_p2 <= std_logic_vector(shift_left(unsigned(tmp_1_reg_1920),to_integer(unsigned('0' & ap_const_lv64_2(31-1 downto 0)))));
    tmp_90_fu_1611_p2 <= "1" when (unsigned(start_pos4_fu_1598_p3) > unsigned(end_pos4_fu_1605_p2)) else "0";
    tmp_91_fu_1617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos4_fu_1598_p3),6));
    tmp_92_fu_1621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos4_fu_1605_p2),6));
    
    tmp_93_fu_1625_p4_proc : process(reg_406)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_93_fu_1625_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := reg_406;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_93_fu_1625_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_93_fu_1625_p4_i) := reg_406(32-1-tmp_93_fu_1625_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_93_fu_1625_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_94_fu_1635_p2 <= std_logic_vector(unsigned(tmp_91_fu_1617_p1) - unsigned(tmp_92_fu_1621_p1));
    tmp_95_fu_1641_p2 <= (tmp_91_fu_1617_p1 xor ap_const_lv6_1F);
    tmp_96_fu_1647_p2 <= std_logic_vector(unsigned(tmp_92_fu_1621_p1) - unsigned(tmp_91_fu_1617_p1));
    tmp_97_fu_1653_p3 <= 
        tmp_94_fu_1635_p2 when (tmp_90_fu_1611_p2(0) = '1') else 
        tmp_96_fu_1647_p2;
    tmp_98_fu_1661_p3 <= 
        tmp_93_fu_1625_p4 when (tmp_90_fu_1611_p2(0) = '1') else 
        reg_406;
    tmp_99_fu_1669_p3 <= 
        tmp_95_fu_1641_p2 when (tmp_90_fu_1611_p2(0) = '1') else 
        tmp_91_fu_1617_p1;
    tmp_fu_427_p2 <= std_logic_vector(unsigned(tmp_6_fu_421_p2) - unsigned(length_r_0_data_reg));
    tmp_i1_cast_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_fu_1231_p2),64));
    tmp_i1_fu_1231_p2 <= std_logic_vector(unsigned(p_shl_i1_fu_1223_p3) - unsigned(tmp_66_reg_2056));
    tmp_i_6_fu_1134_p2 <= "1" when (unsigned(tmp_i_fu_1130_p1) < unsigned(numberOfPixelsVisted_1_reg_2049)) else "0";
        tmp_i_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_i_reg_342),64));

    tmp_i_i1_8_fu_1716_p2 <= "1" when (tmp_106_fu_1712_p1 = tmp_47_reg_2033) else "0";
    tmp_i_i1_fu_1693_p2 <= "1" when (tmp_88_fu_1594_p1 = tmp_29_reg_2005) else "0";
    tmp_i_i_7_fu_1187_p2 <= "1" when (tmp_47_reg_2033 = visited_q0) else "0";
    tmp_i_i_fu_1182_p2 <= "1" when (tmp_29_reg_2005 = visited_q0) else "0";
    val_assign_1_fu_1732_p2 <= (tmp_i_i1_reg_2233 and tmp2_fu_1726_p2);
    val_assign_fu_1203_p2 <= (tmp_i_i_reg_2091 and tmp1_fu_1197_p2);

    version_1_ack_in_assign_proc : process(version_1_vld_reg)
    begin
        if (((version_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1)))) then 
            version_1_ack_in <= ap_const_logic_1;
        else 
            version_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    version_1_data_in_assign_proc : process(modePixel_fu_1215_p1, ap_CS_fsm_state35, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            version_1_data_in <= modePixel_fu_1215_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            version_1_data_in <= ap_const_lv32_1;
        else 
            version_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    version_1_vld_in_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            version_1_vld_in <= ap_const_logic_1;
        else 
            version_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    visited_address0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state36, tmp_27_i_fu_1157_p1, tmp_29_i_fu_1167_p1, tmp_1_i_cast_fu_1257_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            visited_address0 <= tmp_1_i_cast_fu_1257_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            visited_address0 <= tmp_29_i_fu_1167_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            visited_address0 <= tmp_27_i_fu_1157_p1(13 - 1 downto 0);
        else 
            visited_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    visited_address1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state36, tmp_31_i_fu_1177_p1, tmp_i1_cast_fu_1236_p1, tmp_2_i_cast_fu_1267_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            visited_address1 <= tmp_2_i_cast_fu_1267_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            visited_address1 <= tmp_i1_cast_fu_1236_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            visited_address1 <= tmp_31_i_fu_1177_p1(13 - 1 downto 0);
        else 
            visited_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    visited_ce0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            visited_ce0 <= ap_const_logic_1;
        else 
            visited_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    visited_ce1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            visited_ce1 <= ap_const_logic_1;
        else 
            visited_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    visited_d1_assign_proc : process(tmp_29_reg_2005, tmp_65_reg_2041, ap_CS_fsm_state35, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            visited_d1 <= tmp_65_reg_2041;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            visited_d1 <= tmp_29_reg_2005;
        else 
            visited_d1 <= "XXXXXXXX";
        end if; 
    end process;


    visited_we0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            visited_we0 <= ap_const_logic_1;
        else 
            visited_we0 <= ap_const_logic_0;
        end if; 
    end process;


    visited_we1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            visited_we1 <= ap_const_logic_1;
        else 
            visited_we1 <= ap_const_logic_0;
        end if; 
    end process;

    x_1_fu_1308_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(x_i_reg_364));
    x_cast_mid2_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_cast_mid2_v_reg_1900),64));
    x_cast_mid2_v_fu_559_p3 <= 
        x_reg_320 when (exitcond1_fu_540_p2(0) = '1') else 
        x_s_fu_553_p2;
    x_i_mid2_fu_1314_p3 <= 
        x_i_reg_364 when (exitcond2_fu_1295_p2(0) = '1') else 
        x_1_fu_1308_p2;
    x_s_fu_553_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(x_reg_320));
    y_1_fu_1785_p2 <= std_logic_vector(unsigned(y_mid2_reg_1894) + unsigned(ap_const_lv32_1));
    y_2_fu_1322_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(y_i_mid2_fu_1300_p3));
    y_i_mid2_fu_1300_p3 <= 
        y_i_reg_387 when (exitcond2_fu_1295_p2(0) = '1') else 
        ap_const_lv32_0;
    y_mid2_fu_545_p3 <= 
        y_reg_331 when (exitcond1_fu_540_p2(0) = '1') else 
        ap_const_lv32_0;
end behav;
