-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toplevel is
generic (
    C_M_AXI_MAXI_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_USER_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_MAXI_AWVALID : OUT STD_LOGIC;
    m_axi_MAXI_AWREADY : IN STD_LOGIC;
    m_axi_MAXI_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_AWUSER_WIDTH-1 downto 0);
    m_axi_MAXI_WVALID : OUT STD_LOGIC;
    m_axi_MAXI_WREADY : IN STD_LOGIC;
    m_axi_MAXI_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH/8-1 downto 0);
    m_axi_MAXI_WLAST : OUT STD_LOGIC;
    m_axi_MAXI_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_WUSER_WIDTH-1 downto 0);
    m_axi_MAXI_ARVALID : OUT STD_LOGIC;
    m_axi_MAXI_ARREADY : IN STD_LOGIC;
    m_axi_MAXI_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ARUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RVALID : IN STD_LOGIC;
    m_axi_MAXI_RREADY : OUT STD_LOGIC;
    m_axi_MAXI_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_RLAST : IN STD_LOGIC;
    m_axi_MAXI_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_RUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BVALID : IN STD_LOGIC;
    m_axi_MAXI_BREADY : OUT STD_LOGIC;
    m_axi_MAXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of toplevel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "toplevel,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.739000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=8,HLS_SYN_FF=2267,HLS_SYN_LUT=4445,HLS_VERSION=2018_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_69C : STD_LOGIC_VECTOR (11 downto 0) := "011010011100";
    constant ap_const_lv11_697 : STD_LOGIC_VECTOR (10 downto 0) := "11010010111";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv12_697 : STD_LOGIC_VECTOR (11 downto 0) := "011010010111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_const_lv45_1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_const_lv45_2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal ram : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_r_0_vld_reg : STD_LOGIC := '0';
    signal length_r_0_ack_out : STD_LOGIC;
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal height_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal height_0_vld_reg : STD_LOGIC := '0';
    signal height_0_ack_out : STD_LOGIC;
    signal version_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal version_1_vld_reg : STD_LOGIC := '0';
    signal version_1_vld_in : STD_LOGIC;
    signal version_1_ack_in : STD_LOGIC;
    signal sectionData_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sectionData_ce0 : STD_LOGIC;
    signal sectionData_we0 : STD_LOGIC;
    signal sectionData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sectionData_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sectionData_ce1 : STD_LOGIC;
    signal sectionData_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOfPixelsVisted : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal visited_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal visited_ce0 : STD_LOGIC;
    signal visited_we0 : STD_LOGIC;
    signal visited_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal visited_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal visited_ce1 : STD_LOGIC;
    signal visited_we1 : STD_LOGIC;
    signal visited_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal visited_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal MAXI_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_1740 : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_AWREADY : STD_LOGIC;
    signal MAXI_WREADY : STD_LOGIC;
    signal MAXI_ARVALID : STD_LOGIC;
    signal MAXI_ARREADY : STD_LOGIC;
    signal MAXI_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_RVALID : STD_LOGIC;
    signal MAXI_RREADY : STD_LOGIC;
    signal MAXI_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_RLAST : STD_LOGIC;
    signal MAXI_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BVALID : STD_LOGIC;
    signal MAXI_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_309 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_reg_309_pp0_iter1_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state12_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_reg_365 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_i_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_V_1_i_reg_387 : STD_LOGIC_VECTOR (11 downto 0);
    signal agg_result_V_load_i_reg_399 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_i_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ram1_reg_1694 : STD_LOGIC_VECTOR (29 downto 0);
    signal length_read_reg_1699 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal height_read_reg_1705 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1713 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1718 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_add_i32_shr_reg_1723 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sig_ioackin_MAXI_ARREADY : STD_LOGIC;
    signal exitcond_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1740_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_482_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next_reg_1744 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal MAXI_addr_read_reg_1749 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_499_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_reg_1767 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal bound_fu_508_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_1773 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next1_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next1_reg_1782 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal y_mid2_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_mid2_reg_1787 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten1_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_cast_mid2_v_fu_549_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_cast_mid2_v_reg_1792 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_557_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_reg_1797 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_fu_561_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_reg_1802 : STD_LOGIC_VECTOR (12 downto 0);
    signal current_V_fu_573_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of current_V_fu_573_p2 : signal is "no";
    signal current_V_reg_1811 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_13_fu_578_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_reg_1816 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_reg_1821 : STD_LOGIC_VECTOR (10 downto 0);
    signal gepindex164_cast_reg_1826 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_33_fu_638_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_reg_1836 : STD_LOGIC_VECTOR (1 downto 0);
    signal cast_gep_index73_cas_reg_1841 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_51_fu_658_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_51_reg_1847 : STD_LOGIC_VECTOR (1 downto 0);
    signal cast_gep_index78_cas_reg_1852 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_fu_751_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_reg_1858 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_29_fu_761_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_1863 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_827_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_reg_1878 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_44_fu_910_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_reg_1886 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_fu_920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_reg_1891 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_1005_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_62_reg_1896 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_fu_1015_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_reg_1901 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_1035_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_reg_1906 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_68_fu_1053_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_reg_1914 : STD_LOGIC_VECTOR (7 downto 0);
    signal numberOfPixelsVisted_1_reg_1922 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1930 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_fu_1066_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_1934 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_i_fu_1088_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_i_reg_1939 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_i_i_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_1959 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_9_fu_1125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_9_reg_1964 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_cast_fu_1165_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_2_cast_reg_1972 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal exitcond_flatten_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1977 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state28_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_1977_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1977_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1977_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_1215_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_29_i_mid2_v_fu_1240_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_i_mid2_v_reg_1986 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_fu_1248_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_69_reg_1991 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_70_fu_1252_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_70_reg_1996 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_2_fu_1256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_1272_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_72_reg_2006 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_72_reg_2006_pp2_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_74_reg_2011 : STD_LOGIC_VECTOR (10 downto 0);
    signal gepindex_cast_reg_2016 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_92_fu_1306_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_92_reg_2021 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_92_reg_2021_pp2_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal cast_gep_index63_cas_reg_2026 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_85_fu_1449_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_85_reg_2042 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_88_fu_1459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_reg_2047 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_1544_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_103_reg_2052 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_106_fu_1554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_reg_2057 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_agg_result_V_s_fu_1629_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal tmp_36_agg_result_V_1_fu_1637_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_1_fu_1675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state28 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_phi_fu_313_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_flatten1_reg_321 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_354 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal val_assign_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_x_i_phi_fu_380_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal indvar1_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2166_cast_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2178_cast_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2190_cast_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_i_fu_1094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_i_fu_1105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_i_fu_1115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_1169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_1194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_i_fu_1205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_cast_fu_1342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2154_cast_fu_1365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_MAXI_ARREADY : STD_LOGIC := '0';
    signal tmp_6_i_fu_1174_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal modePixel_1_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal modePixel_fu_1661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0113_1_fu_154 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_5_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_add_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_508_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_s_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1680_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_12_fu_568_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal adjSize140_cast_fu_605_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mem_index_gep_fu_608_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal addrCmp_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex_fu_620_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_602_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_fu_632_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_1_fu_652_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal start_pos1_fu_672_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos_fu_679_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_691_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_695_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_709_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_721_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_699_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_715_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_fu_727_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_25_fu_743_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_fu_735_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_757_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_index_gep1_fu_767_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal addrCmp1_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex1_fu_778_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal mem_index_gep2_fu_790_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal addrCmp2_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex3_fu_801_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_fu_813_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_822_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_pos2_fu_831_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos1_fu_838_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_fu_850_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_36_fu_854_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_868_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_40_fu_880_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_fu_858_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_874_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_41_fu_886_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_fu_902_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_894_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_916_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_pos3_fu_926_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos2_fu_933_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_53_fu_945_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_54_fu_949_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_52_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_963_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_58_fu_975_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_fu_953_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_969_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_59_fu_981_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_61_fu_997_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_60_fu_989_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_1011_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_1021_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_1030_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_fu_1039_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_fu_1042_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_fu_1048_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_i_fu_1076_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_i_cast_fu_1084_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_i_cast5_fu_1072_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_i_fu_1099_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_i_fu_1110_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_37_i_i_fu_1130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_i1_fu_1148_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_i1_cast_fu_1155_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_1_cast3_fu_1145_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_2_fu_1159_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_fu_1185_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_3_fu_1188_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_4_fu_1199_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal exitcond2_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_1234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_i_mid2_fu_1226_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1687_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_71_fu_1262_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal current_V_1_fu_1267_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 of current_V_1_fu_1267_p2 : signal is "no";
    signal tmp_73_fu_1276_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_5_fu_1300_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize136_cast_fu_1320_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mem_index_gep3_fu_1323_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal addrCmp3_fu_1329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex2_fu_1335_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal mem_index_gep4_fu_1347_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal addrCmp4_fu_1352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex4_fu_1358_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal start_pos_fu_1370_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos3_fu_1377_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_76_fu_1389_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_77_fu_1393_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_75_fu_1383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_1407_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_81_fu_1419_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_78_fu_1397_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_1413_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_82_fu_1425_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_84_fu_1441_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_83_fu_1433_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_1455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_pos4_fu_1465_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal end_pos4_fu_1472_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_94_fu_1484_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_95_fu_1488_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_93_fu_1478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_1502_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_99_fu_1514_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_96_fu_1492_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_fu_1508_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_100_fu_1520_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_102_fu_1536_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_101_fu_1528_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_fu_1550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_1560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_fu_1563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_fu_1569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_1578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_fu_1581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_fu_1587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_1574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_109_fu_1592_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i1_10_fu_1601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_i_i1_fu_1606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_1611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i1_fu_1596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_fu_1617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_fu_1623_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_1654_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal bound_fu_508_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_508_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component toplevel_mac_mulacud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component toplevel_sectionDbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_visited IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component toplevel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        ram : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        version : IN STD_LOGIC_VECTOR (31 downto 0);
        version_ap_vld : IN STD_LOGIC );
    end component;


    component toplevel_MAXI_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sectionData_U : component toplevel_sectionDbkb
    generic map (
        DataWidth => 32,
        AddressRange => 1688,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sectionData_address0,
        ce0 => sectionData_ce0,
        we0 => sectionData_we0,
        d0 => MAXI_addr_read_reg_1749,
        q0 => sectionData_q0,
        address1 => sectionData_address1,
        ce1 => sectionData_ce1,
        q1 => sectionData_q1);

    visited_U : component toplevel_visited
    generic map (
        DataWidth => 8,
        AddressRange => 6750,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => visited_address0,
        ce0 => visited_ce0,
        we0 => visited_we0,
        d0 => tmp_50_reg_1906,
        q0 => visited_q0,
        address1 => visited_address1,
        ce1 => visited_ce1,
        we1 => visited_we1,
        d1 => visited_d1,
        q1 => visited_q1);

    toplevel_AXILiteS_s_axi_U : component toplevel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        ram => ram,
        length_r => length_r,
        height => height,
        version => version_1_data_reg,
        version_ap_vld => version_1_vld_reg);

    toplevel_MAXI_m_axi_U : component toplevel_MAXI_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MAXI_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MAXI_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MAXI_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MAXI_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MAXI_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MAXI_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MAXI_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MAXI_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MAXI_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MAXI_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MAXI_CACHE_VALUE)
    port map (
        AWVALID => m_axi_MAXI_AWVALID,
        AWREADY => m_axi_MAXI_AWREADY,
        AWADDR => m_axi_MAXI_AWADDR,
        AWID => m_axi_MAXI_AWID,
        AWLEN => m_axi_MAXI_AWLEN,
        AWSIZE => m_axi_MAXI_AWSIZE,
        AWBURST => m_axi_MAXI_AWBURST,
        AWLOCK => m_axi_MAXI_AWLOCK,
        AWCACHE => m_axi_MAXI_AWCACHE,
        AWPROT => m_axi_MAXI_AWPROT,
        AWQOS => m_axi_MAXI_AWQOS,
        AWREGION => m_axi_MAXI_AWREGION,
        AWUSER => m_axi_MAXI_AWUSER,
        WVALID => m_axi_MAXI_WVALID,
        WREADY => m_axi_MAXI_WREADY,
        WDATA => m_axi_MAXI_WDATA,
        WSTRB => m_axi_MAXI_WSTRB,
        WLAST => m_axi_MAXI_WLAST,
        WID => m_axi_MAXI_WID,
        WUSER => m_axi_MAXI_WUSER,
        ARVALID => m_axi_MAXI_ARVALID,
        ARREADY => m_axi_MAXI_ARREADY,
        ARADDR => m_axi_MAXI_ARADDR,
        ARID => m_axi_MAXI_ARID,
        ARLEN => m_axi_MAXI_ARLEN,
        ARSIZE => m_axi_MAXI_ARSIZE,
        ARBURST => m_axi_MAXI_ARBURST,
        ARLOCK => m_axi_MAXI_ARLOCK,
        ARCACHE => m_axi_MAXI_ARCACHE,
        ARPROT => m_axi_MAXI_ARPROT,
        ARQOS => m_axi_MAXI_ARQOS,
        ARREGION => m_axi_MAXI_ARREGION,
        ARUSER => m_axi_MAXI_ARUSER,
        RVALID => m_axi_MAXI_RVALID,
        RREADY => m_axi_MAXI_RREADY,
        RDATA => m_axi_MAXI_RDATA,
        RLAST => m_axi_MAXI_RLAST,
        RID => m_axi_MAXI_RID,
        RUSER => m_axi_MAXI_RUSER,
        RRESP => m_axi_MAXI_RRESP,
        BVALID => m_axi_MAXI_BVALID,
        BREADY => m_axi_MAXI_BREADY,
        BRESP => m_axi_MAXI_BRESP,
        BID => m_axi_MAXI_BID,
        BUSER => m_axi_MAXI_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => MAXI_ARVALID,
        I_ARREADY => MAXI_ARREADY,
        I_ARADDR => MAXI_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => MAXI_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => MAXI_RVALID,
        I_RREADY => MAXI_RREADY,
        I_RDATA => MAXI_RDATA,
        I_RID => MAXI_RID,
        I_RUSER => MAXI_RUSER,
        I_RRESP => MAXI_RRESP,
        I_RLAST => MAXI_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => MAXI_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => MAXI_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => MAXI_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => MAXI_BRESP,
        I_BID => MAXI_BID,
        I_BUSER => MAXI_BUSER);

    toplevel_mac_mulacud_U1 : component toplevel_mac_mulacud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => tmp_9_reg_1802,
        din1 => tmp_6_reg_1767,
        din2 => tmp_8_reg_1797,
        dout => grp_fu_1680_p3);

    toplevel_mac_mulacud_U2 : component toplevel_mac_mulacud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => tmp_6_reg_1767,
        din1 => tmp_70_reg_1996,
        din2 => tmp_69_reg_1991,
        dout => grp_fu_1687_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state28);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_MAXI_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    if ((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = MAXI_ARREADY)) then 
                        ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_1_i_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1977_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
                agg_result_V_1_i_reg_387 <= tmp_36_agg_result_V_s_fu_1629_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                agg_result_V_1_i_reg_387 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    agg_result_V_load_i_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1977_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
                agg_result_V_load_i_reg_399 <= tmp_36_agg_result_V_1_fu_1637_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                agg_result_V_load_i_reg_399 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    height_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_i_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1930 = ap_const_lv1_1) and (val_assign_fu_1140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_i_reg_354 <= i_reg_1934;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_i_reg_354 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                indvar_flatten1_reg_321 <= indvar_flatten_next1_reg_1782;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten1_reg_321 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_1210_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_365 <= indvar_flatten_next_fu_1215_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                indvar_flatten_reg_365 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1740 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_reg_309 <= indvar_next_reg_1744;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_reg_309 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    length_r_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    numberOfPixelsVisted_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                numberOfPixelsVisted <= tmp_6_i_fu_1174_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                numberOfPixelsVisted <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_0113_1_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_fu_1648_p2 = ap_const_lv1_0) and (tmp_i_reg_1930 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                p_0113_1_fu_154 <= agg_result_V_1_i_reg_387;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p_0113_1_fu_154 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    version_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (version_1_vld_reg = ap_const_logic_0) and (version_1_vld_in = ap_const_logic_1))) then 
                version_1_vld_reg <= ap_const_logic_1;
            elsif (((version_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1))) then 
                version_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    x_i_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1977 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                x_i_reg_376 <= tmp_29_i_mid2_v_reg_1986;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                x_i_reg_376 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                x_reg_332 <= x_cast_mid2_v_reg_1792;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                x_reg_332 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_i_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_1210_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                y_i_reg_411 <= y_2_fu_1256_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                y_i_reg_411 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                y_reg_343 <= y_1_fu_1675_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                y_reg_343 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1740 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                MAXI_addr_read_reg_1749 <= MAXI_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_fu_519_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_return(23 downto 0) <= modePixel_1_fu_150(23 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                bound_reg_1773 <= bound_fu_508_p2;
                tmp_6_reg_1767 <= tmp_6_fu_499_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1977 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                cast_gep_index63_cas_reg_2026 <= r_V_5_fu_1300_p2(13 downto 2);
                gepindex_cast_reg_2016 <= current_V_1_fu_1267_p2(12 downto 2);
                tmp_72_reg_2006 <= tmp_72_fu_1272_p1;
                tmp_74_reg_2011 <= current_V_1_fu_1267_p2(12 downto 2);
                tmp_92_reg_2021 <= tmp_92_fu_1306_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                cast_gep_index73_cas_reg_1841 <= r_V_fu_632_p2(13 downto 2);
                cast_gep_index78_cas_reg_1852 <= r_V_1_fu_652_p2(13 downto 2);
                tmp_33_reg_1836 <= tmp_33_fu_638_p1;
                tmp_51_reg_1847 <= tmp_51_fu_658_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                current_V_reg_1811 <= current_V_fu_573_p2;
                gepindex164_cast_reg_1826 <= current_V_fu_573_p2(12 downto 2);
                tmp_13_reg_1816 <= tmp_13_fu_578_p1;
                tmp_15_reg_1821 <= current_V_fu_573_p2(12 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond_flatten_reg_1977 <= exitcond_flatten_fu_1210_p2;
                exitcond_flatten_reg_1977_pp2_iter1_reg <= exitcond_flatten_reg_1977;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                exitcond_flatten_reg_1977_pp2_iter2_reg <= exitcond_flatten_reg_1977_pp2_iter1_reg;
                exitcond_flatten_reg_1977_pp2_iter3_reg <= exitcond_flatten_reg_1977_pp2_iter2_reg;
                tmp_72_reg_2006_pp2_iter2_reg <= tmp_72_reg_2006;
                tmp_92_reg_2021_pp2_iter2_reg <= tmp_92_reg_2021;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_1740 <= exitcond_fu_477_p2;
                exitcond_reg_1740_pp0_iter1_reg <= exitcond_reg_1740;
                indvar_reg_309_pp0_iter1_reg <= indvar_reg_309;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (height_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (height_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (height_0_vld_reg = ap_const_logic_1)))) then
                height_0_data_reg <= height;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                height_read_reg_1705 <= height_0_data_reg;
                length_read_reg_1699 <= length_r_0_data_reg;
                tmp_reg_1713 <= tmp_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_reg_1934 <= i_fu_1066_p2;
                tmp_i_reg_1930 <= tmp_i_fu_1061_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                indvar_flatten_next1_reg_1782 <= indvar_flatten_next1_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_next_reg_1744 <= indvar_next_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (length_r_0_vld_reg = ap_const_logic_1)))) then
                length_r_0_data_reg <= length_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_fu_1648_p2 = ap_const_lv1_0) and (tmp_i_reg_1930 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    modePixel_1_fu_150(23 downto 0) <= modePixel_fu_1661_p1(23 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                numberOfPixelsVisted_1_reg_1922 <= numberOfPixelsVisted;
                tmp_50_reg_1906 <= tmp_50_fu_1035_p1;
                tmp_68_reg_1914 <= tmp_68_fu_1053_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_add_i32_shr_reg_1723 <= p_add_fu_448_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                r_V_2_cast_reg_1972 <= r_V_2_cast_fu_1165_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ram1_reg_1694 <= ram(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1977_pp2_iter2_reg = ap_const_lv1_0))) then
                    tmp_103_reg_2052(5 downto 1) <= tmp_103_fu_1544_p2(5 downto 1);
                tmp_106_reg_2057 <= tmp_106_fu_1554_p2;
                    tmp_85_reg_2042(5 downto 1) <= tmp_85_fu_1449_p2(5 downto 1);
                tmp_88_reg_2047 <= tmp_88_fu_1459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_1061_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                tmp_21_i_reg_1939 <= tmp_21_i_fu_1088_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    tmp_26_reg_1858(5 downto 1) <= tmp_26_fu_751_p2(5 downto 1);
                tmp_29_reg_1863 <= tmp_29_fu_761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_1210_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_29_i_mid2_v_reg_1986 <= tmp_29_i_mid2_v_fu_1240_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_32_reg_1878 <= tmp_32_fu_827_p1;
                    tmp_44_reg_1886(5 downto 1) <= tmp_44_fu_910_p2(5 downto 1);
                tmp_47_reg_1891 <= tmp_47_fu_920_p2;
                    tmp_62_reg_1896(5 downto 1) <= tmp_62_fu_1005_p2(5 downto 1);
                tmp_65_reg_1901 <= tmp_65_fu_1015_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_1210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_69_reg_1991 <= tmp_69_fu_1248_p1;
                tmp_70_reg_1996 <= tmp_70_fu_1252_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_7_reg_1718 <= tmp_7_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_fu_519_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                tmp_8_reg_1797 <= tmp_8_fu_557_p1;
                tmp_9_reg_1802 <= tmp_9_fu_561_p1;
                x_cast_mid2_v_reg_1792 <= x_cast_mid2_v_fu_549_p3;
                y_mid2_reg_1787 <= y_mid2_fu_535_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1930 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                tmp_i_i_9_reg_1964 <= tmp_i_i_9_fu_1125_p2;
                tmp_i_i_reg_1959 <= tmp_i_i_fu_1120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (version_1_vld_reg = ap_const_logic_0) and (version_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_in = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1)))) then
                version_1_data_reg(0) <= '1';
            end if;
        end if;
    end process;
    version_1_data_reg(31 downto 1) <= "0000000000000000000000000000000";
    ap_return(31 downto 24) <= "00000000";
    tmp_26_reg_1858(0) <= '0';
    tmp_44_reg_1886(0) <= '0';
    tmp_62_reg_1896(0) <= '0';
    tmp_85_reg_2042(0) <= '0';
    tmp_103_reg_2052(0) <= '0';
    modePixel_1_fu_150(31 downto 24) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, version_1_ack_in, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1, ap_sig_ioackin_MAXI_ARREADY, exitcond_fu_477_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, exitcond_flatten1_fu_519_p2, tmp_i_reg_1930, exitcond_flatten_fu_1210_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, ap_CS_fsm_state24, val_assign_fu_1140_p2, ap_CS_fsm_state34)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_477_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_477_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((exitcond_flatten1_fu_519_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((tmp_i_reg_1930 = ap_const_lv1_1) and (val_assign_fu_1140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                elsif (((tmp_i_reg_1930 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond_flatten_fu_1210_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond_flatten_fu_1210_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (version_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    MAXI_ARADDR <= tmp_1_fu_463_p1(32 - 1 downto 0);
    MAXI_ARLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_add_i32_shr_reg_1723),32));

    MAXI_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_reg_ioackin_MAXI_ARREADY)
    begin
        if (((ap_reg_ioackin_MAXI_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            MAXI_ARVALID <= ap_const_logic_1;
        else 
            MAXI_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_1740, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1740 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MAXI_RREADY <= ap_const_logic_1;
        else 
            MAXI_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_blk_n_AR_assign_proc : process(m_axi_MAXI_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            MAXI_blk_n_AR <= m_axi_MAXI_ARREADY;
        else 
            MAXI_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_R_assign_proc : process(m_axi_MAXI_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_1740)
    begin
        if (((exitcond_reg_1740 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MAXI_blk_n_R <= m_axi_MAXI_RVALID;
        else 
            MAXI_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    addrCmp1_fu_772_p2 <= "1" when (unsigned(mem_index_gep1_fu_767_p2) < unsigned(ap_const_lv12_69C)) else "0";
    addrCmp2_fu_795_p2 <= "1" when (unsigned(mem_index_gep2_fu_790_p2) < unsigned(ap_const_lv12_69C)) else "0";
    addrCmp3_fu_1329_p2 <= "1" when (unsigned(mem_index_gep3_fu_1323_p2) < unsigned(ap_const_lv12_69C)) else "0";
    addrCmp4_fu_1352_p2 <= "1" when (unsigned(mem_index_gep4_fu_1347_p2) < unsigned(ap_const_lv12_69C)) else "0";
    addrCmp_fu_614_p2 <= "1" when (unsigned(mem_index_gep_fu_608_p2) < unsigned(ap_const_lv12_69C)) else "0";
    adjSize136_cast_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_reg_2011),12));
    adjSize140_cast_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_1821),12));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(26);
    ap_CS_fsm_state34 <= ap_CS_fsm(27);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1740, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = MAXI_RVALID) and (exitcond_reg_1740 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1740, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = MAXI_RVALID) and (exitcond_reg_1740 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter1_assign_proc : process(exitcond_reg_1740, MAXI_RVALID)
    begin
                ap_block_state13_pp0_stage0_iter1 <= ((ap_const_logic_0 = MAXI_RVALID) and (exitcond_reg_1740 = ap_const_lv1_0));
    end process;

        ap_block_state14_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state12_assign_proc : process(exitcond_fu_477_p2)
    begin
        if ((exitcond_fu_477_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state28_assign_proc : process(exitcond_flatten_fu_1210_p2)
    begin
        if ((exitcond_flatten_fu_1210_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(version_1_ack_in, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (version_1_ack_in = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_313_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_1740, indvar_reg_309, indvar_next_reg_1744)
    begin
        if (((exitcond_reg_1740 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_phi_fu_313_p4 <= indvar_next_reg_1744;
        else 
            ap_phi_mux_indvar_phi_fu_313_p4 <= indvar_reg_309;
        end if; 
    end process;


    ap_phi_mux_x_i_phi_fu_380_p4_assign_proc : process(x_i_reg_376, exitcond_flatten_reg_1977, ap_CS_fsm_pp2_stage0, tmp_29_i_mid2_v_reg_1986, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond_flatten_reg_1977 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_x_i_phi_fu_380_p4 <= tmp_29_i_mid2_v_reg_1986;
        else 
            ap_phi_mux_x_i_phi_fu_380_p4 <= x_i_reg_376;
        end if; 
    end process;


    ap_ready_assign_proc : process(version_1_ack_in, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (version_1_ack_in = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_MAXI_ARREADY_assign_proc : process(MAXI_ARREADY, ap_reg_ioackin_MAXI_ARREADY)
    begin
        if ((ap_reg_ioackin_MAXI_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_MAXI_ARREADY <= MAXI_ARREADY;
        else 
            ap_sig_ioackin_MAXI_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    bound_fu_508_p0 <= bound_fu_508_p00(32 - 1 downto 0);
    bound_fu_508_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_read_reg_1705),64));
    bound_fu_508_p1 <= bound_fu_508_p10(32 - 1 downto 0);
    bound_fu_508_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_read_reg_1699),64));
    bound_fu_508_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_508_p0) * unsigned(bound_fu_508_p1), 64));
    current_V_1_fu_1267_p2 <= std_logic_vector(unsigned(tmp_71_fu_1262_p2) - unsigned(grp_fu_1687_p3));
    current_V_fu_573_p2 <= std_logic_vector(unsigned(tmp_12_fu_568_p2) - unsigned(grp_fu_1680_p3));
    end_pos1_fu_838_p2 <= (start_pos2_fu_831_p3 or ap_const_lv5_7);
    end_pos2_fu_933_p2 <= (start_pos3_fu_926_p3 or ap_const_lv5_7);
    end_pos3_fu_1377_p2 <= (start_pos_fu_1370_p3 or ap_const_lv5_7);
    end_pos4_fu_1472_p2 <= (start_pos4_fu_1465_p3 or ap_const_lv5_7);
    end_pos_fu_679_p2 <= (start_pos1_fu_672_p3 or ap_const_lv5_7);
    exitcond1_fu_530_p2 <= "0" when (y_reg_343 = height_read_reg_1705) else "1";
    exitcond2_fu_1221_p2 <= "0" when (y_i_reg_411 = height_read_reg_1705) else "1";
    exitcond_flatten1_fu_519_p2 <= "1" when (indvar_flatten1_reg_321 = bound_reg_1773) else "0";
    exitcond_flatten_fu_1210_p2 <= "1" when (indvar_flatten_reg_365 = bound_reg_1773) else "0";
    exitcond_fu_477_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_313_p4 = p_add_i32_shr_reg_1723) else "0";
    gepindex1_fu_778_p3 <= 
        cast_gep_index73_cas_reg_1841 when (addrCmp1_fu_772_p2(0) = '1') else 
        ap_const_lv12_697;
    gepindex2154_cast_fu_1365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex4_fu_1358_p3),64));
    gepindex2166_cast_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex_fu_620_p3),64));
    gepindex2178_cast_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex1_fu_778_p3),64));
    gepindex2190_cast_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex3_fu_801_p3),64));
    gepindex2_cast_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex2_fu_1335_p3),64));
    gepindex2_fu_1335_p3 <= 
        gepindex_cast_reg_2016 when (addrCmp3_fu_1329_p2(0) = '1') else 
        ap_const_lv11_697;
    gepindex3_fu_801_p3 <= 
        cast_gep_index78_cas_reg_1852 when (addrCmp2_fu_795_p2(0) = '1') else 
        ap_const_lv12_697;
    gepindex4_fu_1358_p3 <= 
        cast_gep_index63_cas_reg_2026 when (addrCmp4_fu_1352_p2(0) = '1') else 
        ap_const_lv12_697;
    gepindex_fu_620_p3 <= 
        gepindex164_cast_reg_1826 when (addrCmp_fu_614_p2(0) = '1') else 
        ap_const_lv11_697;

    height_0_ack_out_assign_proc : process(version_1_ack_in, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (version_1_ack_in = ap_const_logic_1))) then 
            height_0_ack_out <= ap_const_logic_1;
        else 
            height_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_1066_p2 <= std_logic_vector(unsigned(i_i_reg_354) + unsigned(ap_const_lv12_1));
    i_i_cast5_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_354),15));
    indvar1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_309_pp0_iter1_reg),64));
    indvar_flatten_next1_fu_524_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_321) + unsigned(ap_const_lv64_1));
    indvar_flatten_next_fu_1215_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_365) + unsigned(ap_const_lv64_1));
    indvar_next_fu_482_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_313_p4) + unsigned(ap_const_lv30_1));

    length_r_0_ack_out_assign_proc : process(version_1_ack_in, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (version_1_ack_in = ap_const_logic_1))) then 
            length_r_0_ack_out <= ap_const_logic_1;
        else 
            length_r_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_cast3_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(numberOfPixelsVisted_1_reg_1922),15));
    lhs_V_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_cast_reg_1972),45));
    mem_index_gep1_fu_767_p2 <= std_logic_vector(unsigned(ap_const_lv12_4) + unsigned(cast_gep_index73_cas_reg_1841));
    mem_index_gep2_fu_790_p2 <= std_logic_vector(unsigned(ap_const_lv12_4) + unsigned(cast_gep_index78_cas_reg_1852));
    mem_index_gep3_fu_1323_p2 <= std_logic_vector(unsigned(ap_const_lv12_4) + unsigned(adjSize136_cast_fu_1320_p1));
    mem_index_gep4_fu_1347_p2 <= std_logic_vector(unsigned(ap_const_lv12_4) + unsigned(cast_gep_index63_cas_reg_2026));
    mem_index_gep_fu_608_p2 <= std_logic_vector(unsigned(ap_const_lv12_4) + unsigned(adjSize140_cast_fu_605_p1));
    modePixel_fu_1661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1654_p4),32));
    p_add_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(tmp_7_reg_1718));
    p_shl_i1_cast_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i1_fu_1148_p3),15));
    p_shl_i1_fu_1148_p3 <= (numberOfPixelsVisted_1_reg_1922 & ap_const_lv2_0);
    p_shl_i_cast_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_1076_p3),15));
    p_shl_i_fu_1076_p3 <= (i_i_reg_354 & ap_const_lv2_0);
    r_V_1_fu_652_p2 <= std_logic_vector(unsigned(ap_const_lv14_2) + unsigned(tmp_14_fu_602_p1));
        r_V_2_cast_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_fu_1159_p2),44));

    r_V_2_fu_1159_p2 <= std_logic_vector(unsigned(p_shl_i1_cast_fu_1155_p1) - unsigned(lhs_V_1_cast3_fu_1145_p1));
    r_V_3_fu_1188_p2 <= std_logic_vector(unsigned(lhs_V_fu_1185_p1) + unsigned(ap_const_lv45_1));
    r_V_4_fu_1199_p2 <= std_logic_vector(unsigned(lhs_V_fu_1185_p1) + unsigned(ap_const_lv45_2));
    r_V_5_fu_1300_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(tmp_73_fu_1276_p1));
    r_V_fu_632_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(tmp_14_fu_602_p1));
    result_V_fu_1623_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(agg_result_V_load_i_reg_399));

    sectionData_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, indvar1_fu_488_p1, gepindex2166_cast_fu_627_p1, gepindex2178_cast_fu_785_p1, gepindex2154_cast_fu_1365_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            sectionData_address0 <= gepindex2154_cast_fu_1365_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sectionData_address0 <= gepindex2178_cast_fu_785_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sectionData_address0 <= gepindex2166_cast_fu_627_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sectionData_address0 <= indvar1_fu_488_p1(11 - 1 downto 0);
        else 
            sectionData_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sectionData_address1_assign_proc : process(ap_CS_fsm_state19, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, gepindex2190_cast_fu_808_p1, gepindex2_cast_fu_1342_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            sectionData_address1 <= gepindex2_cast_fu_1342_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sectionData_address1 <= gepindex2190_cast_fu_808_p1(11 - 1 downto 0);
        else 
            sectionData_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sectionData_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            sectionData_ce0 <= ap_const_logic_1;
        else 
            sectionData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sectionData_ce1_assign_proc : process(ap_CS_fsm_state19, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            sectionData_ce1 <= ap_const_logic_1;
        else 
            sectionData_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sectionData_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_reg_1740_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1740_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sectionData_we0 <= ap_const_logic_1;
        else 
            sectionData_we0 <= ap_const_logic_0;
        end if; 
    end process;

    start_pos1_fu_672_p3 <= (tmp_13_reg_1816 & ap_const_lv3_0);
    start_pos2_fu_831_p3 <= (tmp_33_reg_1836 & ap_const_lv3_0);
    start_pos3_fu_926_p3 <= (tmp_51_reg_1847 & ap_const_lv3_0);
    start_pos4_fu_1465_p3 <= (tmp_92_reg_2021_pp2_iter2_reg & ap_const_lv3_0);
    start_pos_fu_1370_p3 <= (tmp_72_reg_2006_pp2_iter2_reg & ap_const_lv3_0);
    tmp1_fu_1135_p2 <= (tmp_i_i_9_reg_1964 and tmp_37_i_i_fu_1130_p2);
    tmp2_fu_1611_p2 <= (tmp_i_i1_10_fu_1601_p2 and tmp_37_i_i1_fu_1606_p2);
    tmp_100_fu_1520_p3 <= 
        tmp_97_fu_1502_p2 when (tmp_93_fu_1478_p2(0) = '1') else 
        tmp_99_fu_1514_p2;
    tmp_101_fu_1528_p3 <= 
        tmp_96_fu_1492_p4 when (tmp_93_fu_1478_p2(0) = '1') else 
        sectionData_q0;
    tmp_102_fu_1536_p3 <= 
        tmp_98_fu_1508_p2 when (tmp_93_fu_1478_p2(0) = '1') else 
        tmp_94_fu_1484_p1;
    tmp_103_fu_1544_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_100_fu_1520_p3));
    tmp_104_fu_1550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_1536_p3),32));
    tmp_105_fu_1578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_reg_2052),32));
    tmp_106_fu_1554_p2 <= std_logic_vector(shift_right(unsigned(tmp_101_fu_1528_p3),to_integer(unsigned('0' & tmp_104_fu_1550_p1(31-1 downto 0)))));
    tmp_107_fu_1581_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_105_fu_1578_p1(31-1 downto 0)))));
    tmp_108_fu_1587_p2 <= (tmp_107_fu_1581_p2 and tmp_106_reg_2057);
    tmp_109_fu_1592_p1 <= tmp_108_fu_1587_p2(8 - 1 downto 0);
    tmp_10_fu_1648_p2 <= "1" when (unsigned(agg_result_V_1_i_reg_387) < unsigned(p_0113_1_fu_154)) else "0";
    tmp_11_fu_1654_p4 <= ((tmp_68_reg_1914 & tmp_50_reg_1906) & tmp_32_reg_1878);
    tmp_12_fu_568_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_1680_p3),to_integer(unsigned('0' & ap_const_lv13_2(13-1 downto 0)))));
    tmp_13_fu_578_p1 <= current_V_fu_573_p2(2 - 1 downto 0);
    tmp_14_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_V_reg_1811),14));
    tmp_16_fu_685_p2 <= "1" when (unsigned(start_pos1_fu_672_p3) > unsigned(end_pos_fu_679_p2)) else "0";
    tmp_17_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos1_fu_672_p3),6));
    tmp_18_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos_fu_679_p2),6));
    
    tmp_19_fu_699_p4_proc : process(sectionData_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_19_fu_699_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sectionData_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_19_fu_699_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_19_fu_699_p4_i) := sectionData_q0(32-1-tmp_19_fu_699_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_19_fu_699_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_1_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram1_reg_1694),64));
    tmp_20_fu_709_p2 <= std_logic_vector(unsigned(tmp_17_fu_691_p1) - unsigned(tmp_18_fu_695_p1));
    tmp_21_fu_715_p2 <= (tmp_17_fu_691_p1 xor ap_const_lv6_1F);
    tmp_21_i_fu_1088_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_1084_p1) - unsigned(i_i_cast5_fu_1072_p1));
    tmp_22_fu_721_p2 <= std_logic_vector(unsigned(tmp_18_fu_695_p1) - unsigned(tmp_17_fu_691_p1));
        tmp_22_i_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_i_fu_1088_p2),64));

    tmp_23_fu_727_p3 <= 
        tmp_20_fu_709_p2 when (tmp_16_fu_685_p2(0) = '1') else 
        tmp_22_fu_721_p2;
    tmp_23_i_fu_1099_p2 <= std_logic_vector(signed(tmp_21_i_fu_1088_p2) + signed(ap_const_lv15_1));
    tmp_24_fu_735_p3 <= 
        tmp_19_fu_699_p4 when (tmp_16_fu_685_p2(0) = '1') else 
        sectionData_q0;
        tmp_24_i_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_i_fu_1099_p2),64));

    tmp_25_fu_743_p3 <= 
        tmp_21_fu_715_p2 when (tmp_16_fu_685_p2(0) = '1') else 
        tmp_17_fu_691_p1;
    tmp_25_i_fu_1110_p2 <= std_logic_vector(signed(tmp_21_i_reg_1939) + signed(ap_const_lv15_2));
    tmp_26_fu_751_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_23_fu_727_p3));
        tmp_26_i_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_i_fu_1110_p2),64));

    tmp_27_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_743_p3),32));
    tmp_28_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_1858),32));
    tmp_29_fu_761_p2 <= std_logic_vector(shift_right(unsigned(tmp_24_fu_735_p3),to_integer(unsigned('0' & tmp_27_fu_757_p1(31-1 downto 0)))));
    tmp_29_i_mid2_v_fu_1240_p3 <= 
        ap_phi_mux_x_i_phi_fu_380_p4 when (exitcond2_fu_1221_p2(0) = '1') else 
        x_1_fu_1234_p2;
    tmp_30_fu_816_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_28_fu_813_p1(31-1 downto 0)))));
    tmp_31_fu_822_p2 <= (tmp_30_fu_816_p2 and tmp_29_reg_1863);
    tmp_32_fu_827_p1 <= tmp_31_fu_822_p2(8 - 1 downto 0);
    tmp_33_fu_638_p1 <= r_V_fu_632_p2(2 - 1 downto 0);
    tmp_34_fu_844_p2 <= "1" when (unsigned(start_pos2_fu_831_p3) > unsigned(end_pos1_fu_838_p2)) else "0";
    tmp_35_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos2_fu_831_p3),6));
    tmp_36_agg_result_V_1_fu_1637_p3 <= 
        result_V_fu_1623_p2 when (val_assign_1_fu_1617_p2(0) = '1') else 
        agg_result_V_load_i_reg_399;
    tmp_36_agg_result_V_s_fu_1629_p3 <= 
        result_V_fu_1623_p2 when (val_assign_1_fu_1617_p2(0) = '1') else 
        agg_result_V_1_i_reg_387;
    tmp_36_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos1_fu_838_p2),6));
    
    tmp_37_fu_858_p4_proc : process(sectionData_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_37_fu_858_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sectionData_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_37_fu_858_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_37_fu_858_p4_i) := sectionData_q0(32-1-tmp_37_fu_858_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_37_fu_858_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_37_i_i1_fu_1606_p2 <= "1" when (tmp_109_fu_1592_p1 = tmp_68_reg_1914) else "0";
    tmp_37_i_i_fu_1130_p2 <= "1" when (tmp_68_reg_1914 = visited_q0) else "0";
    tmp_38_fu_868_p2 <= std_logic_vector(unsigned(tmp_35_fu_850_p1) - unsigned(tmp_36_fu_854_p1));
    tmp_39_fu_874_p2 <= (tmp_35_fu_850_p1 xor ap_const_lv6_1F);
    tmp_3_i_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_fu_1188_p2),64));
    tmp_40_fu_880_p2 <= std_logic_vector(unsigned(tmp_36_fu_854_p1) - unsigned(tmp_35_fu_850_p1));
    tmp_41_fu_886_p3 <= 
        tmp_38_fu_868_p2 when (tmp_34_fu_844_p2(0) = '1') else 
        tmp_40_fu_880_p2;
    tmp_42_fu_894_p3 <= 
        tmp_37_fu_858_p4 when (tmp_34_fu_844_p2(0) = '1') else 
        sectionData_q0;
    tmp_43_fu_902_p3 <= 
        tmp_39_fu_874_p2 when (tmp_34_fu_844_p2(0) = '1') else 
        tmp_35_fu_850_p1;
    tmp_44_fu_910_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_41_fu_886_p3));
    tmp_45_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_902_p3),32));
    tmp_46_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_reg_1886),32));
    tmp_47_fu_920_p2 <= std_logic_vector(shift_right(unsigned(tmp_42_fu_894_p3),to_integer(unsigned('0' & tmp_45_fu_916_p1(31-1 downto 0)))));
    tmp_48_fu_1024_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_46_fu_1021_p1(31-1 downto 0)))));
    tmp_49_fu_1030_p2 <= (tmp_48_fu_1024_p2 and tmp_47_reg_1891);
    tmp_50_fu_1035_p1 <= tmp_49_fu_1030_p2(8 - 1 downto 0);
    tmp_51_fu_658_p1 <= r_V_1_fu_652_p2(2 - 1 downto 0);
    tmp_52_fu_939_p2 <= "1" when (unsigned(start_pos3_fu_926_p3) > unsigned(end_pos2_fu_933_p2)) else "0";
    tmp_53_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos3_fu_926_p3),6));
    tmp_54_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos2_fu_933_p2),6));
    
    tmp_55_fu_953_p4_proc : process(sectionData_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_55_fu_953_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sectionData_q1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_55_fu_953_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_55_fu_953_p4_i) := sectionData_q1(32-1-tmp_55_fu_953_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_55_fu_953_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_56_fu_963_p2 <= std_logic_vector(unsigned(tmp_53_fu_945_p1) - unsigned(tmp_54_fu_949_p1));
    tmp_57_fu_969_p2 <= (tmp_53_fu_945_p1 xor ap_const_lv6_1F);
    tmp_58_fu_975_p2 <= std_logic_vector(unsigned(tmp_54_fu_949_p1) - unsigned(tmp_53_fu_945_p1));
    tmp_59_fu_981_p3 <= 
        tmp_56_fu_963_p2 when (tmp_52_fu_939_p2(0) = '1') else 
        tmp_58_fu_975_p2;
    tmp_5_fu_432_p2 <= std_logic_vector(shift_left(unsigned(length_r_0_data_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_5_i_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_1199_p2),64));
    tmp_60_fu_989_p3 <= 
        tmp_55_fu_953_p4 when (tmp_52_fu_939_p2(0) = '1') else 
        sectionData_q1;
    tmp_61_fu_997_p3 <= 
        tmp_57_fu_969_p2 when (tmp_52_fu_939_p2(0) = '1') else 
        tmp_53_fu_945_p1;
    tmp_62_fu_1005_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_59_fu_981_p3));
    tmp_63_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_997_p3),32));
    tmp_64_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_reg_1896),32));
    tmp_65_fu_1015_p2 <= std_logic_vector(shift_right(unsigned(tmp_60_fu_989_p3),to_integer(unsigned('0' & tmp_63_fu_1011_p1(31-1 downto 0)))));
    tmp_66_fu_1042_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_64_fu_1039_p1(31-1 downto 0)))));
    tmp_67_fu_1048_p2 <= (tmp_66_fu_1042_p2 and tmp_65_reg_1901);
    tmp_68_fu_1053_p1 <= tmp_67_fu_1048_p2(8 - 1 downto 0);
    tmp_69_fu_1248_p1 <= tmp_29_i_mid2_v_fu_1240_p3(13 - 1 downto 0);
    tmp_6_fu_499_p1 <= length_read_reg_1699(13 - 1 downto 0);
    tmp_6_i_fu_1174_p2 <= std_logic_vector(unsigned(numberOfPixelsVisted_1_reg_1922) + unsigned(ap_const_lv12_1));
    tmp_70_fu_1252_p1 <= y_i_mid2_fu_1226_p3(13 - 1 downto 0);
    tmp_71_fu_1262_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_1687_p3),to_integer(unsigned('0' & ap_const_lv13_2(13-1 downto 0)))));
    tmp_72_fu_1272_p1 <= current_V_1_fu_1267_p2(2 - 1 downto 0);
    tmp_73_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_V_1_fu_1267_p2),14));
    tmp_75_fu_1383_p2 <= "1" when (unsigned(start_pos_fu_1370_p3) > unsigned(end_pos3_fu_1377_p2)) else "0";
    tmp_76_fu_1389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_fu_1370_p3),6));
    tmp_77_fu_1393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos3_fu_1377_p2),6));
    
    tmp_78_fu_1397_p4_proc : process(sectionData_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_78_fu_1397_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sectionData_q1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_78_fu_1397_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_78_fu_1397_p4_i) := sectionData_q1(32-1-tmp_78_fu_1397_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_78_fu_1397_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_79_fu_1407_p2 <= std_logic_vector(unsigned(tmp_76_fu_1389_p1) - unsigned(tmp_77_fu_1393_p1));
    tmp_7_fu_444_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(height_read_reg_1705) * signed(tmp_reg_1713))), 32));
    tmp_80_fu_1413_p2 <= (tmp_76_fu_1389_p1 xor ap_const_lv6_1F);
    tmp_81_fu_1419_p2 <= std_logic_vector(unsigned(tmp_77_fu_1393_p1) - unsigned(tmp_76_fu_1389_p1));
    tmp_82_fu_1425_p3 <= 
        tmp_79_fu_1407_p2 when (tmp_75_fu_1383_p2(0) = '1') else 
        tmp_81_fu_1419_p2;
    tmp_83_fu_1433_p3 <= 
        tmp_78_fu_1397_p4 when (tmp_75_fu_1383_p2(0) = '1') else 
        sectionData_q1;
    tmp_84_fu_1441_p3 <= 
        tmp_80_fu_1413_p2 when (tmp_75_fu_1383_p2(0) = '1') else 
        tmp_76_fu_1389_p1;
    tmp_85_fu_1449_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_82_fu_1425_p3));
    tmp_86_fu_1455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_1441_p3),32));
    tmp_87_fu_1560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_reg_2042),32));
    tmp_88_fu_1459_p2 <= std_logic_vector(shift_right(unsigned(tmp_83_fu_1433_p3),to_integer(unsigned('0' & tmp_86_fu_1455_p1(31-1 downto 0)))));
    tmp_89_fu_1563_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_87_fu_1560_p1(31-1 downto 0)))));
    tmp_8_fu_557_p1 <= x_cast_mid2_v_fu_549_p3(13 - 1 downto 0);
    tmp_90_fu_1569_p2 <= (tmp_89_fu_1563_p2 and tmp_88_reg_2047);
    tmp_91_fu_1574_p1 <= tmp_90_fu_1569_p2(8 - 1 downto 0);
    tmp_92_fu_1306_p1 <= r_V_5_fu_1300_p2(2 - 1 downto 0);
    tmp_93_fu_1478_p2 <= "1" when (unsigned(start_pos4_fu_1465_p3) > unsigned(end_pos4_fu_1472_p2)) else "0";
    tmp_94_fu_1484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos4_fu_1465_p3),6));
    tmp_95_fu_1488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos4_fu_1472_p2),6));
    
    tmp_96_fu_1492_p4_proc : process(sectionData_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_96_fu_1492_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sectionData_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_96_fu_1492_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_96_fu_1492_p4_i) := sectionData_q0(32-1-tmp_96_fu_1492_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_96_fu_1492_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_97_fu_1502_p2 <= std_logic_vector(unsigned(tmp_94_fu_1484_p1) - unsigned(tmp_95_fu_1488_p1));
    tmp_98_fu_1508_p2 <= (tmp_94_fu_1484_p1 xor ap_const_lv6_1F);
    tmp_99_fu_1514_p2 <= std_logic_vector(unsigned(tmp_95_fu_1488_p1) - unsigned(tmp_94_fu_1484_p1));
    tmp_9_fu_561_p1 <= y_mid2_fu_535_p3(13 - 1 downto 0);
    tmp_fu_438_p2 <= std_logic_vector(unsigned(tmp_5_fu_432_p2) - unsigned(length_r_0_data_reg));
    tmp_i1_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_cast_fu_1165_p1),64));
    tmp_i_fu_1061_p2 <= "1" when (unsigned(i_i_reg_354) < unsigned(numberOfPixelsVisted_1_reg_1922)) else "0";
    tmp_i_i1_10_fu_1601_p2 <= "1" when (tmp_109_fu_1592_p1 = tmp_50_reg_1906) else "0";
    tmp_i_i1_fu_1596_p2 <= "1" when (tmp_91_fu_1574_p1 = tmp_32_reg_1878) else "0";
    tmp_i_i_9_fu_1125_p2 <= "1" when (tmp_50_reg_1906 = visited_q1) else "0";
    tmp_i_i_fu_1120_p2 <= "1" when (tmp_32_reg_1878 = visited_q0) else "0";
    val_assign_1_fu_1617_p2 <= (tmp_i_i1_fu_1596_p2 and tmp2_fu_1611_p2);
    val_assign_fu_1140_p2 <= (tmp_i_i_reg_1959 and tmp1_fu_1135_p2);

    version_1_ack_in_assign_proc : process(version_1_vld_reg)
    begin
        if (((version_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1)))) then 
            version_1_ack_in <= ap_const_logic_1;
        else 
            version_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    version_1_vld_in_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            version_1_vld_in <= ap_const_logic_1;
        else 
            version_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    visited_address0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, tmp_22_i_fu_1094_p1, tmp_26_i_fu_1115_p1, tmp_3_i_fu_1194_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            visited_address0 <= tmp_3_i_fu_1194_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            visited_address0 <= tmp_26_i_fu_1115_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            visited_address0 <= tmp_22_i_fu_1094_p1(13 - 1 downto 0);
        else 
            visited_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    visited_address1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state27, tmp_24_i_fu_1105_p1, tmp_i1_fu_1169_p1, tmp_5_i_fu_1205_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            visited_address1 <= tmp_5_i_fu_1205_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            visited_address1 <= tmp_i1_fu_1169_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            visited_address1 <= tmp_24_i_fu_1105_p1(13 - 1 downto 0);
        else 
            visited_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    visited_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            visited_ce0 <= ap_const_logic_1;
        else 
            visited_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    visited_ce1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            visited_ce1 <= ap_const_logic_1;
        else 
            visited_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    visited_d1_assign_proc : process(tmp_32_reg_1878, tmp_68_reg_1914, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            visited_d1 <= tmp_68_reg_1914;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            visited_d1 <= tmp_32_reg_1878;
        else 
            visited_d1 <= "XXXXXXXX";
        end if; 
    end process;


    visited_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            visited_we0 <= ap_const_logic_1;
        else 
            visited_we0 <= ap_const_logic_0;
        end if; 
    end process;


    visited_we1_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            visited_we1 <= ap_const_logic_1;
        else 
            visited_we1 <= ap_const_logic_0;
        end if; 
    end process;

    x_1_fu_1234_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_x_i_phi_fu_380_p4));
    x_cast_mid2_v_fu_549_p3 <= 
        x_reg_332 when (exitcond1_fu_530_p2(0) = '1') else 
        x_s_fu_543_p2;
    x_s_fu_543_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(x_reg_332));
    y_1_fu_1675_p2 <= std_logic_vector(unsigned(y_mid2_reg_1787) + unsigned(ap_const_lv32_1));
    y_2_fu_1256_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(y_i_mid2_fu_1226_p3));
    y_i_mid2_fu_1226_p3 <= 
        y_i_reg_411 when (exitcond2_fu_1221_p2(0) = '1') else 
        ap_const_lv32_0;
    y_mid2_fu_535_p3 <= 
        y_reg_343 when (exitcond1_fu_530_p2(0) = '1') else 
        ap_const_lv32_0;
end behav;
