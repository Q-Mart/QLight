// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="toplevel,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=7.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.705000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=34,HLS_SYN_DSP=13,HLS_SYN_FF=2878,HLS_SYN_LUT=2897,HLS_VERSION=2018_2_1}" *)

module toplevel (
        ap_clk,
        ap_rst_n,
        m_axi_MAXI_AWVALID,
        m_axi_MAXI_AWREADY,
        m_axi_MAXI_AWADDR,
        m_axi_MAXI_AWID,
        m_axi_MAXI_AWLEN,
        m_axi_MAXI_AWSIZE,
        m_axi_MAXI_AWBURST,
        m_axi_MAXI_AWLOCK,
        m_axi_MAXI_AWCACHE,
        m_axi_MAXI_AWPROT,
        m_axi_MAXI_AWQOS,
        m_axi_MAXI_AWREGION,
        m_axi_MAXI_AWUSER,
        m_axi_MAXI_WVALID,
        m_axi_MAXI_WREADY,
        m_axi_MAXI_WDATA,
        m_axi_MAXI_WSTRB,
        m_axi_MAXI_WLAST,
        m_axi_MAXI_WID,
        m_axi_MAXI_WUSER,
        m_axi_MAXI_ARVALID,
        m_axi_MAXI_ARREADY,
        m_axi_MAXI_ARADDR,
        m_axi_MAXI_ARID,
        m_axi_MAXI_ARLEN,
        m_axi_MAXI_ARSIZE,
        m_axi_MAXI_ARBURST,
        m_axi_MAXI_ARLOCK,
        m_axi_MAXI_ARCACHE,
        m_axi_MAXI_ARPROT,
        m_axi_MAXI_ARQOS,
        m_axi_MAXI_ARREGION,
        m_axi_MAXI_ARUSER,
        m_axi_MAXI_RVALID,
        m_axi_MAXI_RREADY,
        m_axi_MAXI_RDATA,
        m_axi_MAXI_RLAST,
        m_axi_MAXI_RID,
        m_axi_MAXI_RUSER,
        m_axi_MAXI_RRESP,
        m_axi_MAXI_BVALID,
        m_axi_MAXI_BREADY,
        m_axi_MAXI_BRESP,
        m_axi_MAXI_BID,
        m_axi_MAXI_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_pp0_stage0 = 32'd4096;
parameter    ap_ST_fsm_state16 = 32'd8192;
parameter    ap_ST_fsm_state17 = 32'd16384;
parameter    ap_ST_fsm_state18 = 32'd32768;
parameter    ap_ST_fsm_state19 = 32'd65536;
parameter    ap_ST_fsm_state20 = 32'd131072;
parameter    ap_ST_fsm_state21 = 32'd262144;
parameter    ap_ST_fsm_state22 = 32'd524288;
parameter    ap_ST_fsm_state23 = 32'd1048576;
parameter    ap_ST_fsm_pp1_stage0 = 32'd2097152;
parameter    ap_ST_fsm_pp1_stage1 = 32'd4194304;
parameter    ap_ST_fsm_pp1_stage2 = 32'd8388608;
parameter    ap_ST_fsm_state28 = 32'd16777216;
parameter    ap_ST_fsm_state29 = 32'd33554432;
parameter    ap_ST_fsm_state30 = 32'd67108864;
parameter    ap_ST_fsm_pp2_stage0 = 32'd134217728;
parameter    ap_ST_fsm_pp2_stage1 = 32'd268435456;
parameter    ap_ST_fsm_state40 = 32'd536870912;
parameter    ap_ST_fsm_state41 = 32'd1073741824;
parameter    ap_ST_fsm_state42 = 32'd2147483648;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MAXI_ID_WIDTH = 1;
parameter    C_M_AXI_MAXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_MAXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MAXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_USER_VALUE = 0;
parameter    C_M_AXI_MAXI_PROT_VALUE = 0;
parameter    C_M_AXI_MAXI_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MAXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_MAXI_AWVALID;
input   m_axi_MAXI_AWREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_AWADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_AWID;
output  [7:0] m_axi_MAXI_AWLEN;
output  [2:0] m_axi_MAXI_AWSIZE;
output  [1:0] m_axi_MAXI_AWBURST;
output  [1:0] m_axi_MAXI_AWLOCK;
output  [3:0] m_axi_MAXI_AWCACHE;
output  [2:0] m_axi_MAXI_AWPROT;
output  [3:0] m_axi_MAXI_AWQOS;
output  [3:0] m_axi_MAXI_AWREGION;
output  [C_M_AXI_MAXI_AWUSER_WIDTH - 1:0] m_axi_MAXI_AWUSER;
output   m_axi_MAXI_WVALID;
input   m_axi_MAXI_WREADY;
output  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_WDATA;
output  [C_M_AXI_MAXI_WSTRB_WIDTH - 1:0] m_axi_MAXI_WSTRB;
output   m_axi_MAXI_WLAST;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_WID;
output  [C_M_AXI_MAXI_WUSER_WIDTH - 1:0] m_axi_MAXI_WUSER;
output   m_axi_MAXI_ARVALID;
input   m_axi_MAXI_ARREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_ARADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_ARID;
output  [7:0] m_axi_MAXI_ARLEN;
output  [2:0] m_axi_MAXI_ARSIZE;
output  [1:0] m_axi_MAXI_ARBURST;
output  [1:0] m_axi_MAXI_ARLOCK;
output  [3:0] m_axi_MAXI_ARCACHE;
output  [2:0] m_axi_MAXI_ARPROT;
output  [3:0] m_axi_MAXI_ARQOS;
output  [3:0] m_axi_MAXI_ARREGION;
output  [C_M_AXI_MAXI_ARUSER_WIDTH - 1:0] m_axi_MAXI_ARUSER;
input   m_axi_MAXI_RVALID;
output   m_axi_MAXI_RREADY;
input  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_RDATA;
input   m_axi_MAXI_RLAST;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_RID;
input  [C_M_AXI_MAXI_RUSER_WIDTH - 1:0] m_axi_MAXI_RUSER;
input  [1:0] m_axi_MAXI_RRESP;
input   m_axi_MAXI_BVALID;
output   m_axi_MAXI_BREADY;
input  [1:0] m_axi_MAXI_BRESP;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_BID;
input  [C_M_AXI_MAXI_BUSER_WIDTH - 1:0] m_axi_MAXI_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] ram;
wire   [31:0] length_r;
reg   [31:0] length_r_0_data_reg;
reg    length_r_0_vld_reg;
reg    length_r_0_ack_out;
wire   [31:0] height;
reg   [31:0] height_0_data_reg;
reg    height_0_vld_reg;
reg    height_0_ack_out;
reg   [31:0] r_1_data_reg;
reg    r_1_vld_reg;
reg    r_1_vld_in;
reg    r_1_ack_in;
reg   [31:0] g_1_data_reg;
reg    g_1_vld_reg;
reg    g_1_vld_in;
reg    g_1_ack_in;
reg   [31:0] b_1_data_reg;
reg    b_1_vld_reg;
reg    b_1_vld_in;
reg    b_1_ack_in;
reg   [12:0] sectionData_address0;
reg    sectionData_ce0;
reg    sectionData_we0;
wire   [31:0] sectionData_q0;
reg   [12:0] sectionData_address1;
reg    sectionData_ce1;
wire   [31:0] sectionData_q1;
reg   [11:0] numberOfPixelsVisted;
reg   [12:0] visited_address0;
reg    visited_ce0;
reg    visited_we0;
wire   [31:0] visited_q0;
reg   [12:0] visited_address1;
reg    visited_ce1;
reg    visited_we1;
reg   [31:0] visited_d1;
wire   [31:0] visited_q1;
wire   [31:0] ap_return;
reg    MAXI_blk_n_AR;
wire    ap_CS_fsm_state6;
reg    MAXI_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_953;
wire    MAXI_AWREADY;
wire    MAXI_WREADY;
reg    MAXI_ARVALID;
wire    MAXI_ARREADY;
wire   [31:0] MAXI_ARADDR;
wire   [31:0] MAXI_ARLEN;
wire    MAXI_RVALID;
reg    MAXI_RREADY;
wire   [31:0] MAXI_RDATA;
wire    MAXI_RLAST;
wire   [0:0] MAXI_RID;
wire   [0:0] MAXI_RUSER;
wire   [1:0] MAXI_RRESP;
wire    MAXI_BVALID;
wire   [1:0] MAXI_BRESP;
wire   [0:0] MAXI_BID;
wire   [0:0] MAXI_BUSER;
reg   [29:0] indvar_reg_304;
reg   [29:0] indvar_reg_304_pp0_iter1_reg;
wire    ap_block_state13_pp0_stage0_iter0;
reg    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_state15_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [11:0] i_i_reg_349;
reg   [63:0] indvar_flatten_reg_360;
reg   [31:0] x_i_reg_371;
reg   [11:0] agg_result_V_1_i_reg_382;
reg   [11:0] agg_result_V_load_i_reg_394;
reg   [31:0] y_i_reg_406;
reg   [29:0] ram1_reg_911;
reg  signed [31:0] length_read_reg_916;
wire    ap_CS_fsm_state2;
reg  signed [31:0] height_read_reg_923;
wire  signed [31:0] tmp_fu_433_p2;
reg  signed [31:0] tmp_reg_931;
wire   [29:0] tmp_9_fu_443_p1;
reg   [29:0] tmp_9_reg_936;
wire    ap_CS_fsm_state5;
reg    ap_sig_ioackin_MAXI_ARREADY;
wire   [0:0] exitcond_fu_461_p2;
reg   [0:0] exitcond_reg_953_pp0_iter1_reg;
wire   [29:0] indvar_next_fu_466_p2;
reg   [29:0] indvar_next_reg_957;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] MAXI_addr_read_reg_962;
wire    ap_CS_fsm_state16;
wire  signed [12:0] tmp_11_fu_500_p1;
reg  signed [12:0] tmp_11_reg_984;
wire    ap_CS_fsm_state18;
wire   [63:0] grp_fu_489_p2;
reg   [63:0] bound_reg_989;
wire   [63:0] indvar_flatten_next1_fu_508_p2;
reg   [63:0] indvar_flatten_next1_reg_998;
wire    ap_CS_fsm_state19;
wire   [31:0] y_mid2_fu_519_p3;
reg   [31:0] y_mid2_reg_1003;
wire   [0:0] exitcond_flatten1_fu_503_p2;
wire   [31:0] x_cast_mid2_v_fu_533_p3;
reg   [31:0] x_cast_mid2_v_reg_1008;
wire   [12:0] tmp_12_fu_541_p1;
reg   [12:0] tmp_12_reg_1013;
wire  signed [12:0] tmp_13_fu_545_p1;
reg  signed [12:0] tmp_13_reg_1018;
wire  signed [12:0] grp_fu_906_p3;
reg  signed [12:0] tmp_4_reg_1023;
wire    ap_CS_fsm_state20;
(* use_dsp48 = "no" *) wire   [12:0] current_V_fu_554_p2;
reg   [12:0] current_V_reg_1029;
wire    ap_CS_fsm_state21;
reg   [31:0] sectionData_load_reg_1039;
wire    ap_CS_fsm_state22;
reg   [31:0] sectionData_load_1_reg_1057;
wire    ap_CS_fsm_state23;
reg   [31:0] sectionData_load_2_reg_1065;
reg   [11:0] numberOfPixelsVisted_1_reg_1073;
wire   [0:0] tmp_i_fu_593_p2;
reg   [0:0] tmp_i_reg_1081;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state24_pp1_stage0_iter0;
wire    ap_block_state27_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [11:0] i_fu_598_p2;
reg   [11:0] i_reg_1085;
reg    ap_enable_reg_pp1_iter0;
wire  signed [14:0] tmp_13_i_fu_620_p2;
reg  signed [14:0] tmp_13_i_reg_1090;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state25_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
wire   [0:0] tmp_i_i_fu_651_p2;
reg   [0:0] tmp_i_i_reg_1111;
wire   [0:0] val_assign_fu_672_p2;
reg   [0:0] val_assign_reg_1116;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state26_pp1_stage2_iter0;
wire    ap_block_pp1_stage2_11001;
wire  signed [43:0] r_V_2_cast_fu_697_p1;
reg  signed [43:0] r_V_2_cast_reg_1120;
wire    ap_CS_fsm_state29;
wire   [0:0] exitcond_flatten_fu_742_p2;
reg   [0:0] exitcond_flatten_reg_1125;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state31_pp2_stage0_iter0;
wire    ap_block_state33_pp2_stage0_iter1;
wire    ap_block_state35_pp2_stage0_iter2;
wire    ap_block_state37_pp2_stage0_iter3;
wire    ap_block_state39_pp2_stage0_iter4;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] exitcond_flatten_reg_1125_pp2_iter1_reg;
reg   [0:0] exitcond_flatten_reg_1125_pp2_iter2_reg;
reg   [0:0] exitcond_flatten_reg_1125_pp2_iter3_reg;
wire   [63:0] indvar_flatten_next_fu_747_p2;
reg   [63:0] indvar_flatten_next_reg_1129;
reg    ap_enable_reg_pp2_iter0;
wire  signed [31:0] y_i_mid2_fu_758_p3;
reg  signed [31:0] y_i_mid2_reg_1134;
wire   [31:0] x_i_mid2_fu_772_p3;
reg   [31:0] x_i_mid2_reg_1140;
reg   [31:0] x_i_mid2_reg_1140_pp2_iter1_reg;
wire   [31:0] y_2_fu_784_p2;
reg   [31:0] y_2_reg_1146;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state32_pp2_stage1_iter0;
wire    ap_block_state34_pp2_stage1_iter1;
wire    ap_block_state36_pp2_stage1_iter2;
wire    ap_block_state38_pp2_stage1_iter3;
wire    ap_block_pp2_stage1_11001;
wire   [31:0] grp_fu_780_p2;
reg   [31:0] tmp_i1_5_reg_1151;
wire   [12:0] current_V_1_fu_809_p2;
reg   [12:0] current_V_1_reg_1156;
wire   [13:0] lhs_V_3_cast_fu_819_p1;
reg   [13:0] lhs_V_3_cast_reg_1167;
wire   [0:0] tmp_i_i1_fu_843_p2;
reg   [0:0] tmp_i_i1_reg_1182;
wire   [0:0] tmp_i_i1_6_fu_848_p2;
reg   [0:0] tmp_i_i1_6_reg_1187;
wire   [0:0] tmp_24_i_i1_fu_853_p2;
reg   [0:0] tmp_24_i_i1_reg_1192;
wire   [11:0] result_V_fu_858_p2;
reg   [11:0] result_V_reg_1197;
wire   [11:0] tmp_23_agg_result_V_s_fu_873_p3;
reg    ap_enable_reg_pp2_iter4;
wire   [11:0] tmp_23_agg_result_V_1_fu_880_p3;
wire   [0:0] tmp_10_fu_890_p2;
wire    ap_CS_fsm_state40;
wire   [31:0] y_1_fu_901_p2;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state12;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state13;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp1_stage2_subdone;
reg    ap_predicate_tran27to28_state26;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0_subdone;
wire    ap_CS_fsm_state30;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state31;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage1_subdone;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg   [29:0] ap_phi_mux_indvar_phi_fu_308_p4;
reg   [63:0] indvar_flatten9_reg_316;
reg   [31:0] x_reg_327;
reg   [31:0] y_reg_338;
reg   [11:0] ap_phi_mux_i_i_phi_fu_353_p4;
wire    ap_block_pp1_stage0;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_364_p4;
wire    ap_block_pp2_stage0;
reg   [31:0] ap_phi_mux_x_i_phi_fu_375_p4;
reg   [31:0] ap_phi_mux_y_i_phi_fu_410_p4;
wire   [63:0] indvar1_fu_472_p1;
wire   [63:0] tmp_6_fu_559_p1;
wire   [63:0] tmp_5_fu_573_p1;
wire   [63:0] tmp_s_fu_584_p1;
wire  signed [63:0] tmp_14_i_fu_626_p1;
wire  signed [63:0] tmp_16_i_fu_636_p1;
wire    ap_block_pp1_stage1;
wire  signed [63:0] tmp_18_i_fu_646_p1;
wire   [63:0] tmp_i1_fu_701_p1;
wire   [63:0] tmp_3_i_fu_726_p1;
wire   [63:0] tmp_5_i_fu_737_p1;
wire   [63:0] tmp_20_i_fu_815_p1;
wire    ap_block_pp2_stage1;
wire   [63:0] tmp_21_i_fu_828_p1;
wire   [63:0] tmp_22_i_fu_838_p1;
wire   [63:0] tmp_1_fu_447_p1;
reg    ap_reg_ioackin_MAXI_ARREADY;
wire   [11:0] tmp_6_i_fu_706_p2;
reg   [11:0] p_0111_1_fu_128;
wire  signed [31:0] tmp_8_fu_427_p0;
wire   [31:0] tmp_8_fu_427_p2;
wire  signed [31:0] tmp_fu_433_p1;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_439_p2;
wire   [31:0] grp_fu_489_p0;
wire   [31:0] grp_fu_489_p1;
wire   [0:0] exitcond1_fu_514_p2;
wire   [31:0] x_s_fu_527_p2;
wire   [12:0] tmp_14_fu_549_p2;
wire   [13:0] lhs_V_cast_fu_564_p1;
wire   [13:0] r_V_fu_567_p2;
wire   [13:0] r_V_1_fu_578_p2;
wire   [13:0] p_shl_i_fu_608_p3;
wire   [14:0] p_shl_i_cast_fu_616_p1;
wire   [14:0] i_i_cast5_fu_604_p1;
wire   [14:0] tmp_15_i_fu_631_p2;
wire   [14:0] tmp_17_i_fu_641_p2;
wire    ap_block_pp1_stage2;
wire   [0:0] tmp_i_i_4_fu_656_p2;
wire   [0:0] tmp_24_i_i_fu_661_p2;
wire   [0:0] tmp1_fu_666_p2;
wire   [13:0] p_shl_i1_fu_680_p3;
wire   [14:0] p_shl_i1_cast_fu_687_p1;
wire   [14:0] lhs_V_1_cast3_fu_677_p1;
wire   [14:0] r_V_2_fu_691_p2;
wire   [44:0] lhs_V_fu_717_p1;
wire   [44:0] r_V_3_fu_720_p2;
wire   [44:0] r_V_4_fu_731_p2;
wire   [0:0] exitcond_i5_fu_753_p2;
wire   [31:0] x_1_fu_766_p2;
wire   [31:0] tmp_i2_fu_789_p2;
wire   [10:0] tmp_16_fu_797_p1;
wire   [12:0] p_shl_i2_fu_801_p3;
wire   [12:0] tmp_15_fu_793_p1;
wire   [13:0] r_V_5_fu_822_p2;
wire   [13:0] r_V_6_fu_833_p2;
wire   [0:0] tmp2_fu_864_p2;
wire   [0:0] val_assign_1_fu_868_p2;
wire    ap_CS_fsm_state42;
reg    ap_block_state42;
reg   [31:0] ap_NS_fsm;
reg   [1:0] ap_exit_tran_regpp1;
wire    ap_block_pp1_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [63:0] grp_fu_489_p00;
wire   [63:0] grp_fu_489_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 length_r_0_data_reg = 32'd0;
#0 length_r_0_vld_reg = 1'b0;
#0 height_0_data_reg = 32'd0;
#0 height_0_vld_reg = 1'b0;
#0 r_1_data_reg = 32'd0;
#0 r_1_vld_reg = 1'b0;
#0 g_1_data_reg = 32'd0;
#0 g_1_vld_reg = 1'b0;
#0 b_1_data_reg = 32'd0;
#0 b_1_vld_reg = 1'b0;
#0 numberOfPixelsVisted = 12'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_reg_ioackin_MAXI_ARREADY = 1'b0;
end

toplevel_sectionDbkb #(
    .DataWidth( 32 ),
    .AddressRange( 6750 ),
    .AddressWidth( 13 ))
sectionData_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sectionData_address0),
    .ce0(sectionData_ce0),
    .we0(sectionData_we0),
    .d0(MAXI_addr_read_reg_962),
    .q0(sectionData_q0),
    .address1(sectionData_address1),
    .ce1(sectionData_ce1),
    .q1(sectionData_q1)
);

toplevel_visited #(
    .DataWidth( 32 ),
    .AddressRange( 6750 ),
    .AddressWidth( 13 ))
visited_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(visited_address0),
    .ce0(visited_ce0),
    .we0(visited_we0),
    .d0(sectionData_load_1_reg_1057),
    .q0(visited_q0),
    .address1(visited_address1),
    .ce1(visited_ce1),
    .we1(visited_we1),
    .d1(visited_d1),
    .q1(visited_q1)
);

toplevel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
toplevel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .ram(ram),
    .length_r(length_r),
    .height(height),
    .r(r_1_data_reg),
    .r_ap_vld(r_1_vld_reg),
    .g(g_1_data_reg),
    .g_ap_vld(g_1_vld_reg),
    .b(b_1_data_reg),
    .b_ap_vld(b_1_vld_reg)
);

toplevel_MAXI_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MAXI_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MAXI_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MAXI_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MAXI_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MAXI_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MAXI_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MAXI_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MAXI_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MAXI_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MAXI_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MAXI_CACHE_VALUE ))
toplevel_MAXI_m_axi_U(
    .AWVALID(m_axi_MAXI_AWVALID),
    .AWREADY(m_axi_MAXI_AWREADY),
    .AWADDR(m_axi_MAXI_AWADDR),
    .AWID(m_axi_MAXI_AWID),
    .AWLEN(m_axi_MAXI_AWLEN),
    .AWSIZE(m_axi_MAXI_AWSIZE),
    .AWBURST(m_axi_MAXI_AWBURST),
    .AWLOCK(m_axi_MAXI_AWLOCK),
    .AWCACHE(m_axi_MAXI_AWCACHE),
    .AWPROT(m_axi_MAXI_AWPROT),
    .AWQOS(m_axi_MAXI_AWQOS),
    .AWREGION(m_axi_MAXI_AWREGION),
    .AWUSER(m_axi_MAXI_AWUSER),
    .WVALID(m_axi_MAXI_WVALID),
    .WREADY(m_axi_MAXI_WREADY),
    .WDATA(m_axi_MAXI_WDATA),
    .WSTRB(m_axi_MAXI_WSTRB),
    .WLAST(m_axi_MAXI_WLAST),
    .WID(m_axi_MAXI_WID),
    .WUSER(m_axi_MAXI_WUSER),
    .ARVALID(m_axi_MAXI_ARVALID),
    .ARREADY(m_axi_MAXI_ARREADY),
    .ARADDR(m_axi_MAXI_ARADDR),
    .ARID(m_axi_MAXI_ARID),
    .ARLEN(m_axi_MAXI_ARLEN),
    .ARSIZE(m_axi_MAXI_ARSIZE),
    .ARBURST(m_axi_MAXI_ARBURST),
    .ARLOCK(m_axi_MAXI_ARLOCK),
    .ARCACHE(m_axi_MAXI_ARCACHE),
    .ARPROT(m_axi_MAXI_ARPROT),
    .ARQOS(m_axi_MAXI_ARQOS),
    .ARREGION(m_axi_MAXI_ARREGION),
    .ARUSER(m_axi_MAXI_ARUSER),
    .RVALID(m_axi_MAXI_RVALID),
    .RREADY(m_axi_MAXI_RREADY),
    .RDATA(m_axi_MAXI_RDATA),
    .RLAST(m_axi_MAXI_RLAST),
    .RID(m_axi_MAXI_RID),
    .RUSER(m_axi_MAXI_RUSER),
    .RRESP(m_axi_MAXI_RRESP),
    .BVALID(m_axi_MAXI_BVALID),
    .BREADY(m_axi_MAXI_BREADY),
    .BRESP(m_axi_MAXI_BRESP),
    .BID(m_axi_MAXI_BID),
    .BUSER(m_axi_MAXI_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(MAXI_ARVALID),
    .I_ARREADY(MAXI_ARREADY),
    .I_ARADDR(MAXI_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(MAXI_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(MAXI_RVALID),
    .I_RREADY(MAXI_RREADY),
    .I_RDATA(MAXI_RDATA),
    .I_RID(MAXI_RID),
    .I_RUSER(MAXI_RUSER),
    .I_RRESP(MAXI_RRESP),
    .I_RLAST(MAXI_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(MAXI_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(MAXI_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(MAXI_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(MAXI_BRESP),
    .I_BID(MAXI_BID),
    .I_BUSER(MAXI_BUSER)
);

toplevel_mul_32s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
toplevel_mul_32s_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_931),
    .din1(height_read_reg_923),
    .ce(1'b1),
    .dout(grp_fu_439_p2)
);

toplevel_mul_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
toplevel_mul_32nsdEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_489_p0),
    .din1(grp_fu_489_p1),
    .ce(1'b1),
    .dout(grp_fu_489_p2)
);

toplevel_mul_32s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
toplevel_mul_32s_cud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(y_i_mid2_reg_1134),
    .din1(length_read_reg_916),
    .ce(1'b1),
    .dout(grp_fu_780_p2)
);

toplevel_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 13 ))
toplevel_mac_mulaeOg_U4(
    .din0(tmp_13_reg_1018),
    .din1(tmp_11_reg_984),
    .din2(tmp_12_reg_1013),
    .dout(grp_fu_906_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state13)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2) & ((ap_predicate_tran27to28_state26 == 1'b1) | (tmp_i_reg_1081 == 1'd0)))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state31) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state31)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state31);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_MAXI_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            if ((ap_sig_ioackin_MAXI_ARREADY == 1'b1)) begin
                ap_reg_ioackin_MAXI_ARREADY <= 1'b0;
            end else if ((1'b1 == MAXI_ARREADY)) begin
                ap_reg_ioackin_MAXI_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_1125_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        agg_result_V_1_i_reg_382 <= tmp_23_agg_result_V_s_fu_873_p3;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        agg_result_V_1_i_reg_382 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_1125_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        agg_result_V_load_i_reg_394 <= tmp_23_agg_result_V_1_fu_880_p3;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        agg_result_V_load_i_reg_394 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        if ((tmp_i_reg_1081 == 1'd0)) begin
                        ap_exit_tran_regpp1[0] <= 1'b1;
        end else if ((ap_predicate_tran27to28_state26 == 1'b1)) begin
                        ap_exit_tran_regpp1[0] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (b_1_vld_reg == 1'b0) & (b_1_vld_in == 1'b1))) begin
        b_1_vld_reg <= 1'b1;
    end else if (((b_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (b_1_vld_reg == 1'b1))) begin
        b_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (g_1_vld_reg == 1'b0) & (g_1_vld_in == 1'b1))) begin
        g_1_vld_reg <= 1'b1;
    end else if (((g_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (g_1_vld_reg == 1'b1))) begin
        g_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_i_reg_1081 == 1'd1) & (val_assign_reg_1116 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_i_reg_349 <= i_reg_1085;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        i_i_reg_349 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        indvar_flatten9_reg_316 <= indvar_flatten_next1_reg_998;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        indvar_flatten9_reg_316 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_1125 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten_reg_360 <= indvar_flatten_next_reg_1129;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        indvar_flatten_reg_360 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_953 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_reg_304 <= indvar_next_reg_957;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        indvar_reg_304 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        numberOfPixelsVisted <= tmp_6_i_fu_706_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        numberOfPixelsVisted <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_fu_890_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        p_0111_1_fu_128 <= agg_result_V_1_i_reg_382;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        p_0111_1_fu_128 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (r_1_vld_reg == 1'b0) & (r_1_vld_in == 1'b1))) begin
        r_1_vld_reg <= 1'b1;
    end else if (((r_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (r_1_vld_reg == 1'b1))) begin
        r_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_1125 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_i_reg_371 <= x_i_mid2_reg_1140;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        x_i_reg_371 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        x_reg_327 <= x_cast_mid2_v_reg_1008;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        x_reg_327 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_1125 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        y_i_reg_406 <= y_2_reg_1146;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        y_i_reg_406 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        y_reg_338 <= y_1_fu_901_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        y_reg_338 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_addr_read_reg_962 <= MAXI_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (b_1_vld_reg == 1'b0) & (b_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (b_1_vld_in == 1'b1) & (b_1_vld_reg == 1'b1)))) begin
        b_1_data_reg <= sectionData_load_2_reg_1065;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bound_reg_989 <= grp_fu_489_p2;
        tmp_11_reg_984 <= tmp_11_fu_500_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_1125_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        current_V_1_reg_1156 <= current_V_1_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        current_V_reg_1029 <= current_V_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond_flatten_reg_1125 <= exitcond_flatten_fu_742_p2;
        exitcond_flatten_reg_1125_pp2_iter1_reg <= exitcond_flatten_reg_1125;
        exitcond_flatten_reg_1125_pp2_iter2_reg <= exitcond_flatten_reg_1125_pp2_iter1_reg;
        exitcond_flatten_reg_1125_pp2_iter3_reg <= exitcond_flatten_reg_1125_pp2_iter2_reg;
        x_i_mid2_reg_1140_pp2_iter1_reg <= x_i_mid2_reg_1140;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_953 <= exitcond_fu_461_p2;
        exitcond_reg_953_pp0_iter1_reg <= exitcond_reg_953;
        indvar_reg_304_pp0_iter1_reg <= indvar_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (g_1_vld_reg == 1'b0) & (g_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (g_1_vld_in == 1'b1) & (g_1_vld_reg == 1'b1)))) begin
        g_1_data_reg <= sectionData_load_1_reg_1057;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (height_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (height_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (height_0_vld_reg == 1'b1)))) begin
        height_0_data_reg <= height;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        height_read_reg_923 <= height_0_data_reg;
        length_read_reg_916 <= length_r_0_data_reg;
        tmp_reg_931 <= tmp_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_reg_1085 <= i_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        indvar_flatten_next1_reg_998 <= indvar_flatten_next1_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten_next_reg_1129 <= indvar_flatten_next_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_957 <= indvar_next_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (length_r_0_vld_reg == 1'b1)))) begin
        length_r_0_data_reg <= length_r;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (exitcond_flatten_reg_1125_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        lhs_V_3_cast_reg_1167[12 : 0] <= lhs_V_3_cast_fu_819_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        numberOfPixelsVisted_1_reg_1073 <= numberOfPixelsVisted;
        sectionData_load_1_reg_1057 <= sectionData_q0;
        sectionData_load_2_reg_1065 <= sectionData_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (r_1_vld_reg == 1'b0) & (r_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (r_1_vld_in == 1'b1) & (r_1_vld_reg == 1'b1)))) begin
        r_1_data_reg <= sectionData_load_reg_1039;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        r_V_2_cast_reg_1120 <= r_V_2_cast_fu_697_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ram1_reg_911 <= {{ram[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (exitcond_flatten_reg_1125_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        result_V_reg_1197 <= result_V_fu_858_p2;
        tmp_24_i_i1_reg_1192 <= tmp_24_i_i1_fu_853_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        sectionData_load_reg_1039 <= sectionData_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_503_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        tmp_12_reg_1013 <= tmp_12_fu_541_p1;
        tmp_13_reg_1018 <= tmp_13_fu_545_p1;
        x_cast_mid2_v_reg_1008 <= x_cast_mid2_v_fu_533_p3;
        y_mid2_reg_1003 <= y_mid2_fu_519_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_i_fu_593_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_13_i_reg_1090 <= tmp_13_i_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_4_reg_1023 <= grp_fu_906_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_9_reg_936 <= tmp_9_fu_443_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (exitcond_flatten_reg_1125_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        tmp_i1_5_reg_1151 <= grp_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_1125_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_i_i1_6_reg_1187 <= tmp_i_i1_6_fu_848_p2;
        tmp_i_i1_reg_1182 <= tmp_i_i1_fu_843_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (tmp_i_reg_1081 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tmp_i_i_reg_1111 <= tmp_i_i_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_i_reg_1081 <= tmp_i_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (tmp_i_reg_1081 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        val_assign_reg_1116 <= val_assign_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_fu_742_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_i_mid2_reg_1140 <= x_i_mid2_fu_772_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (exitcond_flatten_reg_1125 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        y_2_reg_1146 <= y_2_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_fu_742_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        y_i_mid2_reg_1134 <= y_i_mid2_fu_758_p3;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_MAXI_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        MAXI_ARVALID = 1'b1;
    end else begin
        MAXI_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_953 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_RREADY = 1'b1;
    end else begin
        MAXI_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        MAXI_blk_n_AR = m_axi_MAXI_ARREADY;
    end else begin
        MAXI_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_953 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MAXI_blk_n_R = m_axi_MAXI_RVALID;
    end else begin
        MAXI_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_461_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_742_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state31 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state31 = 1'b0;
    end
end

always @ (*) begin
    if ((~((b_1_ack_in == 1'b0) | (g_1_ack_in == 1'b0) | (r_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state42))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (tmp_i_reg_1081 == 1'd1) & (val_assign_reg_1116 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i_i_phi_fu_353_p4 = i_reg_1085;
    end else begin
        ap_phi_mux_i_i_phi_fu_353_p4 = i_i_reg_349;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond_flatten_reg_1125 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_364_p4 = indvar_flatten_next_reg_1129;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_364_p4 = indvar_flatten_reg_360;
    end
end

always @ (*) begin
    if (((exitcond_reg_953 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_phi_fu_308_p4 = indvar_next_reg_957;
    end else begin
        ap_phi_mux_indvar_phi_fu_308_p4 = indvar_reg_304;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond_flatten_reg_1125 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_x_i_phi_fu_375_p4 = x_i_mid2_reg_1140;
    end else begin
        ap_phi_mux_x_i_phi_fu_375_p4 = x_i_reg_371;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond_flatten_reg_1125 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_y_i_phi_fu_410_p4 = y_2_reg_1146;
    end else begin
        ap_phi_mux_y_i_phi_fu_410_p4 = y_i_reg_406;
    end
end

always @ (*) begin
    if ((~((b_1_ack_in == 1'b0) | (g_1_ack_in == 1'b0) | (r_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state42))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_MAXI_ARREADY == 1'b0)) begin
        ap_sig_ioackin_MAXI_ARREADY = MAXI_ARREADY;
    end else begin
        ap_sig_ioackin_MAXI_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((b_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (b_1_vld_reg == 1'b1)))) begin
        b_1_ack_in = 1'b1;
    end else begin
        b_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_890_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        b_1_vld_in = 1'b1;
    end else begin
        b_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((g_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (g_1_vld_reg == 1'b1)))) begin
        g_1_ack_in = 1'b1;
    end else begin
        g_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_890_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        g_1_vld_in = 1'b1;
    end else begin
        g_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((b_1_ack_in == 1'b0) | (g_1_ack_in == 1'b0) | (r_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state42))) begin
        height_0_ack_out = 1'b1;
    end else begin
        height_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((~((b_1_ack_in == 1'b0) | (g_1_ack_in == 1'b0) | (r_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state42))) begin
        length_r_0_ack_out = 1'b1;
    end else begin
        length_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((r_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (r_1_vld_reg == 1'b1)))) begin
        r_1_ack_in = 1'b1;
    end else begin
        r_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_890_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        r_1_vld_in = 1'b1;
    end else begin
        r_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        sectionData_address0 = tmp_21_i_fu_828_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        sectionData_address0 = tmp_5_fu_573_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        sectionData_address0 = tmp_6_fu_559_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sectionData_address0 = indvar1_fu_472_p1;
    end else begin
        sectionData_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        sectionData_address1 = tmp_22_i_fu_838_p1;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        sectionData_address1 = tmp_20_i_fu_815_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        sectionData_address1 = tmp_s_fu_584_p1;
    end else begin
        sectionData_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        sectionData_ce0 = 1'b1;
    end else begin
        sectionData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        sectionData_ce1 = 1'b1;
    end else begin
        sectionData_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_953_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sectionData_we0 = 1'b1;
    end else begin
        sectionData_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        visited_address0 = tmp_3_i_fu_726_p1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        visited_address0 = tmp_16_i_fu_636_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        visited_address0 = tmp_14_i_fu_626_p1;
    end else begin
        visited_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        visited_address1 = tmp_5_i_fu_737_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        visited_address1 = tmp_i1_fu_701_p1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        visited_address1 = tmp_18_i_fu_646_p1;
    end else begin
        visited_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        visited_ce0 = 1'b1;
    end else begin
        visited_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        visited_ce1 = 1'b1;
    end else begin
        visited_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        visited_d1 = sectionData_load_2_reg_1065;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        visited_d1 = sectionData_load_reg_1039;
    end else begin
        visited_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        visited_we0 = 1'b1;
    end else begin
        visited_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        visited_we1 = 1'b1;
    end else begin
        visited_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((ap_sig_ioackin_MAXI_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_461_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_461_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((exitcond_flatten1_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_exit_tran_regpp1 == 2'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((ap_exit_tran_regpp1 == 2'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_flatten_fu_742_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_flatten_fu_742_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state42 : begin
            if ((~((b_1_ack_in == 1'b0) | (g_1_ack_in == 1'b0) | (r_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MAXI_ARADDR = tmp_1_fu_447_p1;

assign MAXI_ARLEN = tmp_9_reg_936;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == MAXI_RVALID) & (exitcond_reg_953 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == MAXI_RVALID) & (exitcond_reg_953 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage0_iter1 = ((1'b0 == MAXI_RVALID) & (exitcond_reg_953 == 1'd0));
end

assign ap_block_state15_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state42 = ((b_1_ack_in == 1'b0) | (g_1_ack_in == 1'b0) | (r_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran27to28_state26 = ((val_assign_fu_672_p2 == 1'd1) & (tmp_i_reg_1081 == 1'd1));
end

assign ap_return = 32'd1;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign current_V_1_fu_809_p2 = (p_shl_i2_fu_801_p3 - tmp_15_fu_793_p1);

assign current_V_fu_554_p2 = ($signed(tmp_14_fu_549_p2) - $signed(tmp_4_reg_1023));

assign exitcond1_fu_514_p2 = ((y_reg_338 != height_read_reg_923) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_503_p2 = ((indvar_flatten9_reg_316 == bound_reg_989) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_742_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_364_p4 == bound_reg_989) ? 1'b1 : 1'b0);

assign exitcond_fu_461_p2 = ((ap_phi_mux_indvar_phi_fu_308_p4 == tmp_9_reg_936) ? 1'b1 : 1'b0);

assign exitcond_i5_fu_753_p2 = ((ap_phi_mux_y_i_phi_fu_410_p4 == height_read_reg_923) ? 1'b1 : 1'b0);

assign grp_fu_489_p0 = grp_fu_489_p00;

assign grp_fu_489_p00 = $unsigned(height_read_reg_923);

assign grp_fu_489_p1 = grp_fu_489_p10;

assign grp_fu_489_p10 = $unsigned(length_read_reg_916);

assign i_fu_598_p2 = (ap_phi_mux_i_i_phi_fu_353_p4 + 12'd1);

assign i_i_cast5_fu_604_p1 = ap_phi_mux_i_i_phi_fu_353_p4;

assign indvar1_fu_472_p1 = indvar_reg_304_pp0_iter1_reg;

assign indvar_flatten_next1_fu_508_p2 = (indvar_flatten9_reg_316 + 64'd1);

assign indvar_flatten_next_fu_747_p2 = (ap_phi_mux_indvar_flatten_phi_fu_364_p4 + 64'd1);

assign indvar_next_fu_466_p2 = (ap_phi_mux_indvar_phi_fu_308_p4 + 30'd1);

assign lhs_V_1_cast3_fu_677_p1 = numberOfPixelsVisted_1_reg_1073;

assign lhs_V_3_cast_fu_819_p1 = current_V_1_reg_1156;

assign lhs_V_cast_fu_564_p1 = current_V_reg_1029;

assign lhs_V_fu_717_p1 = $unsigned(r_V_2_cast_reg_1120);

assign p_shl_i1_cast_fu_687_p1 = p_shl_i1_fu_680_p3;

assign p_shl_i1_fu_680_p3 = {{numberOfPixelsVisted_1_reg_1073}, {2'd0}};

assign p_shl_i2_fu_801_p3 = {{tmp_16_fu_797_p1}, {2'd0}};

assign p_shl_i_cast_fu_616_p1 = p_shl_i_fu_608_p3;

assign p_shl_i_fu_608_p3 = {{ap_phi_mux_i_i_phi_fu_353_p4}, {2'd0}};

assign r_V_1_fu_578_p2 = (14'd2 + lhs_V_cast_fu_564_p1);

assign r_V_2_cast_fu_697_p1 = $signed(r_V_2_fu_691_p2);

assign r_V_2_fu_691_p2 = (p_shl_i1_cast_fu_687_p1 - lhs_V_1_cast3_fu_677_p1);

assign r_V_3_fu_720_p2 = (lhs_V_fu_717_p1 + 45'd1);

assign r_V_4_fu_731_p2 = (lhs_V_fu_717_p1 + 45'd2);

assign r_V_5_fu_822_p2 = (14'd1 + lhs_V_3_cast_fu_819_p1);

assign r_V_6_fu_833_p2 = (14'd2 + lhs_V_3_cast_reg_1167);

assign r_V_fu_567_p2 = (14'd1 + lhs_V_cast_fu_564_p1);

assign result_V_fu_858_p2 = (12'd1 + agg_result_V_load_i_reg_394);

assign tmp1_fu_666_p2 = (tmp_i_i_4_fu_656_p2 & tmp_24_i_i_fu_661_p2);

assign tmp2_fu_864_p2 = (tmp_i_i1_6_reg_1187 & tmp_24_i_i1_reg_1192);

assign tmp_10_fu_890_p2 = ((agg_result_V_1_i_reg_382 < p_0111_1_fu_128) ? 1'b1 : 1'b0);

assign tmp_11_fu_500_p1 = length_read_reg_916[12:0];

assign tmp_12_fu_541_p1 = x_cast_mid2_v_fu_533_p3[12:0];

assign tmp_13_fu_545_p1 = y_mid2_fu_519_p3[12:0];

assign tmp_13_i_fu_620_p2 = (p_shl_i_cast_fu_616_p1 - i_i_cast5_fu_604_p1);

assign tmp_14_fu_549_p2 = tmp_4_reg_1023 << 13'd2;

assign tmp_14_i_fu_626_p1 = tmp_13_i_fu_620_p2;

assign tmp_15_fu_793_p1 = tmp_i2_fu_789_p2[12:0];

assign tmp_15_i_fu_631_p2 = ($signed(tmp_13_i_reg_1090) + $signed(15'd1));

assign tmp_16_fu_797_p1 = tmp_i2_fu_789_p2[10:0];

assign tmp_16_i_fu_636_p1 = $signed(tmp_15_i_fu_631_p2);

assign tmp_17_i_fu_641_p2 = ($signed(tmp_13_i_reg_1090) + $signed(15'd2));

assign tmp_18_i_fu_646_p1 = $signed(tmp_17_i_fu_641_p2);

assign tmp_1_fu_447_p1 = ram1_reg_911;

assign tmp_20_i_fu_815_p1 = current_V_1_reg_1156;

assign tmp_21_i_fu_828_p1 = r_V_5_fu_822_p2;

assign tmp_22_i_fu_838_p1 = r_V_6_fu_833_p2;

assign tmp_23_agg_result_V_1_fu_880_p3 = ((val_assign_1_fu_868_p2[0:0] === 1'b1) ? result_V_reg_1197 : agg_result_V_load_i_reg_394);

assign tmp_23_agg_result_V_s_fu_873_p3 = ((val_assign_1_fu_868_p2[0:0] === 1'b1) ? result_V_reg_1197 : agg_result_V_1_i_reg_382);

assign tmp_24_i_i1_fu_853_p2 = ((sectionData_q1 == sectionData_load_2_reg_1065) ? 1'b1 : 1'b0);

assign tmp_24_i_i_fu_661_p2 = ((sectionData_load_2_reg_1065 == visited_q1) ? 1'b1 : 1'b0);

assign tmp_3_i_fu_726_p1 = r_V_3_fu_720_p2;

assign tmp_5_fu_573_p1 = r_V_fu_567_p2;

assign tmp_5_i_fu_737_p1 = r_V_4_fu_731_p2;

assign tmp_6_fu_559_p1 = current_V_fu_554_p2;

assign tmp_6_i_fu_706_p2 = (numberOfPixelsVisted_1_reg_1073 + 12'd1);

assign tmp_8_fu_427_p0 = length_r_0_data_reg;

assign tmp_8_fu_427_p2 = tmp_8_fu_427_p0 << 32'd2;

assign tmp_9_fu_443_p1 = grp_fu_439_p2[29:0];

assign tmp_fu_433_p1 = length_r_0_data_reg;

assign tmp_fu_433_p2 = ($signed(tmp_8_fu_427_p2) - $signed(tmp_fu_433_p1));

assign tmp_i1_fu_701_p1 = $unsigned(r_V_2_cast_fu_697_p1);

assign tmp_i2_fu_789_p2 = (tmp_i1_5_reg_1151 + x_i_mid2_reg_1140_pp2_iter1_reg);

assign tmp_i_fu_593_p2 = ((ap_phi_mux_i_i_phi_fu_353_p4 < numberOfPixelsVisted_1_reg_1073) ? 1'b1 : 1'b0);

assign tmp_i_i1_6_fu_848_p2 = ((sectionData_q0 == sectionData_load_1_reg_1057) ? 1'b1 : 1'b0);

assign tmp_i_i1_fu_843_p2 = ((sectionData_q1 == sectionData_load_reg_1039) ? 1'b1 : 1'b0);

assign tmp_i_i_4_fu_656_p2 = ((sectionData_load_1_reg_1057 == visited_q0) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_651_p2 = ((sectionData_load_reg_1039 == visited_q0) ? 1'b1 : 1'b0);

assign tmp_s_fu_584_p1 = r_V_1_fu_578_p2;

assign val_assign_1_fu_868_p2 = (tmp_i_i1_reg_1182 & tmp2_fu_864_p2);

assign val_assign_fu_672_p2 = (tmp_i_i_reg_1111 & tmp1_fu_666_p2);

assign x_1_fu_766_p2 = (32'd1 + ap_phi_mux_x_i_phi_fu_375_p4);

assign x_cast_mid2_v_fu_533_p3 = ((exitcond1_fu_514_p2[0:0] === 1'b1) ? x_reg_327 : x_s_fu_527_p2);

assign x_i_mid2_fu_772_p3 = ((exitcond_i5_fu_753_p2[0:0] === 1'b1) ? x_1_fu_766_p2 : ap_phi_mux_x_i_phi_fu_375_p4);

assign x_s_fu_527_p2 = (32'd1 + x_reg_327);

assign y_1_fu_901_p2 = (y_mid2_reg_1003 + 32'd1);

assign y_2_fu_784_p2 = ($signed(32'd1) + $signed(y_i_mid2_reg_1134));

assign y_i_mid2_fu_758_p3 = ((exitcond_i5_fu_753_p2[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_y_i_phi_fu_410_p4);

assign y_mid2_fu_519_p3 = ((exitcond1_fu_514_p2[0:0] === 1'b1) ? y_reg_338 : 32'd0);

always @ (posedge ap_clk) begin
    lhs_V_3_cast_reg_1167[13] <= 1'b0;
    ap_exit_tran_regpp1[1] <= 1'b0;
end

endmodule //toplevel
