-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toplevel is
generic (
    C_M_AXI_MAXI_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_USER_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_MAXI_AWVALID : OUT STD_LOGIC;
    m_axi_MAXI_AWREADY : IN STD_LOGIC;
    m_axi_MAXI_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_AWUSER_WIDTH-1 downto 0);
    m_axi_MAXI_WVALID : OUT STD_LOGIC;
    m_axi_MAXI_WREADY : IN STD_LOGIC;
    m_axi_MAXI_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH/8-1 downto 0);
    m_axi_MAXI_WLAST : OUT STD_LOGIC;
    m_axi_MAXI_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_WUSER_WIDTH-1 downto 0);
    m_axi_MAXI_ARVALID : OUT STD_LOGIC;
    m_axi_MAXI_ARREADY : IN STD_LOGIC;
    m_axi_MAXI_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ARUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RVALID : IN STD_LOGIC;
    m_axi_MAXI_RREADY : OUT STD_LOGIC;
    m_axi_MAXI_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_RLAST : IN STD_LOGIC;
    m_axi_MAXI_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_RUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BVALID : IN STD_LOGIC;
    m_axi_MAXI_BREADY : OUT STD_LOGIC;
    m_axi_MAXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of toplevel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "toplevel,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=7.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.059500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=34,HLS_SYN_DSP=10,HLS_SYN_FF=2591,HLS_SYN_LUT=2905,HLS_VERSION=2018_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv45_1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_const_lv45_2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal ram : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_r_0_vld_reg : STD_LOGIC := '0';
    signal length_r_0_ack_out : STD_LOGIC;
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal height_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal height_0_vld_reg : STD_LOGIC := '0';
    signal height_0_ack_out : STD_LOGIC;
    signal r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal r_1_vld_reg : STD_LOGIC := '0';
    signal r_1_vld_in : STD_LOGIC;
    signal r_1_ack_in : STD_LOGIC;
    signal g_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_1_vld_reg : STD_LOGIC := '0';
    signal g_1_vld_in : STD_LOGIC;
    signal g_1_ack_in : STD_LOGIC;
    signal b_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal b_1_vld_reg : STD_LOGIC := '0';
    signal b_1_vld_in : STD_LOGIC;
    signal b_1_ack_in : STD_LOGIC;
    signal version_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal version_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal version_1_vld_reg : STD_LOGIC := '0';
    signal version_1_vld_in : STD_LOGIC;
    signal version_1_ack_in : STD_LOGIC;
    signal sectionData_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sectionData_ce0 : STD_LOGIC;
    signal sectionData_we0 : STD_LOGIC;
    signal sectionData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sectionData_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sectionData_ce1 : STD_LOGIC;
    signal sectionData_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOfPixelsVisted : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal visited_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal visited_ce0 : STD_LOGIC;
    signal visited_we0 : STD_LOGIC;
    signal visited_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal visited_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal visited_ce1 : STD_LOGIC;
    signal visited_we1 : STD_LOGIC;
    signal visited_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal visited_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal MAXI_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_966 : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_AWREADY : STD_LOGIC;
    signal MAXI_WREADY : STD_LOGIC;
    signal MAXI_ARVALID : STD_LOGIC;
    signal MAXI_ARREADY : STD_LOGIC;
    signal MAXI_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_RVALID : STD_LOGIC;
    signal MAXI_RREADY : STD_LOGIC;
    signal MAXI_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_RLAST : STD_LOGIC;
    signal MAXI_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BVALID : STD_LOGIC;
    signal MAXI_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_308 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_reg_308_pp0_iter1_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_i_reg_353 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_reg_364 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_i_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_V_1_i_reg_386 : STD_LOGIC_VECTOR (11 downto 0);
    signal agg_result_V_load_i_reg_398 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_i_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal ram1_reg_925 : STD_LOGIC_VECTOR (29 downto 0);
    signal length_read_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal height_read_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_447_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_9_reg_949 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_sig_ioackin_MAXI_ARREADY : STD_LOGIC;
    signal exitcond_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_966_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_470_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next_reg_970 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal MAXI_addr_read_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_487_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_reg_987 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_496_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_1003 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal indvar_flatten_next1_fu_512_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next1_reg_1012 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal y_mid2_fu_523_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_mid2_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten1_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_cast_mid2_v_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_cast_mid2_v_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_545_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_reg_1027 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_fu_549_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_reg_1032 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_913_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_reg_1037 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal current_V_fu_558_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of current_V_fu_558_p2 : signal is "no";
    signal current_V_reg_1043 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal sectionData_load_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal sectionData_load_1_reg_1072 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal sectionData_load_2_reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOfPixelsVisted_1_reg_1090 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1098 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state24_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_fu_602_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_1102 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_19_i_fu_624_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_19_i_reg_1107 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state25_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal tmp_i_i_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_1128 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_reg_1133 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state26_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal tmp_12_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal r_V_2_cast_fu_723_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_2_cast_reg_1142 : STD_LOGIC_VECTOR (43 downto 0);
    signal exitcond_flatten_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state31_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state35_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_1147_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1147_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1147_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_773_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_27_i_mid2_v_fu_798_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_i_mid2_v_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_806_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_1161 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_fu_810_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_reg_1166 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_2_fu_814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_V_1_fu_825_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 of current_V_1_fu_825_p2 : signal is "no";
    signal current_V_1_reg_1176 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_i1_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i1_reg_1192 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i1_5_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i1_5_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_i1_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_i1_reg_1202 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_agg_result_V_s_fu_878_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal tmp_34_agg_result_V_1_fu_886_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal y_1_fu_908_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_predicate_tran27to28_state26 : BOOLEAN;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state31 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_phi_fu_312_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_flatten1_reg_320 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_i_phi_fu_357_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_x_i_phi_fu_379_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal indvar1_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_i_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_i_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal tmp_24_i_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_i_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_i_fu_830_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_i_fu_843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_MAXI_ARREADY : STD_LOGIC := '0';
    signal tmp_6_i_fu_732_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_0115_1_fu_132 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_8_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_496_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_s_fu_531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_553_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_V_cast_fu_568_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_fu_571_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_1_fu_582_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_i_fu_612_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_i_cast_fu_620_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_i_cast6_fu_608_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_i_fu_635_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_i_fu_645_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal tmp_i_i_4_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_i_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_i1_fu_706_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_i1_cast_fu_713_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_1_cast4_fu_703_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_2_fu_717_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_fu_743_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_3_fu_746_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_4_fu_757_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal exitcond2_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_i_mid2_fu_784_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_918_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_fu_820_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_V_3_cast_fu_834_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_5_fu_837_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_fu_872_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_block_state38 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_exit_tran_regpp1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_496_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_496_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component toplevel_mul_32s_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_mul_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component toplevel_mac_mulaeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component toplevel_sectionDbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_visited IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        ram : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        r : IN STD_LOGIC_VECTOR (31 downto 0);
        r_ap_vld : IN STD_LOGIC;
        g : IN STD_LOGIC_VECTOR (31 downto 0);
        g_ap_vld : IN STD_LOGIC;
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        b_ap_vld : IN STD_LOGIC;
        version : IN STD_LOGIC_VECTOR (31 downto 0);
        version_ap_vld : IN STD_LOGIC );
    end component;


    component toplevel_MAXI_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sectionData_U : component toplevel_sectionDbkb
    generic map (
        DataWidth => 32,
        AddressRange => 6750,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sectionData_address0,
        ce0 => sectionData_ce0,
        we0 => sectionData_we0,
        d0 => MAXI_addr_read_reg_975,
        q0 => sectionData_q0,
        address1 => sectionData_address1,
        ce1 => sectionData_ce1,
        q1 => sectionData_q1);

    visited_U : component toplevel_visited
    generic map (
        DataWidth => 32,
        AddressRange => 6750,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => visited_address0,
        ce0 => visited_ce0,
        we0 => visited_we0,
        d0 => sectionData_load_1_reg_1072,
        q0 => visited_q0,
        address1 => visited_address1,
        ce1 => visited_ce1,
        we1 => visited_we1,
        d1 => visited_d1,
        q1 => visited_q1);

    toplevel_AXILiteS_s_axi_U : component toplevel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        ram => ram,
        length_r => length_r,
        height => height,
        r => r_1_data_reg,
        r_ap_vld => r_1_vld_reg,
        g => g_1_data_reg,
        g_ap_vld => g_1_vld_reg,
        b => b_1_data_reg,
        b_ap_vld => b_1_vld_reg,
        version => version_1_data_reg,
        version_ap_vld => version_1_vld_reg);

    toplevel_MAXI_m_axi_U : component toplevel_MAXI_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MAXI_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MAXI_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MAXI_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MAXI_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MAXI_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MAXI_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MAXI_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MAXI_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MAXI_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MAXI_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MAXI_CACHE_VALUE)
    port map (
        AWVALID => m_axi_MAXI_AWVALID,
        AWREADY => m_axi_MAXI_AWREADY,
        AWADDR => m_axi_MAXI_AWADDR,
        AWID => m_axi_MAXI_AWID,
        AWLEN => m_axi_MAXI_AWLEN,
        AWSIZE => m_axi_MAXI_AWSIZE,
        AWBURST => m_axi_MAXI_AWBURST,
        AWLOCK => m_axi_MAXI_AWLOCK,
        AWCACHE => m_axi_MAXI_AWCACHE,
        AWPROT => m_axi_MAXI_AWPROT,
        AWQOS => m_axi_MAXI_AWQOS,
        AWREGION => m_axi_MAXI_AWREGION,
        AWUSER => m_axi_MAXI_AWUSER,
        WVALID => m_axi_MAXI_WVALID,
        WREADY => m_axi_MAXI_WREADY,
        WDATA => m_axi_MAXI_WDATA,
        WSTRB => m_axi_MAXI_WSTRB,
        WLAST => m_axi_MAXI_WLAST,
        WID => m_axi_MAXI_WID,
        WUSER => m_axi_MAXI_WUSER,
        ARVALID => m_axi_MAXI_ARVALID,
        ARREADY => m_axi_MAXI_ARREADY,
        ARADDR => m_axi_MAXI_ARADDR,
        ARID => m_axi_MAXI_ARID,
        ARLEN => m_axi_MAXI_ARLEN,
        ARSIZE => m_axi_MAXI_ARSIZE,
        ARBURST => m_axi_MAXI_ARBURST,
        ARLOCK => m_axi_MAXI_ARLOCK,
        ARCACHE => m_axi_MAXI_ARCACHE,
        ARPROT => m_axi_MAXI_ARPROT,
        ARQOS => m_axi_MAXI_ARQOS,
        ARREGION => m_axi_MAXI_ARREGION,
        ARUSER => m_axi_MAXI_ARUSER,
        RVALID => m_axi_MAXI_RVALID,
        RREADY => m_axi_MAXI_RREADY,
        RDATA => m_axi_MAXI_RDATA,
        RLAST => m_axi_MAXI_RLAST,
        RID => m_axi_MAXI_RID,
        RUSER => m_axi_MAXI_RUSER,
        RRESP => m_axi_MAXI_RRESP,
        BVALID => m_axi_MAXI_BVALID,
        BREADY => m_axi_MAXI_BREADY,
        BRESP => m_axi_MAXI_BRESP,
        BID => m_axi_MAXI_BID,
        BUSER => m_axi_MAXI_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => MAXI_ARVALID,
        I_ARREADY => MAXI_ARREADY,
        I_ARADDR => MAXI_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => MAXI_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => MAXI_RVALID,
        I_RREADY => MAXI_RREADY,
        I_RDATA => MAXI_RDATA,
        I_RID => MAXI_RID,
        I_RUSER => MAXI_RUSER,
        I_RRESP => MAXI_RRESP,
        I_RLAST => MAXI_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => MAXI_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => MAXI_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => MAXI_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => MAXI_BRESP,
        I_BID => MAXI_BID,
        I_BUSER => MAXI_BUSER);

    toplevel_mul_32s_cud_U1 : component toplevel_mul_32s_cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_944,
        din1 => height_read_reg_936,
        ce => ap_const_logic_1,
        dout => grp_fu_443_p2);

    toplevel_mul_32nsdEe_U2 : component toplevel_mul_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_496_p0,
        din1 => grp_fu_496_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_496_p2);

    toplevel_mac_mulaeOg_U3 : component toplevel_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => tmp_14_reg_1032,
        din1 => tmp_10_reg_987,
        din2 => tmp_11_reg_1027,
        dout => grp_fu_913_p3);

    toplevel_mac_mulaeOg_U4 : component toplevel_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => tmp_10_reg_987,
        din1 => tmp_19_reg_1166,
        din2 => tmp_18_reg_1161,
        dout => grp_fu_918_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and ((ap_predicate_tran27to28_state26 = ap_const_boolean_1) or (tmp_i_reg_1098 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_MAXI_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    if ((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = MAXI_ARREADY)) then 
                        ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_1_i_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1147_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
                agg_result_V_1_i_reg_386 <= tmp_34_agg_result_V_s_fu_878_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                agg_result_V_1_i_reg_386 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    agg_result_V_load_i_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1147_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
                agg_result_V_load_i_reg_398 <= tmp_34_agg_result_V_1_fu_886_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                agg_result_V_load_i_reg_398 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    ap_exit_tran_regpp1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                if ((tmp_i_reg_1098 = ap_const_lv1_0)) then 
                    ap_exit_tran_regpp1(0) <= '1';
                elsif ((ap_predicate_tran27to28_state26 = ap_const_boolean_1)) then 
                    ap_exit_tran_regpp1(0) <= '0';
                end if;
            end if; 
        end if;
    end process;

    ap_return_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (b_1_vld_reg = ap_const_logic_0) and (b_1_vld_in = ap_const_logic_1))) then 
                b_1_vld_reg <= ap_const_logic_1;
            elsif (((b_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (b_1_vld_reg = ap_const_logic_1))) then 
                b_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    g_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (g_1_vld_reg = ap_const_logic_0) and (g_1_vld_in = ap_const_logic_1))) then 
                g_1_vld_reg <= ap_const_logic_1;
            elsif (((g_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (g_1_vld_reg = ap_const_logic_1))) then 
                g_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    height_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_i_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_i_reg_1098 = ap_const_lv1_1) and (val_assign_reg_1133 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_i_reg_353 <= i_reg_1102;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_i_reg_353 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                indvar_flatten1_reg_320 <= indvar_flatten_next1_reg_1012;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar_flatten1_reg_320 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_768_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_364 <= indvar_flatten_next_fu_773_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                indvar_flatten_reg_364 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_966 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_reg_308 <= indvar_next_reg_970;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                indvar_reg_308 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    length_r_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    numberOfPixelsVisted_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                numberOfPixelsVisted <= tmp_6_i_fu_732_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                numberOfPixelsVisted <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_0115_1_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_fu_897_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                p_0115_1_fu_132 <= agg_result_V_1_i_reg_386;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                p_0115_1_fu_132 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (r_1_vld_reg = ap_const_logic_0) and (r_1_vld_in = ap_const_logic_1))) then 
                r_1_vld_reg <= ap_const_logic_1;
            elsif (((r_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (r_1_vld_reg = ap_const_logic_1))) then 
                r_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    version_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (version_1_vld_reg = ap_const_logic_0) and (version_1_vld_in = ap_const_logic_1))) then 
                version_1_vld_reg <= ap_const_logic_1;
            elsif (((version_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1))) then 
                version_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    x_i_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1147 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                x_i_reg_375 <= tmp_27_i_mid2_v_reg_1156;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                x_i_reg_375 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                x_reg_331 <= x_cast_mid2_v_reg_1022;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                x_reg_331 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_i_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_768_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                y_i_reg_410 <= y_2_fu_814_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                y_i_reg_410 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                y_reg_342 <= y_1_fu_908_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                y_reg_342 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_966 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                MAXI_addr_read_reg_975 <= MAXI_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (b_1_vld_reg = ap_const_logic_0) and (b_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (b_1_vld_in = ap_const_logic_1) and (b_1_vld_reg = ap_const_logic_1)))) then
                b_1_data_reg <= sectionData_load_2_reg_1081;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                bound_reg_1003 <= grp_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                current_V_1_reg_1176 <= current_V_1_fu_825_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                current_V_reg_1043 <= current_V_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond_flatten_reg_1147 <= exitcond_flatten_fu_768_p2;
                exitcond_flatten_reg_1147_pp2_iter1_reg <= exitcond_flatten_reg_1147;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                exitcond_flatten_reg_1147_pp2_iter2_reg <= exitcond_flatten_reg_1147_pp2_iter1_reg;
                exitcond_flatten_reg_1147_pp2_iter3_reg <= exitcond_flatten_reg_1147_pp2_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_966 <= exitcond_fu_465_p2;
                exitcond_reg_966_pp0_iter1_reg <= exitcond_reg_966;
                indvar_reg_308_pp0_iter1_reg <= indvar_reg_308;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (g_1_vld_reg = ap_const_logic_0) and (g_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (g_1_vld_in = ap_const_logic_1) and (g_1_vld_reg = ap_const_logic_1)))) then
                g_1_data_reg <= sectionData_load_1_reg_1072;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (height_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (height_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (height_0_vld_reg = ap_const_logic_1)))) then
                height_0_data_reg <= height;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                height_read_reg_936 <= height_0_data_reg;
                length_read_reg_930 <= length_r_0_data_reg;
                tmp_reg_944 <= tmp_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                i_reg_1102 <= i_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                indvar_flatten_next1_reg_1012 <= indvar_flatten_next1_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_next_reg_970 <= indvar_next_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (length_r_0_vld_reg = ap_const_logic_1)))) then
                length_r_0_data_reg <= length_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                numberOfPixelsVisted_1_reg_1090 <= numberOfPixelsVisted;
                sectionData_load_1_reg_1072 <= sectionData_q0;
                sectionData_load_2_reg_1081 <= sectionData_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (r_1_vld_reg = ap_const_logic_0) and (r_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (r_1_vld_in = ap_const_logic_1) and (r_1_vld_reg = ap_const_logic_1)))) then
                r_1_data_reg <= sectionData_load_reg_1053;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                r_V_2_cast_reg_1142 <= r_V_2_cast_fu_723_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ram1_reg_925 <= ram(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                sectionData_load_reg_1053 <= sectionData_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_10_reg_987 <= tmp_10_fu_487_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_fu_507_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                tmp_11_reg_1027 <= tmp_11_fu_545_p1;
                tmp_14_reg_1032 <= tmp_14_fu_549_p1;
                x_cast_mid2_v_reg_1022 <= x_cast_mid2_v_fu_537_p3;
                y_mid2_reg_1017 <= y_mid2_fu_523_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_768_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_18_reg_1161 <= tmp_18_fu_806_p1;
                tmp_19_reg_1166 <= tmp_19_fu_810_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_i_fu_597_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_19_i_reg_1107 <= tmp_19_i_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_768_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_27_i_mid2_v_reg_1156 <= tmp_27_i_mid2_v_fu_798_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1147_pp2_iter2_reg = ap_const_lv1_0))) then
                tmp_35_i_i1_reg_1202 <= tmp_35_i_i1_fu_858_p2;
                tmp_i_i1_5_reg_1197 <= tmp_i_i1_5_fu_853_p2;
                tmp_i_i1_reg_1192 <= tmp_i_i1_fu_848_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_4_reg_1037 <= grp_fu_913_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_9_reg_949 <= tmp_9_fu_447_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (tmp_i_reg_1098 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                tmp_i_i_reg_1128 <= tmp_i_i_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_i_reg_1098 <= tmp_i_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (tmp_i_reg_1098 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then
                val_assign_reg_1133 <= val_assign_fu_676_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (version_1_vld_reg = ap_const_logic_0) and (version_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_in = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1)))) then
                version_1_data_reg <= version_1_data_in;
            end if;
        end if;
    end process;
    ap_return(31 downto 0) <= "00000000000000000000000000000000";
    ap_exit_tran_regpp1(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1, ap_sig_ioackin_MAXI_ARREADY, exitcond_fu_465_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state19, exitcond_flatten1_fu_507_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, exitcond_flatten_fu_768_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage2_subdone, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, ap_CS_fsm_state38, ap_exit_tran_regpp1, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_465_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_465_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((exitcond_flatten1_fu_507_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_exit_tran_regpp1 = ap_const_lv2_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((ap_exit_tran_regpp1 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond_flatten_fu_768_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond_flatten_fu_768_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state38 => 
                if ((not(((version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    MAXI_ARADDR <= tmp_1_fu_451_p1(32 - 1 downto 0);
    MAXI_ARLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_949),32));

    MAXI_ARVALID_assign_proc : process(ap_CS_fsm_state6, ap_reg_ioackin_MAXI_ARREADY)
    begin
        if (((ap_reg_ioackin_MAXI_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            MAXI_ARVALID <= ap_const_logic_1;
        else 
            MAXI_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_966, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_966 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MAXI_RREADY <= ap_const_logic_1;
        else 
            MAXI_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_blk_n_AR_assign_proc : process(m_axi_MAXI_ARREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            MAXI_blk_n_AR <= m_axi_MAXI_ARREADY;
        else 
            MAXI_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_R_assign_proc : process(m_axi_MAXI_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_966)
    begin
        if (((exitcond_reg_966 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MAXI_blk_n_R <= m_axi_MAXI_RVALID;
        else 
            MAXI_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(22);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(23);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state29 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(26);
    ap_CS_fsm_state36 <= ap_CS_fsm(28);
    ap_CS_fsm_state37 <= ap_CS_fsm(29);
    ap_CS_fsm_state38 <= ap_CS_fsm(30);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_966, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_reg_966 = ap_const_lv1_0) and (ap_const_logic_0 = MAXI_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_966, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_reg_966 = ap_const_lv1_0) and (ap_const_logic_0 = MAXI_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter1_assign_proc : process(exitcond_reg_966, MAXI_RVALID)
    begin
                ap_block_state14_pp0_stage0_iter1 <= ((exitcond_reg_966 = ap_const_lv1_0) and (ap_const_logic_0 = MAXI_RVALID));
    end process;

        ap_block_state15_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state38_assign_proc : process(r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in)
    begin
                ap_block_state38 <= ((version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state13_assign_proc : process(exitcond_fu_465_p2)
    begin
        if ((exitcond_fu_465_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state31_assign_proc : process(exitcond_flatten_fu_768_p2)
    begin
        if ((exitcond_flatten_fu_768_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, ap_CS_fsm_state38)
    begin
        if ((not(((version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_i_phi_fu_357_p4_assign_proc : process(i_i_reg_353, tmp_i_reg_1098, ap_CS_fsm_pp1_stage0, i_reg_1102, val_assign_reg_1133, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (tmp_i_reg_1098 = ap_const_lv1_1) and (val_assign_reg_1133 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_i_phi_fu_357_p4 <= i_reg_1102;
        else 
            ap_phi_mux_i_i_phi_fu_357_p4 <= i_i_reg_353;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_312_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_966, indvar_reg_308, indvar_next_reg_970)
    begin
        if (((exitcond_reg_966 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_phi_fu_312_p4 <= indvar_next_reg_970;
        else 
            ap_phi_mux_indvar_phi_fu_312_p4 <= indvar_reg_308;
        end if; 
    end process;


    ap_phi_mux_x_i_phi_fu_379_p4_assign_proc : process(x_i_reg_375, exitcond_flatten_reg_1147, ap_CS_fsm_pp2_stage0, tmp_27_i_mid2_v_reg_1156, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond_flatten_reg_1147 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_x_i_phi_fu_379_p4 <= tmp_27_i_mid2_v_reg_1156;
        else 
            ap_phi_mux_x_i_phi_fu_379_p4 <= x_i_reg_375;
        end if; 
    end process;


    ap_predicate_tran27to28_state26_assign_proc : process(tmp_i_reg_1098, val_assign_fu_676_p2)
    begin
                ap_predicate_tran27to28_state26 <= ((val_assign_fu_676_p2 = ap_const_lv1_1) and (tmp_i_reg_1098 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, ap_CS_fsm_state38)
    begin
        if ((not(((version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_MAXI_ARREADY_assign_proc : process(MAXI_ARREADY, ap_reg_ioackin_MAXI_ARREADY)
    begin
        if ((ap_reg_ioackin_MAXI_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_MAXI_ARREADY <= MAXI_ARREADY;
        else 
            ap_sig_ioackin_MAXI_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    b_1_ack_in_assign_proc : process(b_1_vld_reg)
    begin
        if (((b_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (b_1_vld_reg = ap_const_logic_1)))) then 
            b_1_ack_in <= ap_const_logic_1;
        else 
            b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    b_1_vld_in_assign_proc : process(tmp_13_fu_897_p2, ap_CS_fsm_state36)
    begin
        if (((tmp_13_fu_897_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            b_1_vld_in <= ap_const_logic_1;
        else 
            b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    current_V_1_fu_825_p2 <= std_logic_vector(unsigned(tmp_20_fu_820_p2) - unsigned(grp_fu_918_p3));
    current_V_fu_558_p2 <= std_logic_vector(unsigned(tmp_15_fu_553_p2) - unsigned(tmp_4_reg_1037));
    exitcond1_fu_518_p2 <= "0" when (y_reg_342 = height_read_reg_936) else "1";
    exitcond2_fu_779_p2 <= "0" when (y_i_reg_410 = height_read_reg_936) else "1";
    exitcond_flatten1_fu_507_p2 <= "1" when (indvar_flatten1_reg_320 = bound_reg_1003) else "0";
    exitcond_flatten_fu_768_p2 <= "1" when (indvar_flatten_reg_364 = bound_reg_1003) else "0";
    exitcond_fu_465_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_312_p4 = tmp_9_reg_949) else "0";

    g_1_ack_in_assign_proc : process(g_1_vld_reg)
    begin
        if (((g_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (g_1_vld_reg = ap_const_logic_1)))) then 
            g_1_ack_in <= ap_const_logic_1;
        else 
            g_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    g_1_vld_in_assign_proc : process(tmp_13_fu_897_p2, ap_CS_fsm_state36)
    begin
        if (((tmp_13_fu_897_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            g_1_vld_in <= ap_const_logic_1;
        else 
            g_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_496_p0 <= grp_fu_496_p00(32 - 1 downto 0);
    grp_fu_496_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_read_reg_936),64));
    grp_fu_496_p1 <= grp_fu_496_p10(32 - 1 downto 0);
    grp_fu_496_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_read_reg_930),64));

    height_0_ack_out_assign_proc : process(r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, ap_CS_fsm_state38)
    begin
        if ((not(((version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            height_0_ack_out <= ap_const_logic_1;
        else 
            height_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_602_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_i_phi_fu_357_p4) + unsigned(ap_const_lv12_1));
    i_i_cast6_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_i_phi_fu_357_p4),15));
    indvar1_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_308_pp0_iter1_reg),64));
    indvar_flatten_next1_fu_512_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_320) + unsigned(ap_const_lv64_1));
    indvar_flatten_next_fu_773_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_364) + unsigned(ap_const_lv64_1));
    indvar_next_fu_470_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_312_p4) + unsigned(ap_const_lv30_1));

    length_r_0_ack_out_assign_proc : process(r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, ap_CS_fsm_state38)
    begin
        if ((not(((version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            length_r_0_ack_out <= ap_const_logic_1;
        else 
            length_r_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_cast4_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(numberOfPixelsVisted_1_reg_1090),15));
    lhs_V_3_cast_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_V_1_reg_1176),14));
    lhs_V_cast_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_V_reg_1043),14));
    lhs_V_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_cast_reg_1142),45));
    p_shl_i1_cast_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i1_fu_706_p3),15));
    p_shl_i1_fu_706_p3 <= (numberOfPixelsVisted_1_reg_1090 & ap_const_lv2_0);
    p_shl_i_cast_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_612_p3),15));
    p_shl_i_fu_612_p3 <= (ap_phi_mux_i_i_phi_fu_357_p4 & ap_const_lv2_0);

    r_1_ack_in_assign_proc : process(r_1_vld_reg)
    begin
        if (((r_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (r_1_vld_reg = ap_const_logic_1)))) then 
            r_1_ack_in <= ap_const_logic_1;
        else 
            r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    r_1_vld_in_assign_proc : process(tmp_13_fu_897_p2, ap_CS_fsm_state36)
    begin
        if (((tmp_13_fu_897_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            r_1_vld_in <= ap_const_logic_1;
        else 
            r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_582_p2 <= std_logic_vector(unsigned(ap_const_lv14_2) + unsigned(lhs_V_cast_fu_568_p1));
        r_V_2_cast_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_fu_717_p2),44));

    r_V_2_fu_717_p2 <= std_logic_vector(unsigned(p_shl_i1_cast_fu_713_p1) - unsigned(lhs_V_1_cast4_fu_703_p1));
    r_V_3_fu_746_p2 <= std_logic_vector(unsigned(ap_const_lv45_1) + unsigned(lhs_V_fu_743_p1));
    r_V_4_fu_757_p2 <= std_logic_vector(unsigned(ap_const_lv45_2) + unsigned(lhs_V_fu_743_p1));
    r_V_5_fu_837_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(lhs_V_3_cast_fu_834_p1));
    r_V_fu_571_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(lhs_V_cast_fu_568_p1));
    result_V_fu_872_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(agg_result_V_load_i_reg_398));

    sectionData_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, indvar1_fu_476_p1, tmp_6_fu_563_p1, tmp_5_fu_577_p1, tmp_33_i_fu_843_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            sectionData_address0 <= tmp_33_i_fu_843_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sectionData_address0 <= tmp_5_fu_577_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sectionData_address0 <= tmp_6_fu_563_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sectionData_address0 <= indvar1_fu_476_p1(13 - 1 downto 0);
        else 
            sectionData_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sectionData_address1_assign_proc : process(ap_CS_fsm_state22, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, tmp_s_fu_588_p1, tmp_32_i_fu_830_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            sectionData_address1 <= tmp_32_i_fu_830_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sectionData_address1 <= tmp_s_fu_588_p1(13 - 1 downto 0);
        else 
            sectionData_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sectionData_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            sectionData_ce0 <= ap_const_logic_1;
        else 
            sectionData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sectionData_ce1_assign_proc : process(ap_CS_fsm_state22, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            sectionData_ce1 <= ap_const_logic_1;
        else 
            sectionData_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sectionData_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_reg_966_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_966_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sectionData_we0 <= ap_const_logic_1;
        else 
            sectionData_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_670_p2 <= (tmp_i_i_4_fu_660_p2 and tmp_35_i_i_fu_665_p2);
    tmp2_fu_691_p2 <= (tmp_17_fu_686_p2 or tmp_16_fu_681_p2);
    tmp3_fu_863_p2 <= (tmp_i_i1_5_reg_1197 and tmp_35_i_i1_reg_1202);
    tmp_10_fu_487_p1 <= length_read_reg_930(13 - 1 downto 0);
    tmp_11_fu_545_p1 <= x_cast_mid2_v_fu_537_p3(13 - 1 downto 0);
    tmp_12_fu_697_p2 <= (tmp2_fu_691_p2 or sectionData_load_reg_1053);
    tmp_13_fu_897_p2 <= "1" when (unsigned(agg_result_V_1_i_reg_386) < unsigned(p_0115_1_fu_132)) else "0";
    tmp_14_fu_549_p1 <= y_mid2_fu_523_p3(13 - 1 downto 0);
    tmp_15_fu_553_p2 <= std_logic_vector(shift_left(unsigned(tmp_4_reg_1037),to_integer(unsigned('0' & ap_const_lv13_2(13-1 downto 0)))));
    tmp_16_fu_681_p2 <= std_logic_vector(shift_left(unsigned(sectionData_load_2_reg_1081),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    tmp_17_fu_686_p2 <= std_logic_vector(shift_left(unsigned(sectionData_load_1_reg_1072),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    tmp_18_fu_806_p1 <= tmp_27_i_mid2_v_fu_798_p3(13 - 1 downto 0);
    tmp_19_fu_810_p1 <= y_i_mid2_fu_784_p3(13 - 1 downto 0);
    tmp_19_i_fu_624_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_620_p1) - unsigned(i_i_cast6_fu_608_p1));
    tmp_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram1_reg_925),64));
    tmp_20_fu_820_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_918_p3),to_integer(unsigned('0' & ap_const_lv13_2(13-1 downto 0)))));
        tmp_20_i_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_i_fu_624_p2),64));

    tmp_21_i_fu_635_p2 <= std_logic_vector(signed(tmp_19_i_reg_1107) + signed(ap_const_lv15_1));
        tmp_22_i_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_i_fu_635_p2),64));

    tmp_23_i_fu_645_p2 <= std_logic_vector(signed(tmp_19_i_reg_1107) + signed(ap_const_lv15_2));
        tmp_24_i_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_i_fu_645_p2),64));

    tmp_27_i_mid2_v_fu_798_p3 <= 
        ap_phi_mux_x_i_phi_fu_379_p4 when (exitcond2_fu_779_p2(0) = '1') else 
        x_1_fu_792_p2;
    tmp_32_i_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_V_1_reg_1176),64));
    tmp_33_i_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_fu_837_p2),64));
    tmp_34_agg_result_V_1_fu_886_p3 <= 
        result_V_fu_872_p2 when (val_assign_1_fu_867_p2(0) = '1') else 
        agg_result_V_load_i_reg_398;
    tmp_34_agg_result_V_s_fu_878_p3 <= 
        result_V_fu_872_p2 when (val_assign_1_fu_867_p2(0) = '1') else 
        agg_result_V_1_i_reg_386;
    tmp_35_i_i1_fu_858_p2 <= "1" when (sectionData_q0 = sectionData_load_2_reg_1081) else "0";
    tmp_35_i_i_fu_665_p2 <= "1" when (sectionData_load_2_reg_1081 = visited_q1) else "0";
    tmp_3_i_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_fu_746_p2),64));
    tmp_5_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_571_p2),64));
    tmp_5_i_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_757_p2),64));
    tmp_6_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_V_fu_558_p2),64));
    tmp_6_i_fu_732_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(numberOfPixelsVisted_1_reg_1090));
    tmp_8_fu_431_p2 <= std_logic_vector(shift_left(unsigned(length_r_0_data_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_9_fu_447_p1 <= grp_fu_443_p2(30 - 1 downto 0);
    tmp_fu_437_p2 <= std_logic_vector(unsigned(tmp_8_fu_431_p2) - unsigned(length_r_0_data_reg));
    tmp_i1_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_cast_fu_723_p1),64));
    tmp_i_fu_597_p2 <= "1" when (unsigned(ap_phi_mux_i_i_phi_fu_357_p4) < unsigned(numberOfPixelsVisted_1_reg_1090)) else "0";
    tmp_i_i1_5_fu_853_p2 <= "1" when (sectionData_q0 = sectionData_load_1_reg_1072) else "0";
    tmp_i_i1_fu_848_p2 <= "1" when (sectionData_q1 = sectionData_load_reg_1053) else "0";
    tmp_i_i_4_fu_660_p2 <= "1" when (sectionData_load_1_reg_1072 = visited_q0) else "0";
    tmp_i_i_fu_655_p2 <= "1" when (sectionData_load_reg_1053 = visited_q0) else "0";
    tmp_s_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_582_p2),64));
    val_assign_1_fu_867_p2 <= (tmp_i_i1_reg_1192 and tmp3_fu_863_p2);
    val_assign_fu_676_p2 <= (tmp_i_i_reg_1128 and tmp1_fu_670_p2);

    version_1_ack_in_assign_proc : process(version_1_vld_reg)
    begin
        if (((version_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1)))) then 
            version_1_ack_in <= ap_const_logic_1;
        else 
            version_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    version_1_data_in_assign_proc : process(tmp_12_fu_697_p2, ap_CS_fsm_state29, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            version_1_data_in <= tmp_12_fu_697_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            version_1_data_in <= ap_const_lv32_1;
        else 
            version_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    version_1_vld_in_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            version_1_vld_in <= ap_const_logic_1;
        else 
            version_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    visited_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state30, ap_block_pp1_stage0, tmp_20_i_fu_630_p1, tmp_22_i_fu_640_p1, ap_block_pp1_stage1, tmp_3_i_fu_752_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            visited_address0 <= tmp_3_i_fu_752_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            visited_address0 <= tmp_22_i_fu_640_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            visited_address0 <= tmp_20_i_fu_630_p1(13 - 1 downto 0);
        else 
            visited_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    visited_address1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_block_pp1_stage1, tmp_24_i_fu_650_p1, tmp_i1_fu_727_p1, tmp_5_i_fu_763_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            visited_address1 <= tmp_5_i_fu_763_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            visited_address1 <= tmp_i1_fu_727_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            visited_address1 <= tmp_24_i_fu_650_p1(13 - 1 downto 0);
        else 
            visited_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    visited_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            visited_ce0 <= ap_const_logic_1;
        else 
            visited_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    visited_ce1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            visited_ce1 <= ap_const_logic_1;
        else 
            visited_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    visited_d1_assign_proc : process(sectionData_load_reg_1053, sectionData_load_2_reg_1081, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            visited_d1 <= sectionData_load_2_reg_1081;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            visited_d1 <= sectionData_load_reg_1053;
        else 
            visited_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    visited_we0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            visited_we0 <= ap_const_logic_1;
        else 
            visited_we0 <= ap_const_logic_0;
        end if; 
    end process;


    visited_we1_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            visited_we1 <= ap_const_logic_1;
        else 
            visited_we1 <= ap_const_logic_0;
        end if; 
    end process;

    x_1_fu_792_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_x_i_phi_fu_379_p4));
    x_cast_mid2_v_fu_537_p3 <= 
        x_reg_331 when (exitcond1_fu_518_p2(0) = '1') else 
        x_s_fu_531_p2;
    x_s_fu_531_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(x_reg_331));
    y_1_fu_908_p2 <= std_logic_vector(unsigned(y_mid2_reg_1017) + unsigned(ap_const_lv32_1));
    y_2_fu_814_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(y_i_mid2_fu_784_p3));
    y_i_mid2_fu_784_p3 <= 
        y_i_reg_410 when (exitcond2_fu_779_p2(0) = '1') else 
        ap_const_lv32_0;
    y_mid2_fu_523_p3 <= 
        y_reg_342 when (exitcond1_fu_518_p2(0) = '1') else 
        ap_const_lv32_0;
end behav;
