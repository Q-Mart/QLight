-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toplevel is
generic (
    C_M_AXI_MAXI_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_USER_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_MAXI_AWVALID : OUT STD_LOGIC;
    m_axi_MAXI_AWREADY : IN STD_LOGIC;
    m_axi_MAXI_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_AWUSER_WIDTH-1 downto 0);
    m_axi_MAXI_WVALID : OUT STD_LOGIC;
    m_axi_MAXI_WREADY : IN STD_LOGIC;
    m_axi_MAXI_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH/8-1 downto 0);
    m_axi_MAXI_WLAST : OUT STD_LOGIC;
    m_axi_MAXI_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_WUSER_WIDTH-1 downto 0);
    m_axi_MAXI_ARVALID : OUT STD_LOGIC;
    m_axi_MAXI_ARREADY : IN STD_LOGIC;
    m_axi_MAXI_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ARUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RVALID : IN STD_LOGIC;
    m_axi_MAXI_RREADY : OUT STD_LOGIC;
    m_axi_MAXI_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_RLAST : IN STD_LOGIC;
    m_axi_MAXI_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_RUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BVALID : IN STD_LOGIC;
    m_axi_MAXI_BREADY : OUT STD_LOGIC;
    m_axi_MAXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of toplevel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "toplevel,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=7.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.705000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=34,HLS_SYN_DSP=13,HLS_SYN_FF=3114,HLS_SYN_LUT=3277,HLS_VERSION=2018_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_const_lv45_1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_const_lv45_2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal ram : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_r_0_vld_reg : STD_LOGIC := '0';
    signal length_r_0_ack_out : STD_LOGIC;
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal height_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal height_0_vld_reg : STD_LOGIC := '0';
    signal height_0_ack_out : STD_LOGIC;
    signal r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal r_1_vld_reg : STD_LOGIC := '0';
    signal r_1_vld_in : STD_LOGIC;
    signal r_1_ack_in : STD_LOGIC;
    signal g_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_1_vld_reg : STD_LOGIC := '0';
    signal g_1_vld_in : STD_LOGIC;
    signal g_1_ack_in : STD_LOGIC;
    signal b_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal b_1_vld_reg : STD_LOGIC := '0';
    signal b_1_vld_in : STD_LOGIC;
    signal b_1_ack_in : STD_LOGIC;
    signal version_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal version_1_vld_reg : STD_LOGIC := '0';
    signal version_1_vld_in : STD_LOGIC;
    signal version_1_ack_in : STD_LOGIC;
    signal sectionData_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sectionData_ce0 : STD_LOGIC;
    signal sectionData_we0 : STD_LOGIC;
    signal sectionData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sectionData_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sectionData_ce1 : STD_LOGIC;
    signal sectionData_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOfPixelsVisted : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal visited_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal visited_ce0 : STD_LOGIC;
    signal visited_we0 : STD_LOGIC;
    signal visited_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal visited_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal visited_ce1 : STD_LOGIC;
    signal visited_we1 : STD_LOGIC;
    signal visited_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal visited_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal MAXI_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_1128 : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal exitcond_flatten1_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond1_reg_1407 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_1407_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal MAXI_AWVALID : STD_LOGIC;
    signal MAXI_AWREADY : STD_LOGIC;
    signal MAXI_WVALID : STD_LOGIC;
    signal MAXI_WREADY : STD_LOGIC;
    signal MAXI_ARVALID : STD_LOGIC;
    signal MAXI_ARREADY : STD_LOGIC;
    signal MAXI_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_RVALID : STD_LOGIC;
    signal MAXI_RREADY : STD_LOGIC;
    signal MAXI_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_RLAST : STD_LOGIC;
    signal MAXI_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BVALID : STD_LOGIC;
    signal MAXI_BREADY : STD_LOGIC;
    signal MAXI_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_369 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_reg_369_pp0_iter1_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_i_reg_414 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_reg_425 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_i_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_V_1_i_reg_447 : STD_LOGIC_VECTOR (11 downto 0);
    signal agg_result_V_load_i_reg_459 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_i_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar2_reg_482 : STD_LOGIC_VECTOR (29 downto 0);
    signal reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_state40_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state41_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state42_pp3_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_MAXI_WREADY : STD_LOGIC;
    signal ap_block_state42_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ram1_reg_1084 : STD_LOGIC_VECTOR (29 downto 0);
    signal length_read_reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal height_read_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1104 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_538_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_9_reg_1109 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal MAXI_addr_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_MAXI_ARREADY : STD_LOGIC;
    signal p_add_i32_shr_cast8_fu_552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_add_i32_shr_cast8_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1128_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_561_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next_reg_1132 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal MAXI_addr_read_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_11_fu_600_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_reg_1180 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_584_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_1185 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_ioackin_MAXI_AWREADY : STD_LOGIC;
    signal ap_block_state19_io : BOOLEAN;
    signal indvar_flatten_next1_fu_618_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next1_reg_1195 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_mid2_fu_629_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_mid2_reg_1200 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_cast_mid2_v_fu_643_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_cast_mid2_v_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_651_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_12_reg_1210 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_fu_655_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_reg_1215 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1079_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_reg_1220 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal current_V_fu_664_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of current_V_fu_664_p2 : signal is "no";
    signal current_V_reg_1226 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal sectionData_load_4_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal sectionData_load_5_reg_1254 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOfPixelsVisted_1_reg_1262 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state24_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_fu_708_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_1274 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_15_i_fu_730_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_i_reg_1279 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state25_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal tmp_i_i_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_1300 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state26_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal y_1_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal r_V_2_cast_fu_872_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_2_cast_reg_1314 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal exitcond_flatten_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state31_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state35_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_1319_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1319_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1319_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_922_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next_reg_1323 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal y_i_mid2_fu_933_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_i_mid2_reg_1328 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_i_mid2_fu_947_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_i_mid2_reg_1334 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_i_mid2_reg_1334_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_fu_959_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state32_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state34_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state36_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state38_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal grp_fu_955_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_5_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_V_1_fu_984_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal current_V_1_reg_1350 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_V_3_cast_fu_994_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lhs_V_3_cast_reg_1361 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_i_i1_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i1_reg_1376 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i1_6_fu_1024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i1_6_reg_1381 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i1_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i1_reg_1386 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_fu_1034_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal result_V_reg_1391 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_agg_result_V_s_fu_1049_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal tmp_25_agg_result_V_1_fu_1056_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_1068_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_predicate_tran27to28_state26 : BOOLEAN;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state31 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state40 : STD_LOGIC;
    signal ap_phi_mux_indvar_phi_fu_373_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_flatten1_reg_381 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_i_phi_fu_418_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_429_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_x_i_phi_fu_440_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_y_i_phi_fu_475_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar1_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_i_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_i_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal tmp_20_i_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_901_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_i_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_i_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal tmp_23_i_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_i_fu_1013_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar3_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_MAXI_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_MAXI_AWREADY : STD_LOGIC := '0';
    signal ap_block_state47 : BOOLEAN;
    signal ap_reg_ioackin_MAXI_WREADY : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal tmp_6_i_fu_881_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_0111_1_fu_152 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_0111_1_agg_result_V_fu_819_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_local_1_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_local_1_pixelR_ass_fu_812_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_local_1_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_local_1_pixelG_ass_fu_805_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_local_1_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal r_local_1_pixelB_ass_fu_797_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_8_fu_522_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_584_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_s_fu_637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_659_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_V_cast_fu_674_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_fu_677_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_1_fu_688_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_i_fu_718_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_i_cast_fu_726_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_i_cast6_fu_714_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_17_i_fu_741_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_19_i_fu_751_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal tmp_i_i_4_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_i1_fu_855_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_i1_cast_fu_862_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_1_cast4_fu_852_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_2_fu_866_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_fu_892_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_3_fu_895_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_4_fu_906_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal exitcond_i8_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_972_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_i2_fu_976_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_fu_968_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_5_fu_997_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_6_fu_1008_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp2_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_exit_tran_regpp1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal grp_fu_584_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_584_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component toplevel_mul_32s_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_mul_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component toplevel_mac_mulaeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component toplevel_sectionDbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_visited IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        ram : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        r : IN STD_LOGIC_VECTOR (31 downto 0);
        r_ap_vld : IN STD_LOGIC;
        g : IN STD_LOGIC_VECTOR (31 downto 0);
        g_ap_vld : IN STD_LOGIC;
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        b_ap_vld : IN STD_LOGIC;
        version : IN STD_LOGIC_VECTOR (31 downto 0);
        version_ap_vld : IN STD_LOGIC );
    end component;


    component toplevel_MAXI_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sectionData_U : component toplevel_sectionDbkb
    generic map (
        DataWidth => 32,
        AddressRange => 6750,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sectionData_address0,
        ce0 => sectionData_ce0,
        we0 => sectionData_we0,
        d0 => MAXI_addr_read_reg_1137,
        q0 => sectionData_q0,
        address1 => sectionData_address1,
        ce1 => sectionData_ce1,
        q1 => sectionData_q1);

    visited_U : component toplevel_visited
    generic map (
        DataWidth => 32,
        AddressRange => 6750,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => visited_address0,
        ce0 => visited_ce0,
        we0 => visited_we0,
        d0 => sectionData_load_4_reg_1246,
        q0 => visited_q0,
        address1 => visited_address1,
        ce1 => visited_ce1,
        we1 => visited_we1,
        d1 => visited_d1,
        q1 => visited_q1);

    toplevel_AXILiteS_s_axi_U : component toplevel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        ram => ram,
        length_r => length_r,
        height => height,
        r => r_1_data_reg,
        r_ap_vld => r_1_vld_reg,
        g => g_1_data_reg,
        g_ap_vld => g_1_vld_reg,
        b => b_1_data_reg,
        b_ap_vld => b_1_vld_reg,
        version => version_1_data_reg,
        version_ap_vld => version_1_vld_reg);

    toplevel_MAXI_m_axi_U : component toplevel_MAXI_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MAXI_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MAXI_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MAXI_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MAXI_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MAXI_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MAXI_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MAXI_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MAXI_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MAXI_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MAXI_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MAXI_CACHE_VALUE)
    port map (
        AWVALID => m_axi_MAXI_AWVALID,
        AWREADY => m_axi_MAXI_AWREADY,
        AWADDR => m_axi_MAXI_AWADDR,
        AWID => m_axi_MAXI_AWID,
        AWLEN => m_axi_MAXI_AWLEN,
        AWSIZE => m_axi_MAXI_AWSIZE,
        AWBURST => m_axi_MAXI_AWBURST,
        AWLOCK => m_axi_MAXI_AWLOCK,
        AWCACHE => m_axi_MAXI_AWCACHE,
        AWPROT => m_axi_MAXI_AWPROT,
        AWQOS => m_axi_MAXI_AWQOS,
        AWREGION => m_axi_MAXI_AWREGION,
        AWUSER => m_axi_MAXI_AWUSER,
        WVALID => m_axi_MAXI_WVALID,
        WREADY => m_axi_MAXI_WREADY,
        WDATA => m_axi_MAXI_WDATA,
        WSTRB => m_axi_MAXI_WSTRB,
        WLAST => m_axi_MAXI_WLAST,
        WID => m_axi_MAXI_WID,
        WUSER => m_axi_MAXI_WUSER,
        ARVALID => m_axi_MAXI_ARVALID,
        ARREADY => m_axi_MAXI_ARREADY,
        ARADDR => m_axi_MAXI_ARADDR,
        ARID => m_axi_MAXI_ARID,
        ARLEN => m_axi_MAXI_ARLEN,
        ARSIZE => m_axi_MAXI_ARSIZE,
        ARBURST => m_axi_MAXI_ARBURST,
        ARLOCK => m_axi_MAXI_ARLOCK,
        ARCACHE => m_axi_MAXI_ARCACHE,
        ARPROT => m_axi_MAXI_ARPROT,
        ARQOS => m_axi_MAXI_ARQOS,
        ARREGION => m_axi_MAXI_ARREGION,
        ARUSER => m_axi_MAXI_ARUSER,
        RVALID => m_axi_MAXI_RVALID,
        RREADY => m_axi_MAXI_RREADY,
        RDATA => m_axi_MAXI_RDATA,
        RLAST => m_axi_MAXI_RLAST,
        RID => m_axi_MAXI_RID,
        RUSER => m_axi_MAXI_RUSER,
        RRESP => m_axi_MAXI_RRESP,
        BVALID => m_axi_MAXI_BVALID,
        BREADY => m_axi_MAXI_BREADY,
        BRESP => m_axi_MAXI_BRESP,
        BID => m_axi_MAXI_BID,
        BUSER => m_axi_MAXI_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => MAXI_ARVALID,
        I_ARREADY => MAXI_ARREADY,
        I_ARADDR => MAXI_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => MAXI_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => MAXI_RVALID,
        I_RREADY => MAXI_RREADY,
        I_RDATA => MAXI_RDATA,
        I_RID => MAXI_RID,
        I_RUSER => MAXI_RUSER,
        I_RRESP => MAXI_RRESP,
        I_RLAST => MAXI_RLAST,
        I_AWVALID => MAXI_AWVALID,
        I_AWREADY => MAXI_AWREADY,
        I_AWADDR => MAXI_addr_reg_1116,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => p_add_i32_shr_cast8_reg_1123,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => MAXI_WVALID,
        I_WREADY => MAXI_WREADY,
        I_WDATA => reg_505,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => MAXI_BVALID,
        I_BREADY => MAXI_BREADY,
        I_BRESP => MAXI_BRESP,
        I_BID => MAXI_BID,
        I_BUSER => MAXI_BUSER);

    toplevel_mul_32s_cud_U1 : component toplevel_mul_32s_cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_1104,
        din1 => height_read_reg_1096,
        ce => ap_const_logic_1,
        dout => grp_fu_534_p2);

    toplevel_mul_32nsdEe_U2 : component toplevel_mul_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_584_p0,
        din1 => grp_fu_584_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_584_p2);

    toplevel_mul_32s_cud_U3 : component toplevel_mul_32s_cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => y_i_mid2_reg_1328,
        din1 => length_read_reg_1089,
        ce => ap_const_logic_1,
        dout => grp_fu_955_p2);

    toplevel_mac_mulaeOg_U4 : component toplevel_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => tmp_13_reg_1215,
        din1 => tmp_11_reg_1180,
        din2 => tmp_12_reg_1210,
        dout => grp_fu_1079_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and ((ap_predicate_tran27to28_state26 = ap_const_boolean_1) or (tmp_i_reg_1270 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state40) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state19_io) and (exitcond_flatten1_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state40)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state40);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state19_io) and (exitcond_flatten1_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_MAXI_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    if ((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = MAXI_ARREADY)) then 
                        ap_reg_ioackin_MAXI_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_MAXI_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_MAXI_AWREADY <= ap_const_logic_0;
            else
                if (((exitcond_flatten1_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    if ((ap_const_boolean_0 = ap_block_state19_io)) then 
                        ap_reg_ioackin_MAXI_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = MAXI_AWREADY)) then 
                        ap_reg_ioackin_MAXI_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_MAXI_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_MAXI_WREADY <= ap_const_logic_0;
            else
                if (((exitcond1_reg_1407_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then 
                        ap_reg_ioackin_MAXI_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (ap_const_logic_1 = MAXI_WREADY))) then 
                        ap_reg_ioackin_MAXI_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_1_i_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1319_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                agg_result_V_1_i_reg_447 <= tmp_25_agg_result_V_s_fu_1049_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                agg_result_V_1_i_reg_447 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    agg_result_V_load_i_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1319_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                agg_result_V_load_i_reg_459 <= tmp_25_agg_result_V_1_fu_1056_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                agg_result_V_load_i_reg_459 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    ap_exit_tran_regpp1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                if ((tmp_i_reg_1270 = ap_const_lv1_0)) then 
                    ap_exit_tran_regpp1(0) <= '1';
                elsif ((ap_predicate_tran27to28_state26 = ap_const_boolean_1)) then 
                    ap_exit_tran_regpp1(0) <= '0';
                end if;
            end if; 
        end if;
    end process;

    ap_return_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (b_1_vld_reg = ap_const_logic_0) and (b_1_vld_in = ap_const_logic_1))) then 
                b_1_vld_reg <= ap_const_logic_1;
            elsif (((b_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (b_1_vld_reg = ap_const_logic_1))) then 
                b_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    b_local_1_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1270 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                b_local_1_fu_156 <= b_local_1_pixelR_ass_fu_812_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                b_local_1_fu_156 <= sectionData_q1;
            end if; 
        end if;
    end process;

    g_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (g_1_vld_reg = ap_const_logic_0) and (g_1_vld_in = ap_const_logic_1))) then 
                g_1_vld_reg <= ap_const_logic_1;
            elsif (((g_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (g_1_vld_reg = ap_const_logic_1))) then 
                g_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    g_local_1_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1270 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                g_local_1_fu_160 <= g_local_1_pixelG_ass_fu_805_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                g_local_1_fu_160 <= sectionData_q0;
            end if; 
        end if;
    end process;

    height_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_i_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_i_reg_1270 = ap_const_lv1_1) and (val_assign_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_i_reg_414 <= i_reg_1274;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_i_reg_414 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar2_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state19_io) and (exitcond_flatten1_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                indvar2_reg_482 <= ap_const_lv30_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond1_fu_1063_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                indvar2_reg_482 <= indvar_next1_fu_1068_p2;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                indvar_flatten1_reg_381 <= indvar_flatten_next1_reg_1195;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar_flatten1_reg_381 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1319 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_425 <= indvar_flatten_next_reg_1323;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                indvar_flatten_reg_425 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1128 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_reg_369 <= indvar_next_reg_1132;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                indvar_reg_369 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    length_r_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    numberOfPixelsVisted_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                numberOfPixelsVisted <= tmp_6_i_fu_881_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                numberOfPixelsVisted <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_0111_1_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1270 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                p_0111_1_fu_152 <= p_0111_1_agg_result_V_fu_819_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                p_0111_1_fu_152 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (r_1_vld_reg = ap_const_logic_0) and (r_1_vld_in = ap_const_logic_1))) then 
                r_1_vld_reg <= ap_const_logic_1;
            elsif (((r_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (r_1_vld_reg = ap_const_logic_1))) then 
                r_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    r_local_1_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1270 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                r_local_1_fu_164 <= r_local_1_pixelB_ass_fu_797_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                r_local_1_fu_164 <= sectionData_q0;
            end if; 
        end if;
    end process;

    reg_505_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond1_reg_1407 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                reg_505 <= sectionData_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                reg_505 <= sectionData_q1;
            end if; 
        end if;
    end process;

    version_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (version_1_vld_reg = ap_const_logic_0) and (version_1_vld_in = ap_const_logic_1))) then 
                version_1_vld_reg <= ap_const_logic_1;
            elsif (((version_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1))) then 
                version_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    x_i_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1319 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                x_i_reg_436 <= x_i_mid2_reg_1334;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                x_i_reg_436 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                x_reg_392 <= x_cast_mid2_v_reg_1205;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                x_reg_392 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_i_reg_471_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1319 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                y_i_reg_471 <= y_2_reg_1340;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                y_i_reg_471 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                y_reg_403 <= y_1_fu_847_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                y_reg_403 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1128 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                MAXI_addr_read_reg_1137 <= MAXI_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    MAXI_addr_reg_1116(29 downto 0) <= tmp_3_fu_542_p1(32 - 1 downto 0)(29 downto 0);
                    p_add_i32_shr_cast8_reg_1123(29 downto 0) <= p_add_i32_shr_cast8_fu_552_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (b_1_vld_reg = ap_const_logic_0) and (b_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (b_1_vld_in = ap_const_logic_1) and (b_1_vld_reg = ap_const_logic_1)))) then
                b_1_data_reg <= b_local_1_fu_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                bound_reg_1185 <= grp_fu_584_p2;
                tmp_11_reg_1180 <= tmp_11_fu_600_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1319_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                current_V_1_reg_1350 <= current_V_1_fu_984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                current_V_reg_1226 <= current_V_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond1_reg_1407 <= exitcond1_fu_1063_p2;
                exitcond1_reg_1407_pp3_iter1_reg <= exitcond1_reg_1407;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond_flatten_reg_1319 <= exitcond_flatten_fu_917_p2;
                exitcond_flatten_reg_1319_pp2_iter1_reg <= exitcond_flatten_reg_1319;
                exitcond_flatten_reg_1319_pp2_iter2_reg <= exitcond_flatten_reg_1319_pp2_iter1_reg;
                exitcond_flatten_reg_1319_pp2_iter3_reg <= exitcond_flatten_reg_1319_pp2_iter2_reg;
                x_i_mid2_reg_1334_pp2_iter1_reg <= x_i_mid2_reg_1334;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_1128 <= exitcond_fu_556_p2;
                exitcond_reg_1128_pp0_iter1_reg <= exitcond_reg_1128;
                indvar_reg_369_pp0_iter1_reg <= indvar_reg_369;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (g_1_vld_reg = ap_const_logic_0) and (g_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (g_1_vld_in = ap_const_logic_1) and (g_1_vld_reg = ap_const_logic_1)))) then
                g_1_data_reg <= g_local_1_fu_160;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (height_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (height_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (height_0_vld_reg = ap_const_logic_1)))) then
                height_0_data_reg <= height;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                height_read_reg_1096 <= height_0_data_reg;
                length_read_reg_1089 <= length_r_0_data_reg;
                tmp_reg_1104 <= tmp_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                i_reg_1274 <= i_fu_708_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                indvar_flatten_next1_reg_1195 <= indvar_flatten_next1_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                indvar_flatten_next_reg_1323 <= indvar_flatten_next_fu_922_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_next_reg_1132 <= indvar_next_fu_561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (length_r_0_vld_reg = ap_const_logic_1)))) then
                length_r_0_data_reg <= length_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (exitcond_flatten_reg_1319_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                    lhs_V_3_cast_reg_1361(12 downto 0) <= lhs_V_3_cast_fu_994_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                numberOfPixelsVisted_1_reg_1262 <= numberOfPixelsVisted;
                sectionData_load_4_reg_1246 <= sectionData_q1;
                sectionData_load_5_reg_1254 <= sectionData_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (r_1_vld_reg = ap_const_logic_0) and (r_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (r_1_vld_in = ap_const_logic_1) and (r_1_vld_reg = ap_const_logic_1)))) then
                r_1_data_reg <= r_local_1_fu_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                r_V_2_cast_reg_1314 <= r_V_2_cast_fu_872_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ram1_reg_1084 <= ram(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (exitcond_flatten_reg_1319_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                result_V_reg_1391 <= result_V_fu_1034_p2;
                tmp_26_i_i1_reg_1386 <= tmp_26_i_i1_fu_1029_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state19_io) and (exitcond_flatten1_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                tmp_12_reg_1210 <= tmp_12_fu_651_p1;
                tmp_13_reg_1215 <= tmp_13_fu_655_p1;
                x_cast_mid2_v_reg_1205 <= x_cast_mid2_v_fu_643_p3;
                y_mid2_reg_1200 <= y_mid2_fu_629_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_i_fu_703_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_15_i_reg_1279 <= tmp_15_i_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_6_reg_1220 <= grp_fu_1079_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_9_reg_1109 <= tmp_9_fu_538_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (exitcond_flatten_reg_1319_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                tmp_i1_5_reg_1345 <= grp_fu_955_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_reg_1319_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_i_i1_6_reg_1381 <= tmp_i_i1_6_fu_1024_p2;
                tmp_i_i1_reg_1376 <= tmp_i_i1_fu_1018_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (tmp_i_reg_1270 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                tmp_i_i_reg_1300 <= tmp_i_i_fu_761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_i_reg_1270 <= tmp_i_fu_703_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (tmp_i_reg_1270 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then
                val_assign_reg_1305 <= val_assign_fu_783_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (version_1_vld_reg = ap_const_logic_0) and (version_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_in = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1)))) then
                version_1_data_reg(0) <= '1';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_917_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                x_i_mid2_reg_1334 <= x_i_mid2_fu_947_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (exitcond_flatten_reg_1319 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                y_2_reg_1340 <= y_2_fu_959_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten_fu_917_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                y_i_mid2_reg_1328 <= y_i_mid2_fu_933_p3;
            end if;
        end if;
    end process;
    version_1_data_reg(31 downto 1) <= "0000000000000000000000000000000";
    ap_return(31 downto 0) <= "00000000000000000000000000000000";
    MAXI_addr_reg_1116(31 downto 30) <= "00";
    p_add_i32_shr_cast8_reg_1123(31 downto 30) <= "00";
    lhs_V_3_cast_reg_1361(13) <= '0';
    ap_exit_tran_regpp1(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1, ap_CS_fsm_state19, exitcond_flatten1_fu_613_p2, ap_enable_reg_pp3_iter2, ap_CS_fsm_state47, MAXI_BVALID, ap_enable_reg_pp3_iter1, ap_sig_ioackin_MAXI_ARREADY, exitcond_fu_556_p2, ap_enable_reg_pp0_iter0, ap_block_state19_io, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, exitcond_flatten_fu_917_p2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter4, exitcond1_fu_1063_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage2_subdone, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1_subdone, ap_enable_reg_pp2_iter3, ap_block_pp3_stage0_subdone, ap_exit_tran_regpp1, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_sig_ioackin_MAXI_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_556_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_556_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_boolean_0 = ap_block_state19_io) and (exitcond_flatten1_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_state19_io) and (exitcond_flatten1_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_exit_tran_regpp1 = ap_const_lv2_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((ap_exit_tran_regpp1 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond_flatten_fu_917_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond_flatten_fu_917_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond1_fu_1063_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond1_fu_1063_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if ((not(((ap_const_logic_0 = MAXI_BVALID) or (version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    MAXI_ARADDR <= tmp_3_fu_542_p1(32 - 1 downto 0);
    MAXI_ARLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1109),32));

    MAXI_ARVALID_assign_proc : process(ap_CS_fsm_state6, ap_reg_ioackin_MAXI_ARREADY)
    begin
        if (((ap_reg_ioackin_MAXI_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            MAXI_ARVALID <= ap_const_logic_1;
        else 
            MAXI_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_AWVALID_assign_proc : process(ap_CS_fsm_state19, exitcond_flatten1_fu_613_p2, ap_reg_ioackin_MAXI_AWREADY)
    begin
        if (((exitcond_flatten1_fu_613_p2 = ap_const_lv1_1) and (ap_reg_ioackin_MAXI_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            MAXI_AWVALID <= ap_const_logic_1;
        else 
            MAXI_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_BREADY_assign_proc : process(r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, ap_CS_fsm_state47, MAXI_BVALID)
    begin
        if ((not(((ap_const_logic_0 = MAXI_BVALID) or (version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            MAXI_BREADY <= ap_const_logic_1;
        else 
            MAXI_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_1128, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1128 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MAXI_RREADY <= ap_const_logic_1;
        else 
            MAXI_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_WVALID_assign_proc : process(ap_enable_reg_pp3_iter2, exitcond1_reg_1407_pp3_iter1_reg, ap_reg_ioackin_MAXI_WREADY, ap_block_pp3_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (exitcond1_reg_1407_pp3_iter1_reg = ap_const_lv1_0) and (ap_reg_ioackin_MAXI_WREADY = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            MAXI_WVALID <= ap_const_logic_1;
        else 
            MAXI_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_blk_n_AR_assign_proc : process(m_axi_MAXI_ARREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            MAXI_blk_n_AR <= m_axi_MAXI_ARREADY;
        else 
            MAXI_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_AW_assign_proc : process(m_axi_MAXI_AWREADY, ap_CS_fsm_state19, exitcond_flatten1_fu_613_p2)
    begin
        if (((exitcond_flatten1_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            MAXI_blk_n_AW <= m_axi_MAXI_AWREADY;
        else 
            MAXI_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_B_assign_proc : process(m_axi_MAXI_BVALID, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            MAXI_blk_n_B <= m_axi_MAXI_BVALID;
        else 
            MAXI_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_R_assign_proc : process(m_axi_MAXI_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_1128)
    begin
        if (((exitcond_reg_1128 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MAXI_blk_n_R <= m_axi_MAXI_RVALID;
        else 
            MAXI_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_W_assign_proc : process(m_axi_MAXI_WREADY, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, exitcond1_reg_1407_pp3_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (exitcond1_reg_1407_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            MAXI_blk_n_W <= m_axi_MAXI_WREADY;
        else 
            MAXI_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(22);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(23);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(28);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(29);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state28 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(26);
    ap_CS_fsm_state46 <= ap_CS_fsm(33);
    ap_CS_fsm_state47 <= ap_CS_fsm(34);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1128, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_reg_1128 = ap_const_lv1_0) and (ap_const_logic_0 = MAXI_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1128, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_reg_1128 = ap_const_lv1_0) and (ap_const_logic_0 = MAXI_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state42_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state42_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state42_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state42_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;

        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter1_assign_proc : process(exitcond_reg_1128, MAXI_RVALID)
    begin
                ap_block_state14_pp0_stage0_iter1 <= ((exitcond_reg_1128 = ap_const_lv1_0) and (ap_const_logic_0 = MAXI_RVALID));
    end process;

        ap_block_state15_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_io_assign_proc : process(exitcond_flatten1_fu_613_p2, ap_sig_ioackin_MAXI_AWREADY)
    begin
                ap_block_state19_io <= ((exitcond_flatten1_fu_613_p2 = ap_const_lv1_1) and (ap_sig_ioackin_MAXI_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state24_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state42_io_assign_proc : process(exitcond1_reg_1407_pp3_iter1_reg, ap_sig_ioackin_MAXI_WREADY)
    begin
                ap_block_state42_io <= ((exitcond1_reg_1407_pp3_iter1_reg = ap_const_lv1_0) and (ap_sig_ioackin_MAXI_WREADY = ap_const_logic_0));
    end process;

        ap_block_state42_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state47_assign_proc : process(r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, MAXI_BVALID)
    begin
                ap_block_state47 <= ((ap_const_logic_0 = MAXI_BVALID) or (version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state13_assign_proc : process(exitcond_fu_556_p2)
    begin
        if ((exitcond_fu_556_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state31_assign_proc : process(exitcond_flatten_fu_917_p2)
    begin
        if ((exitcond_flatten_fu_917_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state40_assign_proc : process(exitcond1_fu_1063_p2)
    begin
        if ((exitcond1_fu_1063_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state40 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, ap_CS_fsm_state47, MAXI_BVALID)
    begin
        if ((not(((ap_const_logic_0 = MAXI_BVALID) or (version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_i_phi_fu_418_p4_assign_proc : process(i_i_reg_414, tmp_i_reg_1270, ap_CS_fsm_pp1_stage0, i_reg_1274, val_assign_reg_1305, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (tmp_i_reg_1270 = ap_const_lv1_1) and (val_assign_reg_1305 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_i_phi_fu_418_p4 <= i_reg_1274;
        else 
            ap_phi_mux_i_i_phi_fu_418_p4 <= i_i_reg_414;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_429_p4_assign_proc : process(indvar_flatten_reg_425, exitcond_flatten_reg_1319, ap_CS_fsm_pp2_stage0, indvar_flatten_next_reg_1323, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond_flatten_reg_1319 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_429_p4 <= indvar_flatten_next_reg_1323;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_429_p4 <= indvar_flatten_reg_425;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_373_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_1128, indvar_reg_369, indvar_next_reg_1132)
    begin
        if (((exitcond_reg_1128 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_phi_fu_373_p4 <= indvar_next_reg_1132;
        else 
            ap_phi_mux_indvar_phi_fu_373_p4 <= indvar_reg_369;
        end if; 
    end process;


    ap_phi_mux_x_i_phi_fu_440_p4_assign_proc : process(x_i_reg_436, exitcond_flatten_reg_1319, ap_CS_fsm_pp2_stage0, x_i_mid2_reg_1334, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond_flatten_reg_1319 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_x_i_phi_fu_440_p4 <= x_i_mid2_reg_1334;
        else 
            ap_phi_mux_x_i_phi_fu_440_p4 <= x_i_reg_436;
        end if; 
    end process;


    ap_phi_mux_y_i_phi_fu_475_p4_assign_proc : process(y_i_reg_471, exitcond_flatten_reg_1319, ap_CS_fsm_pp2_stage0, y_2_reg_1340, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond_flatten_reg_1319 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_y_i_phi_fu_475_p4 <= y_2_reg_1340;
        else 
            ap_phi_mux_y_i_phi_fu_475_p4 <= y_i_reg_471;
        end if; 
    end process;


    ap_predicate_tran27to28_state26_assign_proc : process(tmp_i_reg_1270, val_assign_fu_783_p2)
    begin
                ap_predicate_tran27to28_state26 <= ((val_assign_fu_783_p2 = ap_const_lv1_1) and (tmp_i_reg_1270 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, ap_CS_fsm_state47, MAXI_BVALID)
    begin
        if ((not(((ap_const_logic_0 = MAXI_BVALID) or (version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_MAXI_ARREADY_assign_proc : process(MAXI_ARREADY, ap_reg_ioackin_MAXI_ARREADY)
    begin
        if ((ap_reg_ioackin_MAXI_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_MAXI_ARREADY <= MAXI_ARREADY;
        else 
            ap_sig_ioackin_MAXI_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_MAXI_AWREADY_assign_proc : process(MAXI_AWREADY, ap_reg_ioackin_MAXI_AWREADY)
    begin
        if ((ap_reg_ioackin_MAXI_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_MAXI_AWREADY <= MAXI_AWREADY;
        else 
            ap_sig_ioackin_MAXI_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_MAXI_WREADY_assign_proc : process(MAXI_WREADY, ap_reg_ioackin_MAXI_WREADY)
    begin
        if ((ap_reg_ioackin_MAXI_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_MAXI_WREADY <= MAXI_WREADY;
        else 
            ap_sig_ioackin_MAXI_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    b_1_ack_in_assign_proc : process(b_1_vld_reg)
    begin
        if (((b_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (b_1_vld_reg = ap_const_logic_1)))) then 
            b_1_ack_in <= ap_const_logic_1;
        else 
            b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    b_1_vld_in_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            b_1_vld_in <= ap_const_logic_1;
        else 
            b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    b_local_1_pixelR_ass_fu_812_p3 <= 
        b_local_1_fu_156 when (tmp_10_fu_791_p2(0) = '1') else 
        sectionData_load_5_reg_1254;
    current_V_1_fu_984_p2 <= std_logic_vector(unsigned(p_shl_i2_fu_976_p3) - unsigned(tmp_15_fu_968_p1));
    current_V_fu_664_p2 <= std_logic_vector(unsigned(tmp_14_fu_659_p2) - unsigned(tmp_6_reg_1220));
    exitcond1_fu_1063_p2 <= "1" when (indvar2_reg_482 = tmp_9_reg_1109) else "0";
    exitcond2_fu_624_p2 <= "0" when (y_reg_403 = height_read_reg_1096) else "1";
    exitcond_flatten1_fu_613_p2 <= "1" when (indvar_flatten1_reg_381 = bound_reg_1185) else "0";
    exitcond_flatten_fu_917_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_429_p4 = bound_reg_1185) else "0";
    exitcond_fu_556_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_373_p4 = tmp_9_reg_1109) else "0";
    exitcond_i8_fu_928_p2 <= "1" when (ap_phi_mux_y_i_phi_fu_475_p4 = height_read_reg_1096) else "0";

    g_1_ack_in_assign_proc : process(g_1_vld_reg)
    begin
        if (((g_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (g_1_vld_reg = ap_const_logic_1)))) then 
            g_1_ack_in <= ap_const_logic_1;
        else 
            g_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    g_1_vld_in_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            g_1_vld_in <= ap_const_logic_1;
        else 
            g_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    g_local_1_pixelG_ass_fu_805_p3 <= 
        g_local_1_fu_160 when (tmp_10_fu_791_p2(0) = '1') else 
        sectionData_load_4_reg_1246;
    grp_fu_584_p0 <= grp_fu_584_p00(32 - 1 downto 0);
    grp_fu_584_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_read_reg_1096),64));
    grp_fu_584_p1 <= grp_fu_584_p10(32 - 1 downto 0);
    grp_fu_584_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_read_reg_1089),64));

    height_0_ack_out_assign_proc : process(r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, ap_CS_fsm_state47, MAXI_BVALID)
    begin
        if ((not(((ap_const_logic_0 = MAXI_BVALID) or (version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            height_0_ack_out <= ap_const_logic_1;
        else 
            height_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_708_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_i_phi_fu_418_p4) + unsigned(ap_const_lv12_1));
    i_i_cast6_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_i_phi_fu_418_p4),15));
    indvar1_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_369_pp0_iter1_reg),64));
    indvar3_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar2_reg_482),64));
    indvar_flatten_next1_fu_618_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_381) + unsigned(ap_const_lv64_1));
    indvar_flatten_next_fu_922_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_429_p4) + unsigned(ap_const_lv64_1));
    indvar_next1_fu_1068_p2 <= std_logic_vector(unsigned(indvar2_reg_482) + unsigned(ap_const_lv30_1));
    indvar_next_fu_561_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_373_p4) + unsigned(ap_const_lv30_1));

    length_r_0_ack_out_assign_proc : process(r_1_ack_in, g_1_ack_in, b_1_ack_in, version_1_ack_in, ap_CS_fsm_state47, MAXI_BVALID)
    begin
        if ((not(((ap_const_logic_0 = MAXI_BVALID) or (version_1_ack_in = ap_const_logic_0) or (b_1_ack_in = ap_const_logic_0) or (g_1_ack_in = ap_const_logic_0) or (r_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            length_r_0_ack_out <= ap_const_logic_1;
        else 
            length_r_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_cast4_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(numberOfPixelsVisted_1_reg_1262),15));
    lhs_V_3_cast_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_V_1_reg_1350),14));
    lhs_V_cast_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_V_reg_1226),14));
    lhs_V_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_cast_reg_1314),45));
    p_0111_1_agg_result_V_fu_819_p3 <= 
        p_0111_1_fu_152 when (tmp_10_fu_791_p2(0) = '1') else 
        agg_result_V_1_i_reg_447;
    p_add_i32_shr_cast8_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1109),32));
    p_shl_i1_cast_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i1_fu_855_p3),15));
    p_shl_i1_fu_855_p3 <= (numberOfPixelsVisted_1_reg_1262 & ap_const_lv2_0);
    p_shl_i2_fu_976_p3 <= (tmp_16_fu_972_p1 & ap_const_lv2_0);
    p_shl_i_cast_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_718_p3),15));
    p_shl_i_fu_718_p3 <= (ap_phi_mux_i_i_phi_fu_418_p4 & ap_const_lv2_0);

    r_1_ack_in_assign_proc : process(r_1_vld_reg)
    begin
        if (((r_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (r_1_vld_reg = ap_const_logic_1)))) then 
            r_1_ack_in <= ap_const_logic_1;
        else 
            r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    r_1_vld_in_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            r_1_vld_in <= ap_const_logic_1;
        else 
            r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_688_p2 <= std_logic_vector(unsigned(ap_const_lv14_2) + unsigned(lhs_V_cast_fu_674_p1));
        r_V_2_cast_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_fu_866_p2),44));

    r_V_2_fu_866_p2 <= std_logic_vector(unsigned(p_shl_i1_cast_fu_862_p1) - unsigned(lhs_V_1_cast4_fu_852_p1));
    r_V_3_fu_895_p2 <= std_logic_vector(unsigned(lhs_V_fu_892_p1) + unsigned(ap_const_lv45_1));
    r_V_4_fu_906_p2 <= std_logic_vector(unsigned(lhs_V_fu_892_p1) + unsigned(ap_const_lv45_2));
    r_V_5_fu_997_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(lhs_V_3_cast_fu_994_p1));
    r_V_6_fu_1008_p2 <= std_logic_vector(unsigned(ap_const_lv14_2) + unsigned(lhs_V_3_cast_reg_1361));
    r_V_fu_677_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(lhs_V_cast_fu_674_p1));
    r_local_1_pixelB_ass_fu_797_p3 <= 
        r_local_1_fu_164 when (tmp_10_fu_791_p2(0) = '1') else 
        reg_505;
    result_V_fu_1034_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(agg_result_V_load_i_reg_459));

    sectionData_address0_assign_proc : process(ap_block_pp0_stage0, ap_block_pp3_stage0, ap_CS_fsm_state22, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state16, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2, indvar1_fu_567_p1, tmp_s_fu_694_p1, tmp_22_i_fu_990_p1, ap_block_pp2_stage1, indvar3_fu_1074_p1, ap_CS_fsm_state17)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            sectionData_address0 <= indvar3_fu_1074_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            sectionData_address0 <= tmp_22_i_fu_990_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sectionData_address0 <= tmp_s_fu_694_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sectionData_address0 <= ap_const_lv13_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sectionData_address0 <= ap_const_lv13_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sectionData_address0 <= indvar1_fu_567_p1(13 - 1 downto 0);
        else 
            sectionData_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sectionData_address1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state21, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, tmp_2_fu_669_p1, tmp_4_fu_683_p1, ap_block_pp2_stage1, tmp_23_i_fu_1003_p1, tmp_24_i_fu_1013_p1, ap_CS_fsm_state17)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            sectionData_address1 <= tmp_24_i_fu_1013_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            sectionData_address1 <= tmp_23_i_fu_1003_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sectionData_address1 <= tmp_4_fu_683_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sectionData_address1 <= tmp_2_fu_669_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sectionData_address1 <= ap_const_lv13_2;
        else 
            sectionData_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sectionData_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state22, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_state16, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            sectionData_ce0 <= ap_const_logic_1;
        else 
            sectionData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sectionData_ce1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state21, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            sectionData_ce1 <= ap_const_logic_1;
        else 
            sectionData_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sectionData_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_reg_1128_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_1128_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sectionData_we0 <= ap_const_logic_1;
        else 
            sectionData_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_777_p2 <= (tmp_i_i_4_fu_767_p2 and tmp_26_i_i_fu_772_p2);
    tmp2_fu_1040_p2 <= (tmp_i_i1_6_reg_1381 and tmp_26_i_i1_reg_1386);
    tmp_10_fu_791_p2 <= "1" when (unsigned(agg_result_V_1_i_reg_447) < unsigned(p_0111_1_fu_152)) else "0";
    tmp_11_fu_600_p1 <= length_read_reg_1089(13 - 1 downto 0);
    tmp_12_fu_651_p1 <= x_cast_mid2_v_fu_643_p3(13 - 1 downto 0);
    tmp_13_fu_655_p1 <= y_mid2_fu_629_p3(13 - 1 downto 0);
    tmp_14_fu_659_p2 <= std_logic_vector(shift_left(unsigned(tmp_6_reg_1220),to_integer(unsigned('0' & ap_const_lv13_2(13-1 downto 0)))));
    tmp_15_fu_968_p1 <= tmp_i2_fu_964_p2(13 - 1 downto 0);
    tmp_15_i_fu_730_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_726_p1) - unsigned(i_i_cast6_fu_714_p1));
    tmp_16_fu_972_p1 <= tmp_i2_fu_964_p2(11 - 1 downto 0);
        tmp_16_i_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_i_fu_730_p2),64));

    tmp_17_i_fu_741_p2 <= std_logic_vector(signed(tmp_15_i_reg_1279) + signed(ap_const_lv15_1));
        tmp_18_i_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_i_fu_741_p2),64));

    tmp_19_i_fu_751_p2 <= std_logic_vector(signed(tmp_15_i_reg_1279) + signed(ap_const_lv15_2));
        tmp_20_i_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_i_fu_751_p2),64));

    tmp_22_i_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_V_1_reg_1350),64));
    tmp_23_i_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_fu_997_p2),64));
    tmp_24_i_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_6_fu_1008_p2),64));
    tmp_25_agg_result_V_1_fu_1056_p3 <= 
        result_V_reg_1391 when (val_assign_1_fu_1044_p2(0) = '1') else 
        agg_result_V_load_i_reg_459;
    tmp_25_agg_result_V_s_fu_1049_p3 <= 
        result_V_reg_1391 when (val_assign_1_fu_1044_p2(0) = '1') else 
        agg_result_V_1_i_reg_447;
    tmp_26_i_i1_fu_1029_p2 <= "1" when (sectionData_q1 = sectionData_load_5_reg_1254) else "0";
    tmp_26_i_i_fu_772_p2 <= "1" when (sectionData_load_5_reg_1254 = visited_q1) else "0";
    tmp_2_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_V_fu_664_p2),64));
    tmp_3_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram1_reg_1084),64));
    tmp_3_i_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_fu_895_p2),64));
    tmp_4_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_677_p2),64));
    tmp_5_i_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_906_p2),64));
    tmp_6_i_fu_881_p2 <= std_logic_vector(unsigned(numberOfPixelsVisted_1_reg_1262) + unsigned(ap_const_lv12_1));
    tmp_8_fu_522_p0 <= length_r_0_data_reg;
    tmp_8_fu_522_p2 <= std_logic_vector(shift_left(unsigned(tmp_8_fu_522_p0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_9_fu_538_p1 <= grp_fu_534_p2(30 - 1 downto 0);
    tmp_fu_528_p1 <= length_r_0_data_reg;
    tmp_fu_528_p2 <= std_logic_vector(unsigned(tmp_8_fu_522_p2) - unsigned(tmp_fu_528_p1));
    tmp_i1_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_cast_fu_872_p1),64));
    tmp_i2_fu_964_p2 <= std_logic_vector(unsigned(tmp_i1_5_reg_1345) + unsigned(x_i_mid2_reg_1334_pp2_iter1_reg));
    tmp_i_fu_703_p2 <= "1" when (unsigned(ap_phi_mux_i_i_phi_fu_418_p4) < unsigned(numberOfPixelsVisted_1_reg_1262)) else "0";
    tmp_i_i1_6_fu_1024_p2 <= "1" when (sectionData_q1 = sectionData_load_4_reg_1246) else "0";
    tmp_i_i1_fu_1018_p2 <= "1" when (sectionData_q0 = reg_505) else "0";
    tmp_i_i_4_fu_767_p2 <= "1" when (sectionData_load_4_reg_1246 = visited_q0) else "0";
    tmp_i_i_fu_761_p2 <= "1" when (reg_505 = visited_q0) else "0";
    tmp_s_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_688_p2),64));
    val_assign_1_fu_1044_p2 <= (tmp_i_i1_reg_1376 and tmp2_fu_1040_p2);
    val_assign_fu_783_p2 <= (tmp_i_i_reg_1300 and tmp1_fu_777_p2);

    version_1_ack_in_assign_proc : process(version_1_vld_reg)
    begin
        if (((version_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (version_1_vld_reg = ap_const_logic_1)))) then 
            version_1_ack_in <= ap_const_logic_1;
        else 
            version_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    version_1_vld_in_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            version_1_vld_in <= ap_const_logic_1;
        else 
            version_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    visited_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state30, ap_block_pp1_stage0, tmp_16_i_fu_736_p1, tmp_18_i_fu_746_p1, ap_block_pp1_stage1, tmp_3_i_fu_901_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            visited_address0 <= tmp_3_i_fu_901_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            visited_address0 <= tmp_18_i_fu_746_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            visited_address0 <= tmp_16_i_fu_736_p1(13 - 1 downto 0);
        else 
            visited_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    visited_address1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_block_pp1_stage1, tmp_20_i_fu_756_p1, tmp_i1_fu_876_p1, tmp_5_i_fu_912_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            visited_address1 <= tmp_5_i_fu_912_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            visited_address1 <= tmp_i1_fu_876_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            visited_address1 <= tmp_20_i_fu_756_p1(13 - 1 downto 0);
        else 
            visited_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    visited_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            visited_ce0 <= ap_const_logic_1;
        else 
            visited_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    visited_ce1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            visited_ce1 <= ap_const_logic_1;
        else 
            visited_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    visited_d1_assign_proc : process(reg_505, sectionData_load_5_reg_1254, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            visited_d1 <= sectionData_load_5_reg_1254;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            visited_d1 <= reg_505;
        else 
            visited_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    visited_we0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            visited_we0 <= ap_const_logic_1;
        else 
            visited_we0 <= ap_const_logic_0;
        end if; 
    end process;


    visited_we1_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            visited_we1 <= ap_const_logic_1;
        else 
            visited_we1 <= ap_const_logic_0;
        end if; 
    end process;

    x_1_fu_941_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_x_i_phi_fu_440_p4));
    x_cast_mid2_v_fu_643_p3 <= 
        x_reg_392 when (exitcond2_fu_624_p2(0) = '1') else 
        x_s_fu_637_p2;
    x_i_mid2_fu_947_p3 <= 
        x_1_fu_941_p2 when (exitcond_i8_fu_928_p2(0) = '1') else 
        ap_phi_mux_x_i_phi_fu_440_p4;
    x_s_fu_637_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(x_reg_392));
    y_1_fu_847_p2 <= std_logic_vector(unsigned(y_mid2_reg_1200) + unsigned(ap_const_lv32_1));
    y_2_fu_959_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(y_i_mid2_reg_1328));
    y_i_mid2_fu_933_p3 <= 
        ap_const_lv32_0 when (exitcond_i8_fu_928_p2(0) = '1') else 
        ap_phi_mux_y_i_phi_fu_475_p4;
    y_mid2_fu_629_p3 <= 
        y_reg_403 when (exitcond2_fu_624_p2(0) = '1') else 
        ap_const_lv32_0;
end behav;
